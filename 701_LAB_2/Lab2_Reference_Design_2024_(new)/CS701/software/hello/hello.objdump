
hello.elf:     file format elf32-littlenios2
hello.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00005860 memsz 0x00005860 flags r-x
    LOAD off    0x00006880 vaddr 0x04005880 paddr 0x040072ec align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008d58 vaddr 0x04008d58 paddr 0x04008d58 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000055f4  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  04005838  04005838  00006838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  04005880  040072ec  00006880  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  04008d58  04008d58  00008d58  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04008eac  04008eac  000082ec  2**0
                  CONTENTS
  7 .onchip_memory 00000000  08008000  08008000  000082ec  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000082ec  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a30  00000000  00000000  00008310  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000164f2  00000000  00000000  00008d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000603f  00000000  00000000  0001f232  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000068ba  00000000  00000000  00025271  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000159c  00000000  00000000  0002bb2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002718  00000000  00000000  0002d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a4c  00000000  00000000  0002f7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0003422c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00034260  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00036e22  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00036e25  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00036e28  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00036e29  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00036e2a  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00036e33  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00036e3c  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000e  00000000  00000000  00036e45  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000034  00000000  00000000  00036e53  2**0
                  CONTENTS, READONLY
 27 .jdi          00004c0a  00000000  00000000  00036e87  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00065324  00000000  00000000  0003ba91  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
04005838 l    d  .rodata	00000000 .rodata
04005880 l    d  .rwdata	00000000 .rwdata
04008d58 l    d  .bss	00000000 .bss
04008eac l    d  .sdram	00000000 .sdram
08008000 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
04000430 l     F .text	00000008 __fp_unlock
04000444 l     F .text	0000019c __sinit.part.1
040005e0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04005880 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
0400308c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04003198 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
040031c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
040032b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04003390 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400347c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04003650 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040072dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0400389c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
040039d0 l     F .text	00000034 alt_dev_reg
04006254 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04003cc0 l     F .text	0000020c altera_avalon_jtag_uart_irq
04003ecc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04004504 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400476c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04004be0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04004d20 l     F .text	0000003c alt_get_errno
04004d5c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04008d80 g     O .bss	00000004 alt_instruction_exception_handler
04002e84 g     F .text	00000054 _isatty_r
0400358c g     F .text	0000007c alt_main
040002c4 g     F .text	000000c0 _puts_r
04008dac g     O .bss	00000100 alt_irq
04002bac g     F .text	00000060 _lseek_r
040072ec g       *ABS*	00000000 __flash_rwdata_start
04008eac g       *ABS*	00000000 __alt_heap_start
04002160 g     F .text	0000005c __sseek
04000780 g     F .text	00000010 __sinit
040005e8 g     F .text	00000068 __sfmoreglue
0400362c g     F .text	00000024 __malloc_unlock
0400184c g     F .text	0000015c memmove
04000768 g     F .text	00000018 _cleanup
04005118 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000001c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
04002e28 g     F .text	0000005c _fstat_r
04008d64 g     O .bss	00000004 errno
040020dc g     F .text	00000008 __seofread
04008d6c g     O .bss	00000004 alt_argv
0400f2b4 g       *ABS*	00000000 _gp
040060d4 g     O .rwdata	00000180 alt_fd_list
0400513c g     F .text	00000090 alt_find_dev
04001704 g     F .text	00000148 memcpy
04000438 g     F .text	0000000c _cleanup_r
04004ca4 g     F .text	0000007c alt_io_redirect
04005838 g       *ABS*	00000000 __DTOR_END__
04000384 g     F .text	00000014 puts
04005408 g     F .text	0000009c alt_exception_cause_generated_bad_addr
040040c4 g     F .text	0000021c altera_avalon_jtag_uart_read
04002fd0 g     F .text	00000064 .hidden __udivsi3
040032ec g     F .text	000000a4 isatty
04005378 g     F .text	00000090 alt_icache_flush
04008d60 g     O .bss	00000004 __malloc_top_pad
040007d0 g     F .text	000004bc __sfvwrite_r
04002034 g     F .text	00000054 _sbrk_r
04002dc8 g     F .text	00000060 _read_r
040072d4 g     O .rwdata	00000004 alt_max_fd
040023cc g     F .text	000000f0 _fclose_r
04002748 g     F .text	00000030 fflush
04008d5c g     O .bss	00000004 __malloc_max_sbrked_mem
040034b8 g     F .text	000000d4 lseek
040072b4 g     O .rwdata	00000004 _global_impure_ptr
04001ad0 g     F .text	00000564 _realloc_r
04008eac g       *ABS*	00000000 __bss_end
04004af0 g     F .text	000000f0 alt_iic_isr_register
04005010 g     F .text	00000108 alt_tick
040007a0 g     F .text	00000018 __fp_lock_all
04004aa4 g     F .text	0000004c alt_ic_irq_enabled
04004f74 g     F .text	0000009c alt_alarm_stop
04008d74 g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d4 alt_irq_handler
040060ac g     O .rwdata	00000028 alt_dev_null
04004724 g     F .text	00000048 alt_dcache_flush_all
040072ec g       *ABS*	00000000 __ram_rwdata_end
08008000 g       *ABS*	00000000 __alt_mem_onchip_memory
040072cc g     O .rwdata	00000008 alt_dev_list
040038d8 g     F .text	000000f8 write
04005880 g       *ABS*	00000000 __ram_rodata_end
04003200 g     F .text	000000b0 fstat
04003034 g     F .text	00000058 .hidden __umodsi3
04008eac g       *ABS*	00000000 end
04003c00 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04005838 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0400457c g     F .text	0000007c alt_avalon_timer_sc_init
040042e0 g     F .text	00000224 altera_avalon_jtag_uart_write
04000790 g     F .text	00000004 __sfp_lock_acquire
04001620 g     F .text	000000e4 memchr
0400289c g     F .text	00000310 _free_r
04005684 g     F .text	00000180 __call_exitprocs
040072bc g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	0000004c _start
04008d78 g     O .bss	00000004 _alt_tick_rate
04008d7c g     O .bss	00000004 _alt_nticks
0400368c g     F .text	000000fc read
04003a3c g     F .text	00000060 alt_sys_init
0400556c g     F .text	00000118 __register_exitproc
04003f6c g     F .text	00000068 altera_avalon_jtag_uart_close
04005880 g       *ABS*	00000000 __ram_rwdata_start
04005838 g       *ABS*	00000000 __ram_rodata_start
04008d84 g     O .bss	00000028 __malloc_current_mallinfo
04003a9c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040052d4 g     F .text	000000a4 alt_get_fd
04002378 g     F .text	00000054 _close_r
040054f0 g     F .text	0000007c memcmp
04003b5c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04008eac g       *ABS*	00000000 __alt_stack_base
04003bac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04002224 g     F .text	00000154 __swsetup_r
04000650 g     F .text	00000118 __sfp
04005ca4 g     O .rwdata	00000408 __malloc_av_
0400079c g     F .text	00000004 __sinit_lock_release
04002088 g     F .text	00000054 __sread
040051cc g     F .text	00000108 alt_find_file
040047a8 g     F .text	000000a4 alt_dev_llist_insert
04003608 g     F .text	00000024 __malloc_lock
040037ec g     F .text	000000b0 sbrk
040026ec g     F .text	0000005c _fflush_r
04008d58 g       *ABS*	00000000 __bss_start
040019a8 g     F .text	00000128 memset
04000290 g     F .text	00000034 main
04008d70 g     O .bss	00000004 alt_envp
04008d58 g     O .bss	00000004 __malloc_max_total_mem
04003afc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
040021bc g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
040024bc g     F .text	00000014 fclose
04000e14 g     F .text	0000080c _malloc_r
040072d8 g     O .rwdata	00000004 alt_errno
04000c8c g     F .text	000000c4 _fwalk
04002ed8 g     F .text	00000084 .hidden __divsi3
04002778 g     F .text	00000124 _malloc_trim_r
04005838 g       *ABS*	00000000 __CTOR_END__
04005838 g       *ABS*	00000000 __flash_rodata_start
04005838 g       *ABS*	00000000 __DTOR_LIST__
04003a04 g     F .text	00000038 alt_irq_init
04003788 g     F .text	00000064 alt_release_fd
040054a4 g     F .text	00000014 atexit
040021c4 g     F .text	00000060 _write_r
040072b8 g     O .rwdata	00000004 _impure_ptr
04008d68 g     O .bss	00000004 alt_argc
040024d0 g     F .text	0000021c __sflush_r
040048ac g     F .text	00000060 _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
040007b8 g     F .text	00000018 __fp_unlock_all
040072c4 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04004940 g     F .text	00000050 alt_ic_isr_register
040072ec g       *ABS*	00000000 _edata
04008eac g       *ABS*	00000000 _end
04000244 g       *ABS*	00000000 __ram_exceptions_end
04003fd4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04004a18 g     F .text	0000008c alt_ic_irq_disable
040020e4 g     F .text	0000007c __swrite
040072c0 g     O .rwdata	00000004 __malloc_trim_threshold
040054b8 g     F .text	00000038 exit
04000d50 g     F .text	000000c4 _fwalk_reent
04002f5c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000794 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
04005804 g     F .text	00000034 _exit
040045f8 g     F .text	0000012c alt_alarm_start
04002c0c g     F .text	000001bc __smakebuf_r
04000398 g     F .text	00000098 strlen
04004e20 g     F .text	00000154 open
0400490c g     F .text	00000034 alt_icache_flush_all
040072e0 g     O .rwdata	00000004 alt_priority_mask
04004990 g     F .text	00000088 alt_ic_irq_enable
040072e4 g     O .rwdata	00000008 alt_alarm_list
0400484c g     F .text	00000060 _do_ctors
040030c8 g     F .text	000000d0 close
040033f8 g     F .text	00000084 alt_load
04000798 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_mem_onchip_memory+0xfbff8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810074 	movhi	r2,1025
 4000140:	10a36b04 	addi	r2,r2,-29268
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810074 	movhi	r2,1025
 4000158:	10a36b04 	addi	r2,r2,-29268
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_mem_onchip_memory+0xfbff812c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_mem_onchip_memory+0xfbff8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a6b317 	ldw	r2,-25908(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a6b317 	ldw	r2,-25908(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00880014 	movui	r2,8192
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_mem_onchip_memory+0xfbff8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 4000260:	d6bcad14 	ori	gp,gp,62132
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000268:	10a35614 	ori	r2,r2,36184

    movhi r3, %hi(__bss_end)
 400026c:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 4000270:	18e3ab14 	ori	r3,r3,36524

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_mem_onchip_memory+0xfbff8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	40033f80 	call	40033f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	400358c0 	call	400358c <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_mem_onchip_memory+0xfbff828c>

04000290 <main>:
 */

#include <stdio.h>

int main()
{
 4000290:	defffe04 	addi	sp,sp,-8
 4000294:	dfc00115 	stw	ra,4(sp)
 4000298:	df000015 	stw	fp,0(sp)
 400029c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 40002a0:	01010034 	movhi	r4,1024
 40002a4:	21160e04 	addi	r4,r4,22584
 40002a8:	40003840 	call	4000384 <puts>

  return 0;
 40002ac:	0005883a 	mov	r2,zero
}
 40002b0:	e037883a 	mov	sp,fp
 40002b4:	dfc00117 	ldw	ra,4(sp)
 40002b8:	df000017 	ldw	fp,0(sp)
 40002bc:	dec00204 	addi	sp,sp,8
 40002c0:	f800283a 	ret

040002c4 <_puts_r>:
 40002c4:	defff604 	addi	sp,sp,-40
 40002c8:	dc000715 	stw	r16,28(sp)
 40002cc:	2021883a 	mov	r16,r4
 40002d0:	2809883a 	mov	r4,r5
 40002d4:	dc400815 	stw	r17,32(sp)
 40002d8:	dfc00915 	stw	ra,36(sp)
 40002dc:	2823883a 	mov	r17,r5
 40002e0:	40003980 	call	4000398 <strlen>
 40002e4:	10c00044 	addi	r3,r2,1
 40002e8:	d8800115 	stw	r2,4(sp)
 40002ec:	00810034 	movhi	r2,1024
 40002f0:	10961304 	addi	r2,r2,22604
 40002f4:	d8800215 	stw	r2,8(sp)
 40002f8:	00800044 	movi	r2,1
 40002fc:	d8800315 	stw	r2,12(sp)
 4000300:	00800084 	movi	r2,2
 4000304:	dc400015 	stw	r17,0(sp)
 4000308:	d8c00615 	stw	r3,24(sp)
 400030c:	dec00415 	stw	sp,16(sp)
 4000310:	d8800515 	stw	r2,20(sp)
 4000314:	80000226 	beq	r16,zero,4000320 <_puts_r+0x5c>
 4000318:	80800e17 	ldw	r2,56(r16)
 400031c:	10001426 	beq	r2,zero,4000370 <_puts_r+0xac>
 4000320:	81400217 	ldw	r5,8(r16)
 4000324:	2880030b 	ldhu	r2,12(r5)
 4000328:	10c8000c 	andi	r3,r2,8192
 400032c:	1800061e 	bne	r3,zero,4000348 <_puts_r+0x84>
 4000330:	29001917 	ldw	r4,100(r5)
 4000334:	00f7ffc4 	movi	r3,-8193
 4000338:	10880014 	ori	r2,r2,8192
 400033c:	20c6703a 	and	r3,r4,r3
 4000340:	2880030d 	sth	r2,12(r5)
 4000344:	28c01915 	stw	r3,100(r5)
 4000348:	d9800404 	addi	r6,sp,16
 400034c:	8009883a 	mov	r4,r16
 4000350:	40007d00 	call	40007d0 <__sfvwrite_r>
 4000354:	1000091e 	bne	r2,zero,400037c <_puts_r+0xb8>
 4000358:	00800284 	movi	r2,10
 400035c:	dfc00917 	ldw	ra,36(sp)
 4000360:	dc400817 	ldw	r17,32(sp)
 4000364:	dc000717 	ldw	r16,28(sp)
 4000368:	dec00a04 	addi	sp,sp,40
 400036c:	f800283a 	ret
 4000370:	8009883a 	mov	r4,r16
 4000374:	40007800 	call	4000780 <__sinit>
 4000378:	003fe906 	br	4000320 <__alt_mem_onchip_memory+0xfbff8320>
 400037c:	00bfffc4 	movi	r2,-1
 4000380:	003ff606 	br	400035c <__alt_mem_onchip_memory+0xfbff835c>

04000384 <puts>:
 4000384:	00810034 	movhi	r2,1024
 4000388:	109cae04 	addi	r2,r2,29368
 400038c:	200b883a 	mov	r5,r4
 4000390:	11000017 	ldw	r4,0(r2)
 4000394:	40002c41 	jmpi	40002c4 <_puts_r>

04000398 <strlen>:
 4000398:	208000cc 	andi	r2,r4,3
 400039c:	10002026 	beq	r2,zero,4000420 <strlen+0x88>
 40003a0:	20800007 	ldb	r2,0(r4)
 40003a4:	10002026 	beq	r2,zero,4000428 <strlen+0x90>
 40003a8:	2005883a 	mov	r2,r4
 40003ac:	00000206 	br	40003b8 <strlen+0x20>
 40003b0:	10c00007 	ldb	r3,0(r2)
 40003b4:	18001826 	beq	r3,zero,4000418 <strlen+0x80>
 40003b8:	10800044 	addi	r2,r2,1
 40003bc:	10c000cc 	andi	r3,r2,3
 40003c0:	183ffb1e 	bne	r3,zero,40003b0 <__alt_mem_onchip_memory+0xfbff83b0>
 40003c4:	10c00017 	ldw	r3,0(r2)
 40003c8:	01ffbff4 	movhi	r7,65279
 40003cc:	39ffbfc4 	addi	r7,r7,-257
 40003d0:	00ca303a 	nor	r5,zero,r3
 40003d4:	01a02074 	movhi	r6,32897
 40003d8:	19c7883a 	add	r3,r3,r7
 40003dc:	31a02004 	addi	r6,r6,-32640
 40003e0:	1946703a 	and	r3,r3,r5
 40003e4:	1986703a 	and	r3,r3,r6
 40003e8:	1800091e 	bne	r3,zero,4000410 <strlen+0x78>
 40003ec:	10800104 	addi	r2,r2,4
 40003f0:	10c00017 	ldw	r3,0(r2)
 40003f4:	19cb883a 	add	r5,r3,r7
 40003f8:	00c6303a 	nor	r3,zero,r3
 40003fc:	28c6703a 	and	r3,r5,r3
 4000400:	1986703a 	and	r3,r3,r6
 4000404:	183ff926 	beq	r3,zero,40003ec <__alt_mem_onchip_memory+0xfbff83ec>
 4000408:	00000106 	br	4000410 <strlen+0x78>
 400040c:	10800044 	addi	r2,r2,1
 4000410:	10c00007 	ldb	r3,0(r2)
 4000414:	183ffd1e 	bne	r3,zero,400040c <__alt_mem_onchip_memory+0xfbff840c>
 4000418:	1105c83a 	sub	r2,r2,r4
 400041c:	f800283a 	ret
 4000420:	2005883a 	mov	r2,r4
 4000424:	003fe706 	br	40003c4 <__alt_mem_onchip_memory+0xfbff83c4>
 4000428:	0005883a 	mov	r2,zero
 400042c:	f800283a 	ret

04000430 <__fp_unlock>:
 4000430:	0005883a 	mov	r2,zero
 4000434:	f800283a 	ret

04000438 <_cleanup_r>:
 4000438:	01410034 	movhi	r5,1024
 400043c:	2948f304 	addi	r5,r5,9164
 4000440:	4000d501 	jmpi	4000d50 <_fwalk_reent>

04000444 <__sinit.part.1>:
 4000444:	defff704 	addi	sp,sp,-36
 4000448:	00c10034 	movhi	r3,1024
 400044c:	dfc00815 	stw	ra,32(sp)
 4000450:	ddc00715 	stw	r23,28(sp)
 4000454:	dd800615 	stw	r22,24(sp)
 4000458:	dd400515 	stw	r21,20(sp)
 400045c:	dd000415 	stw	r20,16(sp)
 4000460:	dcc00315 	stw	r19,12(sp)
 4000464:	dc800215 	stw	r18,8(sp)
 4000468:	dc400115 	stw	r17,4(sp)
 400046c:	dc000015 	stw	r16,0(sp)
 4000470:	18c10e04 	addi	r3,r3,1080
 4000474:	24000117 	ldw	r16,4(r4)
 4000478:	20c00f15 	stw	r3,60(r4)
 400047c:	2080bb04 	addi	r2,r4,748
 4000480:	00c000c4 	movi	r3,3
 4000484:	20c0b915 	stw	r3,740(r4)
 4000488:	2080ba15 	stw	r2,744(r4)
 400048c:	2000b815 	stw	zero,736(r4)
 4000490:	05c00204 	movi	r23,8
 4000494:	00800104 	movi	r2,4
 4000498:	2025883a 	mov	r18,r4
 400049c:	b80d883a 	mov	r6,r23
 40004a0:	81001704 	addi	r4,r16,92
 40004a4:	000b883a 	mov	r5,zero
 40004a8:	80000015 	stw	zero,0(r16)
 40004ac:	80000115 	stw	zero,4(r16)
 40004b0:	80000215 	stw	zero,8(r16)
 40004b4:	8080030d 	sth	r2,12(r16)
 40004b8:	80001915 	stw	zero,100(r16)
 40004bc:	8000038d 	sth	zero,14(r16)
 40004c0:	80000415 	stw	zero,16(r16)
 40004c4:	80000515 	stw	zero,20(r16)
 40004c8:	80000615 	stw	zero,24(r16)
 40004cc:	40019a80 	call	40019a8 <memset>
 40004d0:	05810034 	movhi	r22,1024
 40004d4:	94400217 	ldw	r17,8(r18)
 40004d8:	05410034 	movhi	r21,1024
 40004dc:	05010034 	movhi	r20,1024
 40004e0:	04c10034 	movhi	r19,1024
 40004e4:	b5882204 	addi	r22,r22,8328
 40004e8:	ad483904 	addi	r21,r21,8420
 40004ec:	a5085804 	addi	r20,r20,8544
 40004f0:	9cc86f04 	addi	r19,r19,8636
 40004f4:	85800815 	stw	r22,32(r16)
 40004f8:	85400915 	stw	r21,36(r16)
 40004fc:	85000a15 	stw	r20,40(r16)
 4000500:	84c00b15 	stw	r19,44(r16)
 4000504:	84000715 	stw	r16,28(r16)
 4000508:	00800284 	movi	r2,10
 400050c:	8880030d 	sth	r2,12(r17)
 4000510:	00800044 	movi	r2,1
 4000514:	b80d883a 	mov	r6,r23
 4000518:	89001704 	addi	r4,r17,92
 400051c:	000b883a 	mov	r5,zero
 4000520:	88000015 	stw	zero,0(r17)
 4000524:	88000115 	stw	zero,4(r17)
 4000528:	88000215 	stw	zero,8(r17)
 400052c:	88001915 	stw	zero,100(r17)
 4000530:	8880038d 	sth	r2,14(r17)
 4000534:	88000415 	stw	zero,16(r17)
 4000538:	88000515 	stw	zero,20(r17)
 400053c:	88000615 	stw	zero,24(r17)
 4000540:	40019a80 	call	40019a8 <memset>
 4000544:	94000317 	ldw	r16,12(r18)
 4000548:	00800484 	movi	r2,18
 400054c:	8c400715 	stw	r17,28(r17)
 4000550:	8d800815 	stw	r22,32(r17)
 4000554:	8d400915 	stw	r21,36(r17)
 4000558:	8d000a15 	stw	r20,40(r17)
 400055c:	8cc00b15 	stw	r19,44(r17)
 4000560:	8080030d 	sth	r2,12(r16)
 4000564:	00800084 	movi	r2,2
 4000568:	80000015 	stw	zero,0(r16)
 400056c:	80000115 	stw	zero,4(r16)
 4000570:	80000215 	stw	zero,8(r16)
 4000574:	80001915 	stw	zero,100(r16)
 4000578:	8080038d 	sth	r2,14(r16)
 400057c:	80000415 	stw	zero,16(r16)
 4000580:	80000515 	stw	zero,20(r16)
 4000584:	80000615 	stw	zero,24(r16)
 4000588:	b80d883a 	mov	r6,r23
 400058c:	000b883a 	mov	r5,zero
 4000590:	81001704 	addi	r4,r16,92
 4000594:	40019a80 	call	40019a8 <memset>
 4000598:	00800044 	movi	r2,1
 400059c:	84000715 	stw	r16,28(r16)
 40005a0:	85800815 	stw	r22,32(r16)
 40005a4:	85400915 	stw	r21,36(r16)
 40005a8:	85000a15 	stw	r20,40(r16)
 40005ac:	84c00b15 	stw	r19,44(r16)
 40005b0:	90800e15 	stw	r2,56(r18)
 40005b4:	dfc00817 	ldw	ra,32(sp)
 40005b8:	ddc00717 	ldw	r23,28(sp)
 40005bc:	dd800617 	ldw	r22,24(sp)
 40005c0:	dd400517 	ldw	r21,20(sp)
 40005c4:	dd000417 	ldw	r20,16(sp)
 40005c8:	dcc00317 	ldw	r19,12(sp)
 40005cc:	dc800217 	ldw	r18,8(sp)
 40005d0:	dc400117 	ldw	r17,4(sp)
 40005d4:	dc000017 	ldw	r16,0(sp)
 40005d8:	dec00904 	addi	sp,sp,36
 40005dc:	f800283a 	ret

040005e0 <__fp_lock>:
 40005e0:	0005883a 	mov	r2,zero
 40005e4:	f800283a 	ret

040005e8 <__sfmoreglue>:
 40005e8:	defffc04 	addi	sp,sp,-16
 40005ec:	dc400115 	stw	r17,4(sp)
 40005f0:	2c7fffc4 	addi	r17,r5,-1
 40005f4:	8c401a24 	muli	r17,r17,104
 40005f8:	dc800215 	stw	r18,8(sp)
 40005fc:	2825883a 	mov	r18,r5
 4000600:	89401d04 	addi	r5,r17,116
 4000604:	dc000015 	stw	r16,0(sp)
 4000608:	dfc00315 	stw	ra,12(sp)
 400060c:	4000e140 	call	4000e14 <_malloc_r>
 4000610:	1021883a 	mov	r16,r2
 4000614:	10000726 	beq	r2,zero,4000634 <__sfmoreglue+0x4c>
 4000618:	11000304 	addi	r4,r2,12
 400061c:	10000015 	stw	zero,0(r2)
 4000620:	14800115 	stw	r18,4(r2)
 4000624:	11000215 	stw	r4,8(r2)
 4000628:	89801a04 	addi	r6,r17,104
 400062c:	000b883a 	mov	r5,zero
 4000630:	40019a80 	call	40019a8 <memset>
 4000634:	8005883a 	mov	r2,r16
 4000638:	dfc00317 	ldw	ra,12(sp)
 400063c:	dc800217 	ldw	r18,8(sp)
 4000640:	dc400117 	ldw	r17,4(sp)
 4000644:	dc000017 	ldw	r16,0(sp)
 4000648:	dec00404 	addi	sp,sp,16
 400064c:	f800283a 	ret

04000650 <__sfp>:
 4000650:	defffb04 	addi	sp,sp,-20
 4000654:	dc000015 	stw	r16,0(sp)
 4000658:	04010034 	movhi	r16,1024
 400065c:	841cad04 	addi	r16,r16,29364
 4000660:	dcc00315 	stw	r19,12(sp)
 4000664:	2027883a 	mov	r19,r4
 4000668:	81000017 	ldw	r4,0(r16)
 400066c:	dfc00415 	stw	ra,16(sp)
 4000670:	dc800215 	stw	r18,8(sp)
 4000674:	20800e17 	ldw	r2,56(r4)
 4000678:	dc400115 	stw	r17,4(sp)
 400067c:	1000021e 	bne	r2,zero,4000688 <__sfp+0x38>
 4000680:	40004440 	call	4000444 <__sinit.part.1>
 4000684:	81000017 	ldw	r4,0(r16)
 4000688:	2480b804 	addi	r18,r4,736
 400068c:	047fffc4 	movi	r17,-1
 4000690:	91000117 	ldw	r4,4(r18)
 4000694:	94000217 	ldw	r16,8(r18)
 4000698:	213fffc4 	addi	r4,r4,-1
 400069c:	20000a16 	blt	r4,zero,40006c8 <__sfp+0x78>
 40006a0:	8080030f 	ldh	r2,12(r16)
 40006a4:	10000c26 	beq	r2,zero,40006d8 <__sfp+0x88>
 40006a8:	80c01d04 	addi	r3,r16,116
 40006ac:	00000206 	br	40006b8 <__sfp+0x68>
 40006b0:	18bfe60f 	ldh	r2,-104(r3)
 40006b4:	10000826 	beq	r2,zero,40006d8 <__sfp+0x88>
 40006b8:	213fffc4 	addi	r4,r4,-1
 40006bc:	1c3ffd04 	addi	r16,r3,-12
 40006c0:	18c01a04 	addi	r3,r3,104
 40006c4:	247ffa1e 	bne	r4,r17,40006b0 <__alt_mem_onchip_memory+0xfbff86b0>
 40006c8:	90800017 	ldw	r2,0(r18)
 40006cc:	10001d26 	beq	r2,zero,4000744 <__sfp+0xf4>
 40006d0:	1025883a 	mov	r18,r2
 40006d4:	003fee06 	br	4000690 <__alt_mem_onchip_memory+0xfbff8690>
 40006d8:	00bfffc4 	movi	r2,-1
 40006dc:	8080038d 	sth	r2,14(r16)
 40006e0:	00800044 	movi	r2,1
 40006e4:	8080030d 	sth	r2,12(r16)
 40006e8:	80001915 	stw	zero,100(r16)
 40006ec:	80000015 	stw	zero,0(r16)
 40006f0:	80000215 	stw	zero,8(r16)
 40006f4:	80000115 	stw	zero,4(r16)
 40006f8:	80000415 	stw	zero,16(r16)
 40006fc:	80000515 	stw	zero,20(r16)
 4000700:	80000615 	stw	zero,24(r16)
 4000704:	01800204 	movi	r6,8
 4000708:	000b883a 	mov	r5,zero
 400070c:	81001704 	addi	r4,r16,92
 4000710:	40019a80 	call	40019a8 <memset>
 4000714:	8005883a 	mov	r2,r16
 4000718:	80000c15 	stw	zero,48(r16)
 400071c:	80000d15 	stw	zero,52(r16)
 4000720:	80001115 	stw	zero,68(r16)
 4000724:	80001215 	stw	zero,72(r16)
 4000728:	dfc00417 	ldw	ra,16(sp)
 400072c:	dcc00317 	ldw	r19,12(sp)
 4000730:	dc800217 	ldw	r18,8(sp)
 4000734:	dc400117 	ldw	r17,4(sp)
 4000738:	dc000017 	ldw	r16,0(sp)
 400073c:	dec00504 	addi	sp,sp,20
 4000740:	f800283a 	ret
 4000744:	01400104 	movi	r5,4
 4000748:	9809883a 	mov	r4,r19
 400074c:	40005e80 	call	40005e8 <__sfmoreglue>
 4000750:	90800015 	stw	r2,0(r18)
 4000754:	103fde1e 	bne	r2,zero,40006d0 <__alt_mem_onchip_memory+0xfbff86d0>
 4000758:	00800304 	movi	r2,12
 400075c:	98800015 	stw	r2,0(r19)
 4000760:	0005883a 	mov	r2,zero
 4000764:	003ff006 	br	4000728 <__alt_mem_onchip_memory+0xfbff8728>

04000768 <_cleanup>:
 4000768:	00810034 	movhi	r2,1024
 400076c:	109cad04 	addi	r2,r2,29364
 4000770:	11000017 	ldw	r4,0(r2)
 4000774:	01410034 	movhi	r5,1024
 4000778:	2948f304 	addi	r5,r5,9164
 400077c:	4000d501 	jmpi	4000d50 <_fwalk_reent>

04000780 <__sinit>:
 4000780:	20800e17 	ldw	r2,56(r4)
 4000784:	10000126 	beq	r2,zero,400078c <__sinit+0xc>
 4000788:	f800283a 	ret
 400078c:	40004441 	jmpi	4000444 <__sinit.part.1>

04000790 <__sfp_lock_acquire>:
 4000790:	f800283a 	ret

04000794 <__sfp_lock_release>:
 4000794:	f800283a 	ret

04000798 <__sinit_lock_acquire>:
 4000798:	f800283a 	ret

0400079c <__sinit_lock_release>:
 400079c:	f800283a 	ret

040007a0 <__fp_lock_all>:
 40007a0:	00810034 	movhi	r2,1024
 40007a4:	109cae04 	addi	r2,r2,29368
 40007a8:	11000017 	ldw	r4,0(r2)
 40007ac:	01410034 	movhi	r5,1024
 40007b0:	29417804 	addi	r5,r5,1504
 40007b4:	4000c8c1 	jmpi	4000c8c <_fwalk>

040007b8 <__fp_unlock_all>:
 40007b8:	00810034 	movhi	r2,1024
 40007bc:	109cae04 	addi	r2,r2,29368
 40007c0:	11000017 	ldw	r4,0(r2)
 40007c4:	01410034 	movhi	r5,1024
 40007c8:	29410c04 	addi	r5,r5,1072
 40007cc:	4000c8c1 	jmpi	4000c8c <_fwalk>

040007d0 <__sfvwrite_r>:
 40007d0:	30800217 	ldw	r2,8(r6)
 40007d4:	10006726 	beq	r2,zero,4000974 <__sfvwrite_r+0x1a4>
 40007d8:	28c0030b 	ldhu	r3,12(r5)
 40007dc:	defff404 	addi	sp,sp,-48
 40007e0:	dd400715 	stw	r21,28(sp)
 40007e4:	dd000615 	stw	r20,24(sp)
 40007e8:	dc000215 	stw	r16,8(sp)
 40007ec:	dfc00b15 	stw	ra,44(sp)
 40007f0:	df000a15 	stw	fp,40(sp)
 40007f4:	ddc00915 	stw	r23,36(sp)
 40007f8:	dd800815 	stw	r22,32(sp)
 40007fc:	dcc00515 	stw	r19,20(sp)
 4000800:	dc800415 	stw	r18,16(sp)
 4000804:	dc400315 	stw	r17,12(sp)
 4000808:	1880020c 	andi	r2,r3,8
 400080c:	2821883a 	mov	r16,r5
 4000810:	202b883a 	mov	r21,r4
 4000814:	3029883a 	mov	r20,r6
 4000818:	10002726 	beq	r2,zero,40008b8 <__sfvwrite_r+0xe8>
 400081c:	28800417 	ldw	r2,16(r5)
 4000820:	10002526 	beq	r2,zero,40008b8 <__sfvwrite_r+0xe8>
 4000824:	1880008c 	andi	r2,r3,2
 4000828:	a4400017 	ldw	r17,0(r20)
 400082c:	10002a26 	beq	r2,zero,40008d8 <__sfvwrite_r+0x108>
 4000830:	05a00034 	movhi	r22,32768
 4000834:	0027883a 	mov	r19,zero
 4000838:	0025883a 	mov	r18,zero
 400083c:	b5bf0004 	addi	r22,r22,-1024
 4000840:	980d883a 	mov	r6,r19
 4000844:	a809883a 	mov	r4,r21
 4000848:	90004626 	beq	r18,zero,4000964 <__sfvwrite_r+0x194>
 400084c:	900f883a 	mov	r7,r18
 4000850:	b480022e 	bgeu	r22,r18,400085c <__sfvwrite_r+0x8c>
 4000854:	01e00034 	movhi	r7,32768
 4000858:	39ff0004 	addi	r7,r7,-1024
 400085c:	80800917 	ldw	r2,36(r16)
 4000860:	81400717 	ldw	r5,28(r16)
 4000864:	103ee83a 	callr	r2
 4000868:	0080570e 	bge	zero,r2,40009c8 <__sfvwrite_r+0x1f8>
 400086c:	a0c00217 	ldw	r3,8(r20)
 4000870:	98a7883a 	add	r19,r19,r2
 4000874:	90a5c83a 	sub	r18,r18,r2
 4000878:	1885c83a 	sub	r2,r3,r2
 400087c:	a0800215 	stw	r2,8(r20)
 4000880:	103fef1e 	bne	r2,zero,4000840 <__alt_mem_onchip_memory+0xfbff8840>
 4000884:	0005883a 	mov	r2,zero
 4000888:	dfc00b17 	ldw	ra,44(sp)
 400088c:	df000a17 	ldw	fp,40(sp)
 4000890:	ddc00917 	ldw	r23,36(sp)
 4000894:	dd800817 	ldw	r22,32(sp)
 4000898:	dd400717 	ldw	r21,28(sp)
 400089c:	dd000617 	ldw	r20,24(sp)
 40008a0:	dcc00517 	ldw	r19,20(sp)
 40008a4:	dc800417 	ldw	r18,16(sp)
 40008a8:	dc400317 	ldw	r17,12(sp)
 40008ac:	dc000217 	ldw	r16,8(sp)
 40008b0:	dec00c04 	addi	sp,sp,48
 40008b4:	f800283a 	ret
 40008b8:	800b883a 	mov	r5,r16
 40008bc:	a809883a 	mov	r4,r21
 40008c0:	40022240 	call	4002224 <__swsetup_r>
 40008c4:	1000eb1e 	bne	r2,zero,4000c74 <__sfvwrite_r+0x4a4>
 40008c8:	80c0030b 	ldhu	r3,12(r16)
 40008cc:	a4400017 	ldw	r17,0(r20)
 40008d0:	1880008c 	andi	r2,r3,2
 40008d4:	103fd61e 	bne	r2,zero,4000830 <__alt_mem_onchip_memory+0xfbff8830>
 40008d8:	1880004c 	andi	r2,r3,1
 40008dc:	10003f1e 	bne	r2,zero,40009dc <__sfvwrite_r+0x20c>
 40008e0:	0039883a 	mov	fp,zero
 40008e4:	0025883a 	mov	r18,zero
 40008e8:	90001a26 	beq	r18,zero,4000954 <__sfvwrite_r+0x184>
 40008ec:	1880800c 	andi	r2,r3,512
 40008f0:	84c00217 	ldw	r19,8(r16)
 40008f4:	10002126 	beq	r2,zero,400097c <__sfvwrite_r+0x1ac>
 40008f8:	982f883a 	mov	r23,r19
 40008fc:	94c09336 	bltu	r18,r19,4000b4c <__sfvwrite_r+0x37c>
 4000900:	1881200c 	andi	r2,r3,1152
 4000904:	10009e1e 	bne	r2,zero,4000b80 <__sfvwrite_r+0x3b0>
 4000908:	81000017 	ldw	r4,0(r16)
 400090c:	b80d883a 	mov	r6,r23
 4000910:	e00b883a 	mov	r5,fp
 4000914:	400184c0 	call	400184c <memmove>
 4000918:	80c00217 	ldw	r3,8(r16)
 400091c:	81000017 	ldw	r4,0(r16)
 4000920:	9005883a 	mov	r2,r18
 4000924:	1ce7c83a 	sub	r19,r3,r19
 4000928:	25cf883a 	add	r7,r4,r23
 400092c:	84c00215 	stw	r19,8(r16)
 4000930:	81c00015 	stw	r7,0(r16)
 4000934:	a0c00217 	ldw	r3,8(r20)
 4000938:	e0b9883a 	add	fp,fp,r2
 400093c:	90a5c83a 	sub	r18,r18,r2
 4000940:	18a7c83a 	sub	r19,r3,r2
 4000944:	a4c00215 	stw	r19,8(r20)
 4000948:	983fce26 	beq	r19,zero,4000884 <__alt_mem_onchip_memory+0xfbff8884>
 400094c:	80c0030b 	ldhu	r3,12(r16)
 4000950:	903fe61e 	bne	r18,zero,40008ec <__alt_mem_onchip_memory+0xfbff88ec>
 4000954:	8f000017 	ldw	fp,0(r17)
 4000958:	8c800117 	ldw	r18,4(r17)
 400095c:	8c400204 	addi	r17,r17,8
 4000960:	003fe106 	br	40008e8 <__alt_mem_onchip_memory+0xfbff88e8>
 4000964:	8cc00017 	ldw	r19,0(r17)
 4000968:	8c800117 	ldw	r18,4(r17)
 400096c:	8c400204 	addi	r17,r17,8
 4000970:	003fb306 	br	4000840 <__alt_mem_onchip_memory+0xfbff8840>
 4000974:	0005883a 	mov	r2,zero
 4000978:	f800283a 	ret
 400097c:	81000017 	ldw	r4,0(r16)
 4000980:	80800417 	ldw	r2,16(r16)
 4000984:	11005736 	bltu	r2,r4,4000ae4 <__sfvwrite_r+0x314>
 4000988:	85c00517 	ldw	r23,20(r16)
 400098c:	95c05536 	bltu	r18,r23,4000ae4 <__sfvwrite_r+0x314>
 4000990:	00a00034 	movhi	r2,32768
 4000994:	10bfffc4 	addi	r2,r2,-1
 4000998:	9009883a 	mov	r4,r18
 400099c:	1480012e 	bgeu	r2,r18,40009a4 <__sfvwrite_r+0x1d4>
 40009a0:	1009883a 	mov	r4,r2
 40009a4:	b80b883a 	mov	r5,r23
 40009a8:	4002ed80 	call	4002ed8 <__divsi3>
 40009ac:	15cf383a 	mul	r7,r2,r23
 40009b0:	81400717 	ldw	r5,28(r16)
 40009b4:	80800917 	ldw	r2,36(r16)
 40009b8:	e00d883a 	mov	r6,fp
 40009bc:	a809883a 	mov	r4,r21
 40009c0:	103ee83a 	callr	r2
 40009c4:	00bfdb16 	blt	zero,r2,4000934 <__alt_mem_onchip_memory+0xfbff8934>
 40009c8:	8080030b 	ldhu	r2,12(r16)
 40009cc:	10801014 	ori	r2,r2,64
 40009d0:	8080030d 	sth	r2,12(r16)
 40009d4:	00bfffc4 	movi	r2,-1
 40009d8:	003fab06 	br	4000888 <__alt_mem_onchip_memory+0xfbff8888>
 40009dc:	0027883a 	mov	r19,zero
 40009e0:	0011883a 	mov	r8,zero
 40009e4:	0039883a 	mov	fp,zero
 40009e8:	0025883a 	mov	r18,zero
 40009ec:	90001f26 	beq	r18,zero,4000a6c <__sfvwrite_r+0x29c>
 40009f0:	40005a26 	beq	r8,zero,4000b5c <__sfvwrite_r+0x38c>
 40009f4:	982d883a 	mov	r22,r19
 40009f8:	94c0012e 	bgeu	r18,r19,4000a00 <__sfvwrite_r+0x230>
 40009fc:	902d883a 	mov	r22,r18
 4000a00:	81000017 	ldw	r4,0(r16)
 4000a04:	80800417 	ldw	r2,16(r16)
 4000a08:	b02f883a 	mov	r23,r22
 4000a0c:	81c00517 	ldw	r7,20(r16)
 4000a10:	1100032e 	bgeu	r2,r4,4000a20 <__sfvwrite_r+0x250>
 4000a14:	80c00217 	ldw	r3,8(r16)
 4000a18:	38c7883a 	add	r3,r7,r3
 4000a1c:	1d801816 	blt	r3,r22,4000a80 <__sfvwrite_r+0x2b0>
 4000a20:	b1c03e16 	blt	r22,r7,4000b1c <__sfvwrite_r+0x34c>
 4000a24:	80800917 	ldw	r2,36(r16)
 4000a28:	81400717 	ldw	r5,28(r16)
 4000a2c:	e00d883a 	mov	r6,fp
 4000a30:	da000115 	stw	r8,4(sp)
 4000a34:	a809883a 	mov	r4,r21
 4000a38:	103ee83a 	callr	r2
 4000a3c:	102f883a 	mov	r23,r2
 4000a40:	da000117 	ldw	r8,4(sp)
 4000a44:	00bfe00e 	bge	zero,r2,40009c8 <__alt_mem_onchip_memory+0xfbff89c8>
 4000a48:	9de7c83a 	sub	r19,r19,r23
 4000a4c:	98001f26 	beq	r19,zero,4000acc <__sfvwrite_r+0x2fc>
 4000a50:	a0800217 	ldw	r2,8(r20)
 4000a54:	e5f9883a 	add	fp,fp,r23
 4000a58:	95e5c83a 	sub	r18,r18,r23
 4000a5c:	15efc83a 	sub	r23,r2,r23
 4000a60:	a5c00215 	stw	r23,8(r20)
 4000a64:	b83f8726 	beq	r23,zero,4000884 <__alt_mem_onchip_memory+0xfbff8884>
 4000a68:	903fe11e 	bne	r18,zero,40009f0 <__alt_mem_onchip_memory+0xfbff89f0>
 4000a6c:	8f000017 	ldw	fp,0(r17)
 4000a70:	8c800117 	ldw	r18,4(r17)
 4000a74:	0011883a 	mov	r8,zero
 4000a78:	8c400204 	addi	r17,r17,8
 4000a7c:	003fdb06 	br	40009ec <__alt_mem_onchip_memory+0xfbff89ec>
 4000a80:	180d883a 	mov	r6,r3
 4000a84:	e00b883a 	mov	r5,fp
 4000a88:	da000115 	stw	r8,4(sp)
 4000a8c:	d8c00015 	stw	r3,0(sp)
 4000a90:	400184c0 	call	400184c <memmove>
 4000a94:	d8c00017 	ldw	r3,0(sp)
 4000a98:	80800017 	ldw	r2,0(r16)
 4000a9c:	800b883a 	mov	r5,r16
 4000aa0:	a809883a 	mov	r4,r21
 4000aa4:	10c5883a 	add	r2,r2,r3
 4000aa8:	80800015 	stw	r2,0(r16)
 4000aac:	d8c00015 	stw	r3,0(sp)
 4000ab0:	40026ec0 	call	40026ec <_fflush_r>
 4000ab4:	d8c00017 	ldw	r3,0(sp)
 4000ab8:	da000117 	ldw	r8,4(sp)
 4000abc:	103fc21e 	bne	r2,zero,40009c8 <__alt_mem_onchip_memory+0xfbff89c8>
 4000ac0:	182f883a 	mov	r23,r3
 4000ac4:	9de7c83a 	sub	r19,r19,r23
 4000ac8:	983fe11e 	bne	r19,zero,4000a50 <__alt_mem_onchip_memory+0xfbff8a50>
 4000acc:	800b883a 	mov	r5,r16
 4000ad0:	a809883a 	mov	r4,r21
 4000ad4:	40026ec0 	call	40026ec <_fflush_r>
 4000ad8:	103fbb1e 	bne	r2,zero,40009c8 <__alt_mem_onchip_memory+0xfbff89c8>
 4000adc:	0011883a 	mov	r8,zero
 4000ae0:	003fdb06 	br	4000a50 <__alt_mem_onchip_memory+0xfbff8a50>
 4000ae4:	94c0012e 	bgeu	r18,r19,4000aec <__sfvwrite_r+0x31c>
 4000ae8:	9027883a 	mov	r19,r18
 4000aec:	980d883a 	mov	r6,r19
 4000af0:	e00b883a 	mov	r5,fp
 4000af4:	400184c0 	call	400184c <memmove>
 4000af8:	80800217 	ldw	r2,8(r16)
 4000afc:	80c00017 	ldw	r3,0(r16)
 4000b00:	14c5c83a 	sub	r2,r2,r19
 4000b04:	1cc7883a 	add	r3,r3,r19
 4000b08:	80800215 	stw	r2,8(r16)
 4000b0c:	80c00015 	stw	r3,0(r16)
 4000b10:	10004326 	beq	r2,zero,4000c20 <__sfvwrite_r+0x450>
 4000b14:	9805883a 	mov	r2,r19
 4000b18:	003f8606 	br	4000934 <__alt_mem_onchip_memory+0xfbff8934>
 4000b1c:	b00d883a 	mov	r6,r22
 4000b20:	e00b883a 	mov	r5,fp
 4000b24:	da000115 	stw	r8,4(sp)
 4000b28:	400184c0 	call	400184c <memmove>
 4000b2c:	80800217 	ldw	r2,8(r16)
 4000b30:	80c00017 	ldw	r3,0(r16)
 4000b34:	da000117 	ldw	r8,4(sp)
 4000b38:	1585c83a 	sub	r2,r2,r22
 4000b3c:	1dad883a 	add	r22,r3,r22
 4000b40:	80800215 	stw	r2,8(r16)
 4000b44:	85800015 	stw	r22,0(r16)
 4000b48:	003fbf06 	br	4000a48 <__alt_mem_onchip_memory+0xfbff8a48>
 4000b4c:	81000017 	ldw	r4,0(r16)
 4000b50:	9027883a 	mov	r19,r18
 4000b54:	902f883a 	mov	r23,r18
 4000b58:	003f6c06 	br	400090c <__alt_mem_onchip_memory+0xfbff890c>
 4000b5c:	900d883a 	mov	r6,r18
 4000b60:	01400284 	movi	r5,10
 4000b64:	e009883a 	mov	r4,fp
 4000b68:	40016200 	call	4001620 <memchr>
 4000b6c:	10003e26 	beq	r2,zero,4000c68 <__sfvwrite_r+0x498>
 4000b70:	10800044 	addi	r2,r2,1
 4000b74:	1727c83a 	sub	r19,r2,fp
 4000b78:	02000044 	movi	r8,1
 4000b7c:	003f9d06 	br	40009f4 <__alt_mem_onchip_memory+0xfbff89f4>
 4000b80:	80800517 	ldw	r2,20(r16)
 4000b84:	81400417 	ldw	r5,16(r16)
 4000b88:	81c00017 	ldw	r7,0(r16)
 4000b8c:	10a7883a 	add	r19,r2,r2
 4000b90:	9885883a 	add	r2,r19,r2
 4000b94:	1026d7fa 	srli	r19,r2,31
 4000b98:	396dc83a 	sub	r22,r7,r5
 4000b9c:	b1000044 	addi	r4,r22,1
 4000ba0:	9885883a 	add	r2,r19,r2
 4000ba4:	1027d07a 	srai	r19,r2,1
 4000ba8:	2485883a 	add	r2,r4,r18
 4000bac:	980d883a 	mov	r6,r19
 4000bb0:	9880022e 	bgeu	r19,r2,4000bbc <__sfvwrite_r+0x3ec>
 4000bb4:	1027883a 	mov	r19,r2
 4000bb8:	100d883a 	mov	r6,r2
 4000bbc:	18c1000c 	andi	r3,r3,1024
 4000bc0:	18001c26 	beq	r3,zero,4000c34 <__sfvwrite_r+0x464>
 4000bc4:	300b883a 	mov	r5,r6
 4000bc8:	a809883a 	mov	r4,r21
 4000bcc:	4000e140 	call	4000e14 <_malloc_r>
 4000bd0:	102f883a 	mov	r23,r2
 4000bd4:	10002926 	beq	r2,zero,4000c7c <__sfvwrite_r+0x4ac>
 4000bd8:	81400417 	ldw	r5,16(r16)
 4000bdc:	b00d883a 	mov	r6,r22
 4000be0:	1009883a 	mov	r4,r2
 4000be4:	40017040 	call	4001704 <memcpy>
 4000be8:	8080030b 	ldhu	r2,12(r16)
 4000bec:	00fedfc4 	movi	r3,-1153
 4000bf0:	10c4703a 	and	r2,r2,r3
 4000bf4:	10802014 	ori	r2,r2,128
 4000bf8:	8080030d 	sth	r2,12(r16)
 4000bfc:	bd89883a 	add	r4,r23,r22
 4000c00:	9d8fc83a 	sub	r7,r19,r22
 4000c04:	85c00415 	stw	r23,16(r16)
 4000c08:	84c00515 	stw	r19,20(r16)
 4000c0c:	81000015 	stw	r4,0(r16)
 4000c10:	9027883a 	mov	r19,r18
 4000c14:	81c00215 	stw	r7,8(r16)
 4000c18:	902f883a 	mov	r23,r18
 4000c1c:	003f3b06 	br	400090c <__alt_mem_onchip_memory+0xfbff890c>
 4000c20:	800b883a 	mov	r5,r16
 4000c24:	a809883a 	mov	r4,r21
 4000c28:	40026ec0 	call	40026ec <_fflush_r>
 4000c2c:	103fb926 	beq	r2,zero,4000b14 <__alt_mem_onchip_memory+0xfbff8b14>
 4000c30:	003f6506 	br	40009c8 <__alt_mem_onchip_memory+0xfbff89c8>
 4000c34:	a809883a 	mov	r4,r21
 4000c38:	4001ad00 	call	4001ad0 <_realloc_r>
 4000c3c:	102f883a 	mov	r23,r2
 4000c40:	103fee1e 	bne	r2,zero,4000bfc <__alt_mem_onchip_memory+0xfbff8bfc>
 4000c44:	81400417 	ldw	r5,16(r16)
 4000c48:	a809883a 	mov	r4,r21
 4000c4c:	400289c0 	call	400289c <_free_r>
 4000c50:	8080030b 	ldhu	r2,12(r16)
 4000c54:	00ffdfc4 	movi	r3,-129
 4000c58:	1884703a 	and	r2,r3,r2
 4000c5c:	00c00304 	movi	r3,12
 4000c60:	a8c00015 	stw	r3,0(r21)
 4000c64:	003f5906 	br	40009cc <__alt_mem_onchip_memory+0xfbff89cc>
 4000c68:	94c00044 	addi	r19,r18,1
 4000c6c:	02000044 	movi	r8,1
 4000c70:	003f6006 	br	40009f4 <__alt_mem_onchip_memory+0xfbff89f4>
 4000c74:	00bfffc4 	movi	r2,-1
 4000c78:	003f0306 	br	4000888 <__alt_mem_onchip_memory+0xfbff8888>
 4000c7c:	00800304 	movi	r2,12
 4000c80:	a8800015 	stw	r2,0(r21)
 4000c84:	8080030b 	ldhu	r2,12(r16)
 4000c88:	003f5006 	br	40009cc <__alt_mem_onchip_memory+0xfbff89cc>

04000c8c <_fwalk>:
 4000c8c:	defff704 	addi	sp,sp,-36
 4000c90:	dd000415 	stw	r20,16(sp)
 4000c94:	dfc00815 	stw	ra,32(sp)
 4000c98:	ddc00715 	stw	r23,28(sp)
 4000c9c:	dd800615 	stw	r22,24(sp)
 4000ca0:	dd400515 	stw	r21,20(sp)
 4000ca4:	dcc00315 	stw	r19,12(sp)
 4000ca8:	dc800215 	stw	r18,8(sp)
 4000cac:	dc400115 	stw	r17,4(sp)
 4000cb0:	dc000015 	stw	r16,0(sp)
 4000cb4:	2500b804 	addi	r20,r4,736
 4000cb8:	a0002326 	beq	r20,zero,4000d48 <_fwalk+0xbc>
 4000cbc:	282b883a 	mov	r21,r5
 4000cc0:	002f883a 	mov	r23,zero
 4000cc4:	05800044 	movi	r22,1
 4000cc8:	04ffffc4 	movi	r19,-1
 4000ccc:	a4400117 	ldw	r17,4(r20)
 4000cd0:	a4800217 	ldw	r18,8(r20)
 4000cd4:	8c7fffc4 	addi	r17,r17,-1
 4000cd8:	88000d16 	blt	r17,zero,4000d10 <_fwalk+0x84>
 4000cdc:	94000304 	addi	r16,r18,12
 4000ce0:	94800384 	addi	r18,r18,14
 4000ce4:	8080000b 	ldhu	r2,0(r16)
 4000ce8:	8c7fffc4 	addi	r17,r17,-1
 4000cec:	813ffd04 	addi	r4,r16,-12
 4000cf0:	b080042e 	bgeu	r22,r2,4000d04 <_fwalk+0x78>
 4000cf4:	9080000f 	ldh	r2,0(r18)
 4000cf8:	14c00226 	beq	r2,r19,4000d04 <_fwalk+0x78>
 4000cfc:	a83ee83a 	callr	r21
 4000d00:	b8aeb03a 	or	r23,r23,r2
 4000d04:	84001a04 	addi	r16,r16,104
 4000d08:	94801a04 	addi	r18,r18,104
 4000d0c:	8cfff51e 	bne	r17,r19,4000ce4 <__alt_mem_onchip_memory+0xfbff8ce4>
 4000d10:	a5000017 	ldw	r20,0(r20)
 4000d14:	a03fed1e 	bne	r20,zero,4000ccc <__alt_mem_onchip_memory+0xfbff8ccc>
 4000d18:	b805883a 	mov	r2,r23
 4000d1c:	dfc00817 	ldw	ra,32(sp)
 4000d20:	ddc00717 	ldw	r23,28(sp)
 4000d24:	dd800617 	ldw	r22,24(sp)
 4000d28:	dd400517 	ldw	r21,20(sp)
 4000d2c:	dd000417 	ldw	r20,16(sp)
 4000d30:	dcc00317 	ldw	r19,12(sp)
 4000d34:	dc800217 	ldw	r18,8(sp)
 4000d38:	dc400117 	ldw	r17,4(sp)
 4000d3c:	dc000017 	ldw	r16,0(sp)
 4000d40:	dec00904 	addi	sp,sp,36
 4000d44:	f800283a 	ret
 4000d48:	002f883a 	mov	r23,zero
 4000d4c:	003ff206 	br	4000d18 <__alt_mem_onchip_memory+0xfbff8d18>

04000d50 <_fwalk_reent>:
 4000d50:	defff704 	addi	sp,sp,-36
 4000d54:	dd000415 	stw	r20,16(sp)
 4000d58:	dfc00815 	stw	ra,32(sp)
 4000d5c:	ddc00715 	stw	r23,28(sp)
 4000d60:	dd800615 	stw	r22,24(sp)
 4000d64:	dd400515 	stw	r21,20(sp)
 4000d68:	dcc00315 	stw	r19,12(sp)
 4000d6c:	dc800215 	stw	r18,8(sp)
 4000d70:	dc400115 	stw	r17,4(sp)
 4000d74:	dc000015 	stw	r16,0(sp)
 4000d78:	2500b804 	addi	r20,r4,736
 4000d7c:	a0002326 	beq	r20,zero,4000e0c <_fwalk_reent+0xbc>
 4000d80:	282b883a 	mov	r21,r5
 4000d84:	2027883a 	mov	r19,r4
 4000d88:	002f883a 	mov	r23,zero
 4000d8c:	05800044 	movi	r22,1
 4000d90:	04bfffc4 	movi	r18,-1
 4000d94:	a4400117 	ldw	r17,4(r20)
 4000d98:	a4000217 	ldw	r16,8(r20)
 4000d9c:	8c7fffc4 	addi	r17,r17,-1
 4000da0:	88000c16 	blt	r17,zero,4000dd4 <_fwalk_reent+0x84>
 4000da4:	84000304 	addi	r16,r16,12
 4000da8:	8080000b 	ldhu	r2,0(r16)
 4000dac:	8c7fffc4 	addi	r17,r17,-1
 4000db0:	817ffd04 	addi	r5,r16,-12
 4000db4:	b080052e 	bgeu	r22,r2,4000dcc <_fwalk_reent+0x7c>
 4000db8:	8080008f 	ldh	r2,2(r16)
 4000dbc:	9809883a 	mov	r4,r19
 4000dc0:	14800226 	beq	r2,r18,4000dcc <_fwalk_reent+0x7c>
 4000dc4:	a83ee83a 	callr	r21
 4000dc8:	b8aeb03a 	or	r23,r23,r2
 4000dcc:	84001a04 	addi	r16,r16,104
 4000dd0:	8cbff51e 	bne	r17,r18,4000da8 <__alt_mem_onchip_memory+0xfbff8da8>
 4000dd4:	a5000017 	ldw	r20,0(r20)
 4000dd8:	a03fee1e 	bne	r20,zero,4000d94 <__alt_mem_onchip_memory+0xfbff8d94>
 4000ddc:	b805883a 	mov	r2,r23
 4000de0:	dfc00817 	ldw	ra,32(sp)
 4000de4:	ddc00717 	ldw	r23,28(sp)
 4000de8:	dd800617 	ldw	r22,24(sp)
 4000dec:	dd400517 	ldw	r21,20(sp)
 4000df0:	dd000417 	ldw	r20,16(sp)
 4000df4:	dcc00317 	ldw	r19,12(sp)
 4000df8:	dc800217 	ldw	r18,8(sp)
 4000dfc:	dc400117 	ldw	r17,4(sp)
 4000e00:	dc000017 	ldw	r16,0(sp)
 4000e04:	dec00904 	addi	sp,sp,36
 4000e08:	f800283a 	ret
 4000e0c:	002f883a 	mov	r23,zero
 4000e10:	003ff206 	br	4000ddc <__alt_mem_onchip_memory+0xfbff8ddc>

04000e14 <_malloc_r>:
 4000e14:	defff504 	addi	sp,sp,-44
 4000e18:	dc800315 	stw	r18,12(sp)
 4000e1c:	dfc00a15 	stw	ra,40(sp)
 4000e20:	df000915 	stw	fp,36(sp)
 4000e24:	ddc00815 	stw	r23,32(sp)
 4000e28:	dd800715 	stw	r22,28(sp)
 4000e2c:	dd400615 	stw	r21,24(sp)
 4000e30:	dd000515 	stw	r20,20(sp)
 4000e34:	dcc00415 	stw	r19,16(sp)
 4000e38:	dc400215 	stw	r17,8(sp)
 4000e3c:	dc000115 	stw	r16,4(sp)
 4000e40:	288002c4 	addi	r2,r5,11
 4000e44:	00c00584 	movi	r3,22
 4000e48:	2025883a 	mov	r18,r4
 4000e4c:	18807f2e 	bgeu	r3,r2,400104c <_malloc_r+0x238>
 4000e50:	047ffe04 	movi	r17,-8
 4000e54:	1462703a 	and	r17,r2,r17
 4000e58:	8800a316 	blt	r17,zero,40010e8 <_malloc_r+0x2d4>
 4000e5c:	8940a236 	bltu	r17,r5,40010e8 <_malloc_r+0x2d4>
 4000e60:	40036080 	call	4003608 <__malloc_lock>
 4000e64:	00807dc4 	movi	r2,503
 4000e68:	1441e92e 	bgeu	r2,r17,4001610 <_malloc_r+0x7fc>
 4000e6c:	8804d27a 	srli	r2,r17,9
 4000e70:	1000a126 	beq	r2,zero,40010f8 <_malloc_r+0x2e4>
 4000e74:	00c00104 	movi	r3,4
 4000e78:	18811e36 	bltu	r3,r2,40012f4 <_malloc_r+0x4e0>
 4000e7c:	8804d1ba 	srli	r2,r17,6
 4000e80:	12000e44 	addi	r8,r2,57
 4000e84:	11c00e04 	addi	r7,r2,56
 4000e88:	4209883a 	add	r4,r8,r8
 4000e8c:	04c10034 	movhi	r19,1024
 4000e90:	2109883a 	add	r4,r4,r4
 4000e94:	9cd72904 	addi	r19,r19,23716
 4000e98:	2109883a 	add	r4,r4,r4
 4000e9c:	9909883a 	add	r4,r19,r4
 4000ea0:	24000117 	ldw	r16,4(r4)
 4000ea4:	213ffe04 	addi	r4,r4,-8
 4000ea8:	24009726 	beq	r4,r16,4001108 <_malloc_r+0x2f4>
 4000eac:	80800117 	ldw	r2,4(r16)
 4000eb0:	01bfff04 	movi	r6,-4
 4000eb4:	014003c4 	movi	r5,15
 4000eb8:	1184703a 	and	r2,r2,r6
 4000ebc:	1447c83a 	sub	r3,r2,r17
 4000ec0:	28c00716 	blt	r5,r3,4000ee0 <_malloc_r+0xcc>
 4000ec4:	1800920e 	bge	r3,zero,4001110 <_malloc_r+0x2fc>
 4000ec8:	84000317 	ldw	r16,12(r16)
 4000ecc:	24008e26 	beq	r4,r16,4001108 <_malloc_r+0x2f4>
 4000ed0:	80800117 	ldw	r2,4(r16)
 4000ed4:	1184703a 	and	r2,r2,r6
 4000ed8:	1447c83a 	sub	r3,r2,r17
 4000edc:	28fff90e 	bge	r5,r3,4000ec4 <__alt_mem_onchip_memory+0xfbff8ec4>
 4000ee0:	3809883a 	mov	r4,r7
 4000ee4:	01810034 	movhi	r6,1024
 4000ee8:	9c000417 	ldw	r16,16(r19)
 4000eec:	31972904 	addi	r6,r6,23716
 4000ef0:	32000204 	addi	r8,r6,8
 4000ef4:	82013426 	beq	r16,r8,40013c8 <_malloc_r+0x5b4>
 4000ef8:	80c00117 	ldw	r3,4(r16)
 4000efc:	00bfff04 	movi	r2,-4
 4000f00:	188e703a 	and	r7,r3,r2
 4000f04:	3c45c83a 	sub	r2,r7,r17
 4000f08:	00c003c4 	movi	r3,15
 4000f0c:	18811f16 	blt	r3,r2,400138c <_malloc_r+0x578>
 4000f10:	32000515 	stw	r8,20(r6)
 4000f14:	32000415 	stw	r8,16(r6)
 4000f18:	10007f0e 	bge	r2,zero,4001118 <_malloc_r+0x304>
 4000f1c:	00807fc4 	movi	r2,511
 4000f20:	11c0fd36 	bltu	r2,r7,4001318 <_malloc_r+0x504>
 4000f24:	3806d0fa 	srli	r3,r7,3
 4000f28:	01c00044 	movi	r7,1
 4000f2c:	30800117 	ldw	r2,4(r6)
 4000f30:	19400044 	addi	r5,r3,1
 4000f34:	294b883a 	add	r5,r5,r5
 4000f38:	1807d0ba 	srai	r3,r3,2
 4000f3c:	294b883a 	add	r5,r5,r5
 4000f40:	294b883a 	add	r5,r5,r5
 4000f44:	298b883a 	add	r5,r5,r6
 4000f48:	38c6983a 	sll	r3,r7,r3
 4000f4c:	29c00017 	ldw	r7,0(r5)
 4000f50:	2a7ffe04 	addi	r9,r5,-8
 4000f54:	1886b03a 	or	r3,r3,r2
 4000f58:	82400315 	stw	r9,12(r16)
 4000f5c:	81c00215 	stw	r7,8(r16)
 4000f60:	30c00115 	stw	r3,4(r6)
 4000f64:	2c000015 	stw	r16,0(r5)
 4000f68:	3c000315 	stw	r16,12(r7)
 4000f6c:	2005d0ba 	srai	r2,r4,2
 4000f70:	01400044 	movi	r5,1
 4000f74:	288a983a 	sll	r5,r5,r2
 4000f78:	19406f36 	bltu	r3,r5,4001138 <_malloc_r+0x324>
 4000f7c:	28c4703a 	and	r2,r5,r3
 4000f80:	10000a1e 	bne	r2,zero,4000fac <_malloc_r+0x198>
 4000f84:	00bfff04 	movi	r2,-4
 4000f88:	294b883a 	add	r5,r5,r5
 4000f8c:	2088703a 	and	r4,r4,r2
 4000f90:	28c4703a 	and	r2,r5,r3
 4000f94:	21000104 	addi	r4,r4,4
 4000f98:	1000041e 	bne	r2,zero,4000fac <_malloc_r+0x198>
 4000f9c:	294b883a 	add	r5,r5,r5
 4000fa0:	28c4703a 	and	r2,r5,r3
 4000fa4:	21000104 	addi	r4,r4,4
 4000fa8:	103ffc26 	beq	r2,zero,4000f9c <__alt_mem_onchip_memory+0xfbff8f9c>
 4000fac:	02bfff04 	movi	r10,-4
 4000fb0:	024003c4 	movi	r9,15
 4000fb4:	21800044 	addi	r6,r4,1
 4000fb8:	318d883a 	add	r6,r6,r6
 4000fbc:	318d883a 	add	r6,r6,r6
 4000fc0:	318d883a 	add	r6,r6,r6
 4000fc4:	998d883a 	add	r6,r19,r6
 4000fc8:	333ffe04 	addi	r12,r6,-8
 4000fcc:	2017883a 	mov	r11,r4
 4000fd0:	31800104 	addi	r6,r6,4
 4000fd4:	34000017 	ldw	r16,0(r6)
 4000fd8:	31fffd04 	addi	r7,r6,-12
 4000fdc:	81c0041e 	bne	r16,r7,4000ff0 <_malloc_r+0x1dc>
 4000fe0:	0000fb06 	br	40013d0 <_malloc_r+0x5bc>
 4000fe4:	1801030e 	bge	r3,zero,40013f4 <_malloc_r+0x5e0>
 4000fe8:	84000317 	ldw	r16,12(r16)
 4000fec:	81c0f826 	beq	r16,r7,40013d0 <_malloc_r+0x5bc>
 4000ff0:	80800117 	ldw	r2,4(r16)
 4000ff4:	1284703a 	and	r2,r2,r10
 4000ff8:	1447c83a 	sub	r3,r2,r17
 4000ffc:	48fff90e 	bge	r9,r3,4000fe4 <__alt_mem_onchip_memory+0xfbff8fe4>
 4001000:	80800317 	ldw	r2,12(r16)
 4001004:	81000217 	ldw	r4,8(r16)
 4001008:	89400054 	ori	r5,r17,1
 400100c:	81400115 	stw	r5,4(r16)
 4001010:	20800315 	stw	r2,12(r4)
 4001014:	11000215 	stw	r4,8(r2)
 4001018:	8463883a 	add	r17,r16,r17
 400101c:	9c400515 	stw	r17,20(r19)
 4001020:	9c400415 	stw	r17,16(r19)
 4001024:	18800054 	ori	r2,r3,1
 4001028:	88800115 	stw	r2,4(r17)
 400102c:	8a000315 	stw	r8,12(r17)
 4001030:	8a000215 	stw	r8,8(r17)
 4001034:	88e3883a 	add	r17,r17,r3
 4001038:	88c00015 	stw	r3,0(r17)
 400103c:	9009883a 	mov	r4,r18
 4001040:	400362c0 	call	400362c <__malloc_unlock>
 4001044:	80800204 	addi	r2,r16,8
 4001048:	00001b06 	br	40010b8 <_malloc_r+0x2a4>
 400104c:	04400404 	movi	r17,16
 4001050:	89402536 	bltu	r17,r5,40010e8 <_malloc_r+0x2d4>
 4001054:	40036080 	call	4003608 <__malloc_lock>
 4001058:	00800184 	movi	r2,6
 400105c:	01000084 	movi	r4,2
 4001060:	04c10034 	movhi	r19,1024
 4001064:	1085883a 	add	r2,r2,r2
 4001068:	9cd72904 	addi	r19,r19,23716
 400106c:	1085883a 	add	r2,r2,r2
 4001070:	9885883a 	add	r2,r19,r2
 4001074:	14000117 	ldw	r16,4(r2)
 4001078:	10fffe04 	addi	r3,r2,-8
 400107c:	80c0d926 	beq	r16,r3,40013e4 <_malloc_r+0x5d0>
 4001080:	80c00117 	ldw	r3,4(r16)
 4001084:	81000317 	ldw	r4,12(r16)
 4001088:	00bfff04 	movi	r2,-4
 400108c:	1884703a 	and	r2,r3,r2
 4001090:	81400217 	ldw	r5,8(r16)
 4001094:	8085883a 	add	r2,r16,r2
 4001098:	10c00117 	ldw	r3,4(r2)
 400109c:	29000315 	stw	r4,12(r5)
 40010a0:	21400215 	stw	r5,8(r4)
 40010a4:	18c00054 	ori	r3,r3,1
 40010a8:	10c00115 	stw	r3,4(r2)
 40010ac:	9009883a 	mov	r4,r18
 40010b0:	400362c0 	call	400362c <__malloc_unlock>
 40010b4:	80800204 	addi	r2,r16,8
 40010b8:	dfc00a17 	ldw	ra,40(sp)
 40010bc:	df000917 	ldw	fp,36(sp)
 40010c0:	ddc00817 	ldw	r23,32(sp)
 40010c4:	dd800717 	ldw	r22,28(sp)
 40010c8:	dd400617 	ldw	r21,24(sp)
 40010cc:	dd000517 	ldw	r20,20(sp)
 40010d0:	dcc00417 	ldw	r19,16(sp)
 40010d4:	dc800317 	ldw	r18,12(sp)
 40010d8:	dc400217 	ldw	r17,8(sp)
 40010dc:	dc000117 	ldw	r16,4(sp)
 40010e0:	dec00b04 	addi	sp,sp,44
 40010e4:	f800283a 	ret
 40010e8:	00800304 	movi	r2,12
 40010ec:	90800015 	stw	r2,0(r18)
 40010f0:	0005883a 	mov	r2,zero
 40010f4:	003ff006 	br	40010b8 <__alt_mem_onchip_memory+0xfbff90b8>
 40010f8:	01002004 	movi	r4,128
 40010fc:	02001004 	movi	r8,64
 4001100:	01c00fc4 	movi	r7,63
 4001104:	003f6106 	br	4000e8c <__alt_mem_onchip_memory+0xfbff8e8c>
 4001108:	4009883a 	mov	r4,r8
 400110c:	003f7506 	br	4000ee4 <__alt_mem_onchip_memory+0xfbff8ee4>
 4001110:	81000317 	ldw	r4,12(r16)
 4001114:	003fde06 	br	4001090 <__alt_mem_onchip_memory+0xfbff9090>
 4001118:	81c5883a 	add	r2,r16,r7
 400111c:	11400117 	ldw	r5,4(r2)
 4001120:	9009883a 	mov	r4,r18
 4001124:	29400054 	ori	r5,r5,1
 4001128:	11400115 	stw	r5,4(r2)
 400112c:	400362c0 	call	400362c <__malloc_unlock>
 4001130:	80800204 	addi	r2,r16,8
 4001134:	003fe006 	br	40010b8 <__alt_mem_onchip_memory+0xfbff90b8>
 4001138:	9c000217 	ldw	r16,8(r19)
 400113c:	00bfff04 	movi	r2,-4
 4001140:	85800117 	ldw	r22,4(r16)
 4001144:	b0ac703a 	and	r22,r22,r2
 4001148:	b4400336 	bltu	r22,r17,4001158 <_malloc_r+0x344>
 400114c:	b445c83a 	sub	r2,r22,r17
 4001150:	00c003c4 	movi	r3,15
 4001154:	18805d16 	blt	r3,r2,40012cc <_malloc_r+0x4b8>
 4001158:	05c10034 	movhi	r23,1024
 400115c:	00810074 	movhi	r2,1025
 4001160:	10a35804 	addi	r2,r2,-29344
 4001164:	bddcaf04 	addi	r23,r23,29372
 4001168:	15400017 	ldw	r21,0(r2)
 400116c:	b8c00017 	ldw	r3,0(r23)
 4001170:	00bfffc4 	movi	r2,-1
 4001174:	858d883a 	add	r6,r16,r22
 4001178:	8d6b883a 	add	r21,r17,r21
 400117c:	1880ea26 	beq	r3,r2,4001528 <_malloc_r+0x714>
 4001180:	ad4403c4 	addi	r21,r21,4111
 4001184:	00bc0004 	movi	r2,-4096
 4001188:	a8aa703a 	and	r21,r21,r2
 400118c:	a80b883a 	mov	r5,r21
 4001190:	9009883a 	mov	r4,r18
 4001194:	d9800015 	stw	r6,0(sp)
 4001198:	40020340 	call	4002034 <_sbrk_r>
 400119c:	1029883a 	mov	r20,r2
 40011a0:	00bfffc4 	movi	r2,-1
 40011a4:	d9800017 	ldw	r6,0(sp)
 40011a8:	a080e826 	beq	r20,r2,400154c <_malloc_r+0x738>
 40011ac:	a180a636 	bltu	r20,r6,4001448 <_malloc_r+0x634>
 40011b0:	07010074 	movhi	fp,1025
 40011b4:	e7236104 	addi	fp,fp,-29308
 40011b8:	e0800017 	ldw	r2,0(fp)
 40011bc:	a887883a 	add	r3,r21,r2
 40011c0:	e0c00015 	stw	r3,0(fp)
 40011c4:	3500e626 	beq	r6,r20,4001560 <_malloc_r+0x74c>
 40011c8:	b9000017 	ldw	r4,0(r23)
 40011cc:	00bfffc4 	movi	r2,-1
 40011d0:	2080ee26 	beq	r4,r2,400158c <_malloc_r+0x778>
 40011d4:	a185c83a 	sub	r2,r20,r6
 40011d8:	10c5883a 	add	r2,r2,r3
 40011dc:	e0800015 	stw	r2,0(fp)
 40011e0:	a0c001cc 	andi	r3,r20,7
 40011e4:	1800bc26 	beq	r3,zero,40014d8 <_malloc_r+0x6c4>
 40011e8:	a0e9c83a 	sub	r20,r20,r3
 40011ec:	00840204 	movi	r2,4104
 40011f0:	a5000204 	addi	r20,r20,8
 40011f4:	10c7c83a 	sub	r3,r2,r3
 40011f8:	a545883a 	add	r2,r20,r21
 40011fc:	1083ffcc 	andi	r2,r2,4095
 4001200:	18abc83a 	sub	r21,r3,r2
 4001204:	a80b883a 	mov	r5,r21
 4001208:	9009883a 	mov	r4,r18
 400120c:	40020340 	call	4002034 <_sbrk_r>
 4001210:	00ffffc4 	movi	r3,-1
 4001214:	10c0e126 	beq	r2,r3,400159c <_malloc_r+0x788>
 4001218:	1505c83a 	sub	r2,r2,r20
 400121c:	1545883a 	add	r2,r2,r21
 4001220:	10800054 	ori	r2,r2,1
 4001224:	e0c00017 	ldw	r3,0(fp)
 4001228:	9d000215 	stw	r20,8(r19)
 400122c:	a0800115 	stw	r2,4(r20)
 4001230:	a8c7883a 	add	r3,r21,r3
 4001234:	e0c00015 	stw	r3,0(fp)
 4001238:	84c00e26 	beq	r16,r19,4001274 <_malloc_r+0x460>
 400123c:	018003c4 	movi	r6,15
 4001240:	3580a72e 	bgeu	r6,r22,40014e0 <_malloc_r+0x6cc>
 4001244:	81400117 	ldw	r5,4(r16)
 4001248:	013ffe04 	movi	r4,-8
 400124c:	b0bffd04 	addi	r2,r22,-12
 4001250:	1104703a 	and	r2,r2,r4
 4001254:	2900004c 	andi	r4,r5,1
 4001258:	2088b03a 	or	r4,r4,r2
 400125c:	81000115 	stw	r4,4(r16)
 4001260:	01400144 	movi	r5,5
 4001264:	8089883a 	add	r4,r16,r2
 4001268:	21400115 	stw	r5,4(r4)
 400126c:	21400215 	stw	r5,8(r4)
 4001270:	3080cd36 	bltu	r6,r2,40015a8 <_malloc_r+0x794>
 4001274:	00810074 	movhi	r2,1025
 4001278:	10a35704 	addi	r2,r2,-29348
 400127c:	11000017 	ldw	r4,0(r2)
 4001280:	20c0012e 	bgeu	r4,r3,4001288 <_malloc_r+0x474>
 4001284:	10c00015 	stw	r3,0(r2)
 4001288:	00810074 	movhi	r2,1025
 400128c:	10a35604 	addi	r2,r2,-29352
 4001290:	11000017 	ldw	r4,0(r2)
 4001294:	9c000217 	ldw	r16,8(r19)
 4001298:	20c0012e 	bgeu	r4,r3,40012a0 <_malloc_r+0x48c>
 400129c:	10c00015 	stw	r3,0(r2)
 40012a0:	80c00117 	ldw	r3,4(r16)
 40012a4:	00bfff04 	movi	r2,-4
 40012a8:	1886703a 	and	r3,r3,r2
 40012ac:	1c45c83a 	sub	r2,r3,r17
 40012b0:	1c400236 	bltu	r3,r17,40012bc <_malloc_r+0x4a8>
 40012b4:	00c003c4 	movi	r3,15
 40012b8:	18800416 	blt	r3,r2,40012cc <_malloc_r+0x4b8>
 40012bc:	9009883a 	mov	r4,r18
 40012c0:	400362c0 	call	400362c <__malloc_unlock>
 40012c4:	0005883a 	mov	r2,zero
 40012c8:	003f7b06 	br	40010b8 <__alt_mem_onchip_memory+0xfbff90b8>
 40012cc:	88c00054 	ori	r3,r17,1
 40012d0:	80c00115 	stw	r3,4(r16)
 40012d4:	8463883a 	add	r17,r16,r17
 40012d8:	10800054 	ori	r2,r2,1
 40012dc:	9c400215 	stw	r17,8(r19)
 40012e0:	88800115 	stw	r2,4(r17)
 40012e4:	9009883a 	mov	r4,r18
 40012e8:	400362c0 	call	400362c <__malloc_unlock>
 40012ec:	80800204 	addi	r2,r16,8
 40012f0:	003f7106 	br	40010b8 <__alt_mem_onchip_memory+0xfbff90b8>
 40012f4:	00c00504 	movi	r3,20
 40012f8:	18804a2e 	bgeu	r3,r2,4001424 <_malloc_r+0x610>
 40012fc:	00c01504 	movi	r3,84
 4001300:	18806e36 	bltu	r3,r2,40014bc <_malloc_r+0x6a8>
 4001304:	8804d33a 	srli	r2,r17,12
 4001308:	12001bc4 	addi	r8,r2,111
 400130c:	11c01b84 	addi	r7,r2,110
 4001310:	4209883a 	add	r4,r8,r8
 4001314:	003edd06 	br	4000e8c <__alt_mem_onchip_memory+0xfbff8e8c>
 4001318:	3804d27a 	srli	r2,r7,9
 400131c:	00c00104 	movi	r3,4
 4001320:	1880442e 	bgeu	r3,r2,4001434 <_malloc_r+0x620>
 4001324:	00c00504 	movi	r3,20
 4001328:	18808136 	bltu	r3,r2,4001530 <_malloc_r+0x71c>
 400132c:	11401704 	addi	r5,r2,92
 4001330:	10c016c4 	addi	r3,r2,91
 4001334:	294b883a 	add	r5,r5,r5
 4001338:	294b883a 	add	r5,r5,r5
 400133c:	294b883a 	add	r5,r5,r5
 4001340:	994b883a 	add	r5,r19,r5
 4001344:	28800017 	ldw	r2,0(r5)
 4001348:	01810034 	movhi	r6,1024
 400134c:	297ffe04 	addi	r5,r5,-8
 4001350:	31972904 	addi	r6,r6,23716
 4001354:	28806526 	beq	r5,r2,40014ec <_malloc_r+0x6d8>
 4001358:	01bfff04 	movi	r6,-4
 400135c:	10c00117 	ldw	r3,4(r2)
 4001360:	1986703a 	and	r3,r3,r6
 4001364:	38c0022e 	bgeu	r7,r3,4001370 <_malloc_r+0x55c>
 4001368:	10800217 	ldw	r2,8(r2)
 400136c:	28bffb1e 	bne	r5,r2,400135c <__alt_mem_onchip_memory+0xfbff935c>
 4001370:	11400317 	ldw	r5,12(r2)
 4001374:	98c00117 	ldw	r3,4(r19)
 4001378:	81400315 	stw	r5,12(r16)
 400137c:	80800215 	stw	r2,8(r16)
 4001380:	2c000215 	stw	r16,8(r5)
 4001384:	14000315 	stw	r16,12(r2)
 4001388:	003ef806 	br	4000f6c <__alt_mem_onchip_memory+0xfbff8f6c>
 400138c:	88c00054 	ori	r3,r17,1
 4001390:	80c00115 	stw	r3,4(r16)
 4001394:	8463883a 	add	r17,r16,r17
 4001398:	34400515 	stw	r17,20(r6)
 400139c:	34400415 	stw	r17,16(r6)
 40013a0:	10c00054 	ori	r3,r2,1
 40013a4:	8a000315 	stw	r8,12(r17)
 40013a8:	8a000215 	stw	r8,8(r17)
 40013ac:	88c00115 	stw	r3,4(r17)
 40013b0:	88a3883a 	add	r17,r17,r2
 40013b4:	88800015 	stw	r2,0(r17)
 40013b8:	9009883a 	mov	r4,r18
 40013bc:	400362c0 	call	400362c <__malloc_unlock>
 40013c0:	80800204 	addi	r2,r16,8
 40013c4:	003f3c06 	br	40010b8 <__alt_mem_onchip_memory+0xfbff90b8>
 40013c8:	30c00117 	ldw	r3,4(r6)
 40013cc:	003ee706 	br	4000f6c <__alt_mem_onchip_memory+0xfbff8f6c>
 40013d0:	5ac00044 	addi	r11,r11,1
 40013d4:	588000cc 	andi	r2,r11,3
 40013d8:	31800204 	addi	r6,r6,8
 40013dc:	103efd1e 	bne	r2,zero,4000fd4 <__alt_mem_onchip_memory+0xfbff8fd4>
 40013e0:	00002406 	br	4001474 <_malloc_r+0x660>
 40013e4:	14000317 	ldw	r16,12(r2)
 40013e8:	143f251e 	bne	r2,r16,4001080 <__alt_mem_onchip_memory+0xfbff9080>
 40013ec:	21000084 	addi	r4,r4,2
 40013f0:	003ebc06 	br	4000ee4 <__alt_mem_onchip_memory+0xfbff8ee4>
 40013f4:	8085883a 	add	r2,r16,r2
 40013f8:	10c00117 	ldw	r3,4(r2)
 40013fc:	81000317 	ldw	r4,12(r16)
 4001400:	81400217 	ldw	r5,8(r16)
 4001404:	18c00054 	ori	r3,r3,1
 4001408:	10c00115 	stw	r3,4(r2)
 400140c:	29000315 	stw	r4,12(r5)
 4001410:	21400215 	stw	r5,8(r4)
 4001414:	9009883a 	mov	r4,r18
 4001418:	400362c0 	call	400362c <__malloc_unlock>
 400141c:	80800204 	addi	r2,r16,8
 4001420:	003f2506 	br	40010b8 <__alt_mem_onchip_memory+0xfbff90b8>
 4001424:	12001704 	addi	r8,r2,92
 4001428:	11c016c4 	addi	r7,r2,91
 400142c:	4209883a 	add	r4,r8,r8
 4001430:	003e9606 	br	4000e8c <__alt_mem_onchip_memory+0xfbff8e8c>
 4001434:	3804d1ba 	srli	r2,r7,6
 4001438:	11400e44 	addi	r5,r2,57
 400143c:	10c00e04 	addi	r3,r2,56
 4001440:	294b883a 	add	r5,r5,r5
 4001444:	003fbc06 	br	4001338 <__alt_mem_onchip_memory+0xfbff9338>
 4001448:	84ff5926 	beq	r16,r19,40011b0 <__alt_mem_onchip_memory+0xfbff91b0>
 400144c:	00810034 	movhi	r2,1024
 4001450:	10972904 	addi	r2,r2,23716
 4001454:	14000217 	ldw	r16,8(r2)
 4001458:	00bfff04 	movi	r2,-4
 400145c:	80c00117 	ldw	r3,4(r16)
 4001460:	1886703a 	and	r3,r3,r2
 4001464:	003f9106 	br	40012ac <__alt_mem_onchip_memory+0xfbff92ac>
 4001468:	60800217 	ldw	r2,8(r12)
 400146c:	213fffc4 	addi	r4,r4,-1
 4001470:	1300651e 	bne	r2,r12,4001608 <_malloc_r+0x7f4>
 4001474:	208000cc 	andi	r2,r4,3
 4001478:	633ffe04 	addi	r12,r12,-8
 400147c:	103ffa1e 	bne	r2,zero,4001468 <__alt_mem_onchip_memory+0xfbff9468>
 4001480:	98800117 	ldw	r2,4(r19)
 4001484:	0146303a 	nor	r3,zero,r5
 4001488:	1884703a 	and	r2,r3,r2
 400148c:	98800115 	stw	r2,4(r19)
 4001490:	294b883a 	add	r5,r5,r5
 4001494:	117f2836 	bltu	r2,r5,4001138 <__alt_mem_onchip_memory+0xfbff9138>
 4001498:	283f2726 	beq	r5,zero,4001138 <__alt_mem_onchip_memory+0xfbff9138>
 400149c:	2886703a 	and	r3,r5,r2
 40014a0:	5809883a 	mov	r4,r11
 40014a4:	183ec31e 	bne	r3,zero,4000fb4 <__alt_mem_onchip_memory+0xfbff8fb4>
 40014a8:	294b883a 	add	r5,r5,r5
 40014ac:	2886703a 	and	r3,r5,r2
 40014b0:	21000104 	addi	r4,r4,4
 40014b4:	183ffc26 	beq	r3,zero,40014a8 <__alt_mem_onchip_memory+0xfbff94a8>
 40014b8:	003ebe06 	br	4000fb4 <__alt_mem_onchip_memory+0xfbff8fb4>
 40014bc:	00c05504 	movi	r3,340
 40014c0:	18801236 	bltu	r3,r2,400150c <_malloc_r+0x6f8>
 40014c4:	8804d3fa 	srli	r2,r17,15
 40014c8:	12001e04 	addi	r8,r2,120
 40014cc:	11c01dc4 	addi	r7,r2,119
 40014d0:	4209883a 	add	r4,r8,r8
 40014d4:	003e6d06 	br	4000e8c <__alt_mem_onchip_memory+0xfbff8e8c>
 40014d8:	00c40004 	movi	r3,4096
 40014dc:	003f4606 	br	40011f8 <__alt_mem_onchip_memory+0xfbff91f8>
 40014e0:	00800044 	movi	r2,1
 40014e4:	a0800115 	stw	r2,4(r20)
 40014e8:	003f7406 	br	40012bc <__alt_mem_onchip_memory+0xfbff92bc>
 40014ec:	1805d0ba 	srai	r2,r3,2
 40014f0:	01c00044 	movi	r7,1
 40014f4:	30c00117 	ldw	r3,4(r6)
 40014f8:	388e983a 	sll	r7,r7,r2
 40014fc:	2805883a 	mov	r2,r5
 4001500:	38c6b03a 	or	r3,r7,r3
 4001504:	30c00115 	stw	r3,4(r6)
 4001508:	003f9b06 	br	4001378 <__alt_mem_onchip_memory+0xfbff9378>
 400150c:	00c15504 	movi	r3,1364
 4001510:	18801a36 	bltu	r3,r2,400157c <_malloc_r+0x768>
 4001514:	8804d4ba 	srli	r2,r17,18
 4001518:	12001f44 	addi	r8,r2,125
 400151c:	11c01f04 	addi	r7,r2,124
 4001520:	4209883a 	add	r4,r8,r8
 4001524:	003e5906 	br	4000e8c <__alt_mem_onchip_memory+0xfbff8e8c>
 4001528:	ad400404 	addi	r21,r21,16
 400152c:	003f1706 	br	400118c <__alt_mem_onchip_memory+0xfbff918c>
 4001530:	00c01504 	movi	r3,84
 4001534:	18802336 	bltu	r3,r2,40015c4 <_malloc_r+0x7b0>
 4001538:	3804d33a 	srli	r2,r7,12
 400153c:	11401bc4 	addi	r5,r2,111
 4001540:	10c01b84 	addi	r3,r2,110
 4001544:	294b883a 	add	r5,r5,r5
 4001548:	003f7b06 	br	4001338 <__alt_mem_onchip_memory+0xfbff9338>
 400154c:	9c000217 	ldw	r16,8(r19)
 4001550:	00bfff04 	movi	r2,-4
 4001554:	80c00117 	ldw	r3,4(r16)
 4001558:	1886703a 	and	r3,r3,r2
 400155c:	003f5306 	br	40012ac <__alt_mem_onchip_memory+0xfbff92ac>
 4001560:	3083ffcc 	andi	r2,r6,4095
 4001564:	103f181e 	bne	r2,zero,40011c8 <__alt_mem_onchip_memory+0xfbff91c8>
 4001568:	99000217 	ldw	r4,8(r19)
 400156c:	b545883a 	add	r2,r22,r21
 4001570:	10800054 	ori	r2,r2,1
 4001574:	20800115 	stw	r2,4(r4)
 4001578:	003f3e06 	br	4001274 <__alt_mem_onchip_memory+0xfbff9274>
 400157c:	01003f84 	movi	r4,254
 4001580:	02001fc4 	movi	r8,127
 4001584:	01c01f84 	movi	r7,126
 4001588:	003e4006 	br	4000e8c <__alt_mem_onchip_memory+0xfbff8e8c>
 400158c:	00810034 	movhi	r2,1024
 4001590:	109caf04 	addi	r2,r2,29372
 4001594:	15000015 	stw	r20,0(r2)
 4001598:	003f1106 	br	40011e0 <__alt_mem_onchip_memory+0xfbff91e0>
 400159c:	00800044 	movi	r2,1
 40015a0:	002b883a 	mov	r21,zero
 40015a4:	003f1f06 	br	4001224 <__alt_mem_onchip_memory+0xfbff9224>
 40015a8:	81400204 	addi	r5,r16,8
 40015ac:	9009883a 	mov	r4,r18
 40015b0:	400289c0 	call	400289c <_free_r>
 40015b4:	00810074 	movhi	r2,1025
 40015b8:	10a36104 	addi	r2,r2,-29308
 40015bc:	10c00017 	ldw	r3,0(r2)
 40015c0:	003f2c06 	br	4001274 <__alt_mem_onchip_memory+0xfbff9274>
 40015c4:	00c05504 	movi	r3,340
 40015c8:	18800536 	bltu	r3,r2,40015e0 <_malloc_r+0x7cc>
 40015cc:	3804d3fa 	srli	r2,r7,15
 40015d0:	11401e04 	addi	r5,r2,120
 40015d4:	10c01dc4 	addi	r3,r2,119
 40015d8:	294b883a 	add	r5,r5,r5
 40015dc:	003f5606 	br	4001338 <__alt_mem_onchip_memory+0xfbff9338>
 40015e0:	00c15504 	movi	r3,1364
 40015e4:	18800536 	bltu	r3,r2,40015fc <_malloc_r+0x7e8>
 40015e8:	3804d4ba 	srli	r2,r7,18
 40015ec:	11401f44 	addi	r5,r2,125
 40015f0:	10c01f04 	addi	r3,r2,124
 40015f4:	294b883a 	add	r5,r5,r5
 40015f8:	003f4f06 	br	4001338 <__alt_mem_onchip_memory+0xfbff9338>
 40015fc:	01403f84 	movi	r5,254
 4001600:	00c01f84 	movi	r3,126
 4001604:	003f4c06 	br	4001338 <__alt_mem_onchip_memory+0xfbff9338>
 4001608:	98800117 	ldw	r2,4(r19)
 400160c:	003fa006 	br	4001490 <__alt_mem_onchip_memory+0xfbff9490>
 4001610:	8808d0fa 	srli	r4,r17,3
 4001614:	20800044 	addi	r2,r4,1
 4001618:	1085883a 	add	r2,r2,r2
 400161c:	003e9006 	br	4001060 <__alt_mem_onchip_memory+0xfbff9060>

04001620 <memchr>:
 4001620:	208000cc 	andi	r2,r4,3
 4001624:	280f883a 	mov	r7,r5
 4001628:	10003426 	beq	r2,zero,40016fc <memchr+0xdc>
 400162c:	30bfffc4 	addi	r2,r6,-1
 4001630:	30001a26 	beq	r6,zero,400169c <memchr+0x7c>
 4001634:	20c00003 	ldbu	r3,0(r4)
 4001638:	29803fcc 	andi	r6,r5,255
 400163c:	30c0051e 	bne	r6,r3,4001654 <memchr+0x34>
 4001640:	00001806 	br	40016a4 <memchr+0x84>
 4001644:	10001526 	beq	r2,zero,400169c <memchr+0x7c>
 4001648:	20c00003 	ldbu	r3,0(r4)
 400164c:	10bfffc4 	addi	r2,r2,-1
 4001650:	30c01426 	beq	r6,r3,40016a4 <memchr+0x84>
 4001654:	21000044 	addi	r4,r4,1
 4001658:	20c000cc 	andi	r3,r4,3
 400165c:	183ff91e 	bne	r3,zero,4001644 <__alt_mem_onchip_memory+0xfbff9644>
 4001660:	020000c4 	movi	r8,3
 4001664:	40801136 	bltu	r8,r2,40016ac <memchr+0x8c>
 4001668:	10000c26 	beq	r2,zero,400169c <memchr+0x7c>
 400166c:	20c00003 	ldbu	r3,0(r4)
 4001670:	29403fcc 	andi	r5,r5,255
 4001674:	28c00b26 	beq	r5,r3,40016a4 <memchr+0x84>
 4001678:	20c00044 	addi	r3,r4,1
 400167c:	39803fcc 	andi	r6,r7,255
 4001680:	2089883a 	add	r4,r4,r2
 4001684:	00000306 	br	4001694 <memchr+0x74>
 4001688:	18c00044 	addi	r3,r3,1
 400168c:	197fffc3 	ldbu	r5,-1(r3)
 4001690:	31400526 	beq	r6,r5,40016a8 <memchr+0x88>
 4001694:	1805883a 	mov	r2,r3
 4001698:	20fffb1e 	bne	r4,r3,4001688 <__alt_mem_onchip_memory+0xfbff9688>
 400169c:	0005883a 	mov	r2,zero
 40016a0:	f800283a 	ret
 40016a4:	2005883a 	mov	r2,r4
 40016a8:	f800283a 	ret
 40016ac:	28c03fcc 	andi	r3,r5,255
 40016b0:	1812923a 	slli	r9,r3,8
 40016b4:	02ffbff4 	movhi	r11,65279
 40016b8:	02a02074 	movhi	r10,32897
 40016bc:	48d2b03a 	or	r9,r9,r3
 40016c0:	4806943a 	slli	r3,r9,16
 40016c4:	5affbfc4 	addi	r11,r11,-257
 40016c8:	52a02004 	addi	r10,r10,-32640
 40016cc:	48d2b03a 	or	r9,r9,r3
 40016d0:	20c00017 	ldw	r3,0(r4)
 40016d4:	48c6f03a 	xor	r3,r9,r3
 40016d8:	1acd883a 	add	r6,r3,r11
 40016dc:	00c6303a 	nor	r3,zero,r3
 40016e0:	30c6703a 	and	r3,r6,r3
 40016e4:	1a86703a 	and	r3,r3,r10
 40016e8:	183fe01e 	bne	r3,zero,400166c <__alt_mem_onchip_memory+0xfbff966c>
 40016ec:	10bfff04 	addi	r2,r2,-4
 40016f0:	21000104 	addi	r4,r4,4
 40016f4:	40bff636 	bltu	r8,r2,40016d0 <__alt_mem_onchip_memory+0xfbff96d0>
 40016f8:	003fdb06 	br	4001668 <__alt_mem_onchip_memory+0xfbff9668>
 40016fc:	3005883a 	mov	r2,r6
 4001700:	003fd706 	br	4001660 <__alt_mem_onchip_memory+0xfbff9660>

04001704 <memcpy>:
 4001704:	defffd04 	addi	sp,sp,-12
 4001708:	dfc00215 	stw	ra,8(sp)
 400170c:	dc400115 	stw	r17,4(sp)
 4001710:	dc000015 	stw	r16,0(sp)
 4001714:	00c003c4 	movi	r3,15
 4001718:	2005883a 	mov	r2,r4
 400171c:	1980452e 	bgeu	r3,r6,4001834 <memcpy+0x130>
 4001720:	2906b03a 	or	r3,r5,r4
 4001724:	18c000cc 	andi	r3,r3,3
 4001728:	1800441e 	bne	r3,zero,400183c <memcpy+0x138>
 400172c:	347ffc04 	addi	r17,r6,-16
 4001730:	8822d13a 	srli	r17,r17,4
 4001734:	28c00104 	addi	r3,r5,4
 4001738:	23400104 	addi	r13,r4,4
 400173c:	8820913a 	slli	r16,r17,4
 4001740:	2b000204 	addi	r12,r5,8
 4001744:	22c00204 	addi	r11,r4,8
 4001748:	84000504 	addi	r16,r16,20
 400174c:	2a800304 	addi	r10,r5,12
 4001750:	22400304 	addi	r9,r4,12
 4001754:	2c21883a 	add	r16,r5,r16
 4001758:	2811883a 	mov	r8,r5
 400175c:	200f883a 	mov	r7,r4
 4001760:	41000017 	ldw	r4,0(r8)
 4001764:	1fc00017 	ldw	ra,0(r3)
 4001768:	63c00017 	ldw	r15,0(r12)
 400176c:	39000015 	stw	r4,0(r7)
 4001770:	53800017 	ldw	r14,0(r10)
 4001774:	6fc00015 	stw	ra,0(r13)
 4001778:	5bc00015 	stw	r15,0(r11)
 400177c:	4b800015 	stw	r14,0(r9)
 4001780:	18c00404 	addi	r3,r3,16
 4001784:	39c00404 	addi	r7,r7,16
 4001788:	42000404 	addi	r8,r8,16
 400178c:	6b400404 	addi	r13,r13,16
 4001790:	63000404 	addi	r12,r12,16
 4001794:	5ac00404 	addi	r11,r11,16
 4001798:	52800404 	addi	r10,r10,16
 400179c:	4a400404 	addi	r9,r9,16
 40017a0:	1c3fef1e 	bne	r3,r16,4001760 <__alt_mem_onchip_memory+0xfbff9760>
 40017a4:	89c00044 	addi	r7,r17,1
 40017a8:	380e913a 	slli	r7,r7,4
 40017ac:	310003cc 	andi	r4,r6,15
 40017b0:	02c000c4 	movi	r11,3
 40017b4:	11c7883a 	add	r3,r2,r7
 40017b8:	29cb883a 	add	r5,r5,r7
 40017bc:	5900212e 	bgeu	r11,r4,4001844 <memcpy+0x140>
 40017c0:	1813883a 	mov	r9,r3
 40017c4:	2811883a 	mov	r8,r5
 40017c8:	200f883a 	mov	r7,r4
 40017cc:	42800017 	ldw	r10,0(r8)
 40017d0:	4a400104 	addi	r9,r9,4
 40017d4:	39ffff04 	addi	r7,r7,-4
 40017d8:	4abfff15 	stw	r10,-4(r9)
 40017dc:	42000104 	addi	r8,r8,4
 40017e0:	59fffa36 	bltu	r11,r7,40017cc <__alt_mem_onchip_memory+0xfbff97cc>
 40017e4:	213fff04 	addi	r4,r4,-4
 40017e8:	2008d0ba 	srli	r4,r4,2
 40017ec:	318000cc 	andi	r6,r6,3
 40017f0:	21000044 	addi	r4,r4,1
 40017f4:	2109883a 	add	r4,r4,r4
 40017f8:	2109883a 	add	r4,r4,r4
 40017fc:	1907883a 	add	r3,r3,r4
 4001800:	290b883a 	add	r5,r5,r4
 4001804:	30000626 	beq	r6,zero,4001820 <memcpy+0x11c>
 4001808:	198d883a 	add	r6,r3,r6
 400180c:	29c00003 	ldbu	r7,0(r5)
 4001810:	18c00044 	addi	r3,r3,1
 4001814:	29400044 	addi	r5,r5,1
 4001818:	19ffffc5 	stb	r7,-1(r3)
 400181c:	19bffb1e 	bne	r3,r6,400180c <__alt_mem_onchip_memory+0xfbff980c>
 4001820:	dfc00217 	ldw	ra,8(sp)
 4001824:	dc400117 	ldw	r17,4(sp)
 4001828:	dc000017 	ldw	r16,0(sp)
 400182c:	dec00304 	addi	sp,sp,12
 4001830:	f800283a 	ret
 4001834:	2007883a 	mov	r3,r4
 4001838:	003ff206 	br	4001804 <__alt_mem_onchip_memory+0xfbff9804>
 400183c:	2007883a 	mov	r3,r4
 4001840:	003ff106 	br	4001808 <__alt_mem_onchip_memory+0xfbff9808>
 4001844:	200d883a 	mov	r6,r4
 4001848:	003fee06 	br	4001804 <__alt_mem_onchip_memory+0xfbff9804>

0400184c <memmove>:
 400184c:	2005883a 	mov	r2,r4
 4001850:	29000b2e 	bgeu	r5,r4,4001880 <memmove+0x34>
 4001854:	298f883a 	add	r7,r5,r6
 4001858:	21c0092e 	bgeu	r4,r7,4001880 <memmove+0x34>
 400185c:	2187883a 	add	r3,r4,r6
 4001860:	198bc83a 	sub	r5,r3,r6
 4001864:	30004826 	beq	r6,zero,4001988 <memmove+0x13c>
 4001868:	39ffffc4 	addi	r7,r7,-1
 400186c:	39000003 	ldbu	r4,0(r7)
 4001870:	18ffffc4 	addi	r3,r3,-1
 4001874:	19000005 	stb	r4,0(r3)
 4001878:	28fffb1e 	bne	r5,r3,4001868 <__alt_mem_onchip_memory+0xfbff9868>
 400187c:	f800283a 	ret
 4001880:	00c003c4 	movi	r3,15
 4001884:	1980412e 	bgeu	r3,r6,400198c <memmove+0x140>
 4001888:	2886b03a 	or	r3,r5,r2
 400188c:	18c000cc 	andi	r3,r3,3
 4001890:	1800401e 	bne	r3,zero,4001994 <memmove+0x148>
 4001894:	33fffc04 	addi	r15,r6,-16
 4001898:	781ed13a 	srli	r15,r15,4
 400189c:	28c00104 	addi	r3,r5,4
 40018a0:	13400104 	addi	r13,r2,4
 40018a4:	781c913a 	slli	r14,r15,4
 40018a8:	2b000204 	addi	r12,r5,8
 40018ac:	12c00204 	addi	r11,r2,8
 40018b0:	73800504 	addi	r14,r14,20
 40018b4:	2a800304 	addi	r10,r5,12
 40018b8:	12400304 	addi	r9,r2,12
 40018bc:	2b9d883a 	add	r14,r5,r14
 40018c0:	2811883a 	mov	r8,r5
 40018c4:	100f883a 	mov	r7,r2
 40018c8:	41000017 	ldw	r4,0(r8)
 40018cc:	39c00404 	addi	r7,r7,16
 40018d0:	18c00404 	addi	r3,r3,16
 40018d4:	393ffc15 	stw	r4,-16(r7)
 40018d8:	193ffc17 	ldw	r4,-16(r3)
 40018dc:	6b400404 	addi	r13,r13,16
 40018e0:	5ac00404 	addi	r11,r11,16
 40018e4:	693ffc15 	stw	r4,-16(r13)
 40018e8:	61000017 	ldw	r4,0(r12)
 40018ec:	4a400404 	addi	r9,r9,16
 40018f0:	42000404 	addi	r8,r8,16
 40018f4:	593ffc15 	stw	r4,-16(r11)
 40018f8:	51000017 	ldw	r4,0(r10)
 40018fc:	63000404 	addi	r12,r12,16
 4001900:	52800404 	addi	r10,r10,16
 4001904:	493ffc15 	stw	r4,-16(r9)
 4001908:	1bbfef1e 	bne	r3,r14,40018c8 <__alt_mem_onchip_memory+0xfbff98c8>
 400190c:	79000044 	addi	r4,r15,1
 4001910:	2008913a 	slli	r4,r4,4
 4001914:	328003cc 	andi	r10,r6,15
 4001918:	02c000c4 	movi	r11,3
 400191c:	1107883a 	add	r3,r2,r4
 4001920:	290b883a 	add	r5,r5,r4
 4001924:	5a801e2e 	bgeu	r11,r10,40019a0 <memmove+0x154>
 4001928:	1813883a 	mov	r9,r3
 400192c:	2811883a 	mov	r8,r5
 4001930:	500f883a 	mov	r7,r10
 4001934:	41000017 	ldw	r4,0(r8)
 4001938:	4a400104 	addi	r9,r9,4
 400193c:	39ffff04 	addi	r7,r7,-4
 4001940:	493fff15 	stw	r4,-4(r9)
 4001944:	42000104 	addi	r8,r8,4
 4001948:	59fffa36 	bltu	r11,r7,4001934 <__alt_mem_onchip_memory+0xfbff9934>
 400194c:	513fff04 	addi	r4,r10,-4
 4001950:	2008d0ba 	srli	r4,r4,2
 4001954:	318000cc 	andi	r6,r6,3
 4001958:	21000044 	addi	r4,r4,1
 400195c:	2109883a 	add	r4,r4,r4
 4001960:	2109883a 	add	r4,r4,r4
 4001964:	1907883a 	add	r3,r3,r4
 4001968:	290b883a 	add	r5,r5,r4
 400196c:	30000b26 	beq	r6,zero,400199c <memmove+0x150>
 4001970:	198d883a 	add	r6,r3,r6
 4001974:	29c00003 	ldbu	r7,0(r5)
 4001978:	18c00044 	addi	r3,r3,1
 400197c:	29400044 	addi	r5,r5,1
 4001980:	19ffffc5 	stb	r7,-1(r3)
 4001984:	19bffb1e 	bne	r3,r6,4001974 <__alt_mem_onchip_memory+0xfbff9974>
 4001988:	f800283a 	ret
 400198c:	1007883a 	mov	r3,r2
 4001990:	003ff606 	br	400196c <__alt_mem_onchip_memory+0xfbff996c>
 4001994:	1007883a 	mov	r3,r2
 4001998:	003ff506 	br	4001970 <__alt_mem_onchip_memory+0xfbff9970>
 400199c:	f800283a 	ret
 40019a0:	500d883a 	mov	r6,r10
 40019a4:	003ff106 	br	400196c <__alt_mem_onchip_memory+0xfbff996c>

040019a8 <memset>:
 40019a8:	20c000cc 	andi	r3,r4,3
 40019ac:	2005883a 	mov	r2,r4
 40019b0:	18004426 	beq	r3,zero,4001ac4 <memset+0x11c>
 40019b4:	31ffffc4 	addi	r7,r6,-1
 40019b8:	30004026 	beq	r6,zero,4001abc <memset+0x114>
 40019bc:	2813883a 	mov	r9,r5
 40019c0:	200d883a 	mov	r6,r4
 40019c4:	2007883a 	mov	r3,r4
 40019c8:	00000406 	br	40019dc <memset+0x34>
 40019cc:	3a3fffc4 	addi	r8,r7,-1
 40019d0:	31800044 	addi	r6,r6,1
 40019d4:	38003926 	beq	r7,zero,4001abc <memset+0x114>
 40019d8:	400f883a 	mov	r7,r8
 40019dc:	18c00044 	addi	r3,r3,1
 40019e0:	32400005 	stb	r9,0(r6)
 40019e4:	1a0000cc 	andi	r8,r3,3
 40019e8:	403ff81e 	bne	r8,zero,40019cc <__alt_mem_onchip_memory+0xfbff99cc>
 40019ec:	010000c4 	movi	r4,3
 40019f0:	21c02d2e 	bgeu	r4,r7,4001aa8 <memset+0x100>
 40019f4:	29003fcc 	andi	r4,r5,255
 40019f8:	200c923a 	slli	r6,r4,8
 40019fc:	3108b03a 	or	r4,r6,r4
 4001a00:	200c943a 	slli	r6,r4,16
 4001a04:	218cb03a 	or	r6,r4,r6
 4001a08:	010003c4 	movi	r4,15
 4001a0c:	21c0182e 	bgeu	r4,r7,4001a70 <memset+0xc8>
 4001a10:	3b3ffc04 	addi	r12,r7,-16
 4001a14:	6018d13a 	srli	r12,r12,4
 4001a18:	1a000104 	addi	r8,r3,4
 4001a1c:	1ac00204 	addi	r11,r3,8
 4001a20:	6008913a 	slli	r4,r12,4
 4001a24:	1a800304 	addi	r10,r3,12
 4001a28:	1813883a 	mov	r9,r3
 4001a2c:	21000504 	addi	r4,r4,20
 4001a30:	1909883a 	add	r4,r3,r4
 4001a34:	49800015 	stw	r6,0(r9)
 4001a38:	41800015 	stw	r6,0(r8)
 4001a3c:	59800015 	stw	r6,0(r11)
 4001a40:	51800015 	stw	r6,0(r10)
 4001a44:	42000404 	addi	r8,r8,16
 4001a48:	4a400404 	addi	r9,r9,16
 4001a4c:	5ac00404 	addi	r11,r11,16
 4001a50:	52800404 	addi	r10,r10,16
 4001a54:	413ff71e 	bne	r8,r4,4001a34 <__alt_mem_onchip_memory+0xfbff9a34>
 4001a58:	63000044 	addi	r12,r12,1
 4001a5c:	6018913a 	slli	r12,r12,4
 4001a60:	39c003cc 	andi	r7,r7,15
 4001a64:	010000c4 	movi	r4,3
 4001a68:	1b07883a 	add	r3,r3,r12
 4001a6c:	21c00e2e 	bgeu	r4,r7,4001aa8 <memset+0x100>
 4001a70:	1813883a 	mov	r9,r3
 4001a74:	3811883a 	mov	r8,r7
 4001a78:	010000c4 	movi	r4,3
 4001a7c:	49800015 	stw	r6,0(r9)
 4001a80:	423fff04 	addi	r8,r8,-4
 4001a84:	4a400104 	addi	r9,r9,4
 4001a88:	223ffc36 	bltu	r4,r8,4001a7c <__alt_mem_onchip_memory+0xfbff9a7c>
 4001a8c:	393fff04 	addi	r4,r7,-4
 4001a90:	2008d0ba 	srli	r4,r4,2
 4001a94:	39c000cc 	andi	r7,r7,3
 4001a98:	21000044 	addi	r4,r4,1
 4001a9c:	2109883a 	add	r4,r4,r4
 4001aa0:	2109883a 	add	r4,r4,r4
 4001aa4:	1907883a 	add	r3,r3,r4
 4001aa8:	38000526 	beq	r7,zero,4001ac0 <memset+0x118>
 4001aac:	19cf883a 	add	r7,r3,r7
 4001ab0:	19400005 	stb	r5,0(r3)
 4001ab4:	18c00044 	addi	r3,r3,1
 4001ab8:	38fffd1e 	bne	r7,r3,4001ab0 <__alt_mem_onchip_memory+0xfbff9ab0>
 4001abc:	f800283a 	ret
 4001ac0:	f800283a 	ret
 4001ac4:	2007883a 	mov	r3,r4
 4001ac8:	300f883a 	mov	r7,r6
 4001acc:	003fc706 	br	40019ec <__alt_mem_onchip_memory+0xfbff99ec>

04001ad0 <_realloc_r>:
 4001ad0:	defff604 	addi	sp,sp,-40
 4001ad4:	dc800215 	stw	r18,8(sp)
 4001ad8:	dfc00915 	stw	ra,36(sp)
 4001adc:	df000815 	stw	fp,32(sp)
 4001ae0:	ddc00715 	stw	r23,28(sp)
 4001ae4:	dd800615 	stw	r22,24(sp)
 4001ae8:	dd400515 	stw	r21,20(sp)
 4001aec:	dd000415 	stw	r20,16(sp)
 4001af0:	dcc00315 	stw	r19,12(sp)
 4001af4:	dc400115 	stw	r17,4(sp)
 4001af8:	dc000015 	stw	r16,0(sp)
 4001afc:	3025883a 	mov	r18,r6
 4001b00:	2800b726 	beq	r5,zero,4001de0 <_realloc_r+0x310>
 4001b04:	282b883a 	mov	r21,r5
 4001b08:	2029883a 	mov	r20,r4
 4001b0c:	40036080 	call	4003608 <__malloc_lock>
 4001b10:	a8bfff17 	ldw	r2,-4(r21)
 4001b14:	043fff04 	movi	r16,-4
 4001b18:	90c002c4 	addi	r3,r18,11
 4001b1c:	01000584 	movi	r4,22
 4001b20:	acfffe04 	addi	r19,r21,-8
 4001b24:	1420703a 	and	r16,r2,r16
 4001b28:	20c0332e 	bgeu	r4,r3,4001bf8 <_realloc_r+0x128>
 4001b2c:	047ffe04 	movi	r17,-8
 4001b30:	1c62703a 	and	r17,r3,r17
 4001b34:	8807883a 	mov	r3,r17
 4001b38:	88005816 	blt	r17,zero,4001c9c <_realloc_r+0x1cc>
 4001b3c:	8c805736 	bltu	r17,r18,4001c9c <_realloc_r+0x1cc>
 4001b40:	80c0300e 	bge	r16,r3,4001c04 <_realloc_r+0x134>
 4001b44:	07010034 	movhi	fp,1024
 4001b48:	e7172904 	addi	fp,fp,23716
 4001b4c:	e1c00217 	ldw	r7,8(fp)
 4001b50:	9c09883a 	add	r4,r19,r16
 4001b54:	22000117 	ldw	r8,4(r4)
 4001b58:	21c06326 	beq	r4,r7,4001ce8 <_realloc_r+0x218>
 4001b5c:	017fff84 	movi	r5,-2
 4001b60:	414a703a 	and	r5,r8,r5
 4001b64:	214b883a 	add	r5,r4,r5
 4001b68:	29800117 	ldw	r6,4(r5)
 4001b6c:	3180004c 	andi	r6,r6,1
 4001b70:	30003f26 	beq	r6,zero,4001c70 <_realloc_r+0x1a0>
 4001b74:	1080004c 	andi	r2,r2,1
 4001b78:	10008326 	beq	r2,zero,4001d88 <_realloc_r+0x2b8>
 4001b7c:	900b883a 	mov	r5,r18
 4001b80:	a009883a 	mov	r4,r20
 4001b84:	4000e140 	call	4000e14 <_malloc_r>
 4001b88:	1025883a 	mov	r18,r2
 4001b8c:	10011e26 	beq	r2,zero,4002008 <_realloc_r+0x538>
 4001b90:	a93fff17 	ldw	r4,-4(r21)
 4001b94:	10fffe04 	addi	r3,r2,-8
 4001b98:	00bfff84 	movi	r2,-2
 4001b9c:	2084703a 	and	r2,r4,r2
 4001ba0:	9885883a 	add	r2,r19,r2
 4001ba4:	1880ee26 	beq	r3,r2,4001f60 <_realloc_r+0x490>
 4001ba8:	81bfff04 	addi	r6,r16,-4
 4001bac:	00800904 	movi	r2,36
 4001bb0:	1180b836 	bltu	r2,r6,4001e94 <_realloc_r+0x3c4>
 4001bb4:	00c004c4 	movi	r3,19
 4001bb8:	19809636 	bltu	r3,r6,4001e14 <_realloc_r+0x344>
 4001bbc:	9005883a 	mov	r2,r18
 4001bc0:	a807883a 	mov	r3,r21
 4001bc4:	19000017 	ldw	r4,0(r3)
 4001bc8:	11000015 	stw	r4,0(r2)
 4001bcc:	19000117 	ldw	r4,4(r3)
 4001bd0:	11000115 	stw	r4,4(r2)
 4001bd4:	18c00217 	ldw	r3,8(r3)
 4001bd8:	10c00215 	stw	r3,8(r2)
 4001bdc:	a80b883a 	mov	r5,r21
 4001be0:	a009883a 	mov	r4,r20
 4001be4:	400289c0 	call	400289c <_free_r>
 4001be8:	a009883a 	mov	r4,r20
 4001bec:	400362c0 	call	400362c <__malloc_unlock>
 4001bf0:	9005883a 	mov	r2,r18
 4001bf4:	00001206 	br	4001c40 <_realloc_r+0x170>
 4001bf8:	00c00404 	movi	r3,16
 4001bfc:	1823883a 	mov	r17,r3
 4001c00:	003fce06 	br	4001b3c <__alt_mem_onchip_memory+0xfbff9b3c>
 4001c04:	a825883a 	mov	r18,r21
 4001c08:	8445c83a 	sub	r2,r16,r17
 4001c0c:	00c003c4 	movi	r3,15
 4001c10:	18802636 	bltu	r3,r2,4001cac <_realloc_r+0x1dc>
 4001c14:	99800117 	ldw	r6,4(r19)
 4001c18:	9c07883a 	add	r3,r19,r16
 4001c1c:	3180004c 	andi	r6,r6,1
 4001c20:	3420b03a 	or	r16,r6,r16
 4001c24:	9c000115 	stw	r16,4(r19)
 4001c28:	18800117 	ldw	r2,4(r3)
 4001c2c:	10800054 	ori	r2,r2,1
 4001c30:	18800115 	stw	r2,4(r3)
 4001c34:	a009883a 	mov	r4,r20
 4001c38:	400362c0 	call	400362c <__malloc_unlock>
 4001c3c:	9005883a 	mov	r2,r18
 4001c40:	dfc00917 	ldw	ra,36(sp)
 4001c44:	df000817 	ldw	fp,32(sp)
 4001c48:	ddc00717 	ldw	r23,28(sp)
 4001c4c:	dd800617 	ldw	r22,24(sp)
 4001c50:	dd400517 	ldw	r21,20(sp)
 4001c54:	dd000417 	ldw	r20,16(sp)
 4001c58:	dcc00317 	ldw	r19,12(sp)
 4001c5c:	dc800217 	ldw	r18,8(sp)
 4001c60:	dc400117 	ldw	r17,4(sp)
 4001c64:	dc000017 	ldw	r16,0(sp)
 4001c68:	dec00a04 	addi	sp,sp,40
 4001c6c:	f800283a 	ret
 4001c70:	017fff04 	movi	r5,-4
 4001c74:	414a703a 	and	r5,r8,r5
 4001c78:	814d883a 	add	r6,r16,r5
 4001c7c:	30c01f16 	blt	r6,r3,4001cfc <_realloc_r+0x22c>
 4001c80:	20800317 	ldw	r2,12(r4)
 4001c84:	20c00217 	ldw	r3,8(r4)
 4001c88:	a825883a 	mov	r18,r21
 4001c8c:	3021883a 	mov	r16,r6
 4001c90:	18800315 	stw	r2,12(r3)
 4001c94:	10c00215 	stw	r3,8(r2)
 4001c98:	003fdb06 	br	4001c08 <__alt_mem_onchip_memory+0xfbff9c08>
 4001c9c:	00800304 	movi	r2,12
 4001ca0:	a0800015 	stw	r2,0(r20)
 4001ca4:	0005883a 	mov	r2,zero
 4001ca8:	003fe506 	br	4001c40 <__alt_mem_onchip_memory+0xfbff9c40>
 4001cac:	98c00117 	ldw	r3,4(r19)
 4001cb0:	9c4b883a 	add	r5,r19,r17
 4001cb4:	11000054 	ori	r4,r2,1
 4001cb8:	18c0004c 	andi	r3,r3,1
 4001cbc:	1c62b03a 	or	r17,r3,r17
 4001cc0:	9c400115 	stw	r17,4(r19)
 4001cc4:	29000115 	stw	r4,4(r5)
 4001cc8:	2885883a 	add	r2,r5,r2
 4001ccc:	10c00117 	ldw	r3,4(r2)
 4001cd0:	29400204 	addi	r5,r5,8
 4001cd4:	a009883a 	mov	r4,r20
 4001cd8:	18c00054 	ori	r3,r3,1
 4001cdc:	10c00115 	stw	r3,4(r2)
 4001ce0:	400289c0 	call	400289c <_free_r>
 4001ce4:	003fd306 	br	4001c34 <__alt_mem_onchip_memory+0xfbff9c34>
 4001ce8:	017fff04 	movi	r5,-4
 4001cec:	414a703a 	and	r5,r8,r5
 4001cf0:	89800404 	addi	r6,r17,16
 4001cf4:	8151883a 	add	r8,r16,r5
 4001cf8:	4180590e 	bge	r8,r6,4001e60 <_realloc_r+0x390>
 4001cfc:	1080004c 	andi	r2,r2,1
 4001d00:	103f9e1e 	bne	r2,zero,4001b7c <__alt_mem_onchip_memory+0xfbff9b7c>
 4001d04:	adbffe17 	ldw	r22,-8(r21)
 4001d08:	00bfff04 	movi	r2,-4
 4001d0c:	9dadc83a 	sub	r22,r19,r22
 4001d10:	b1800117 	ldw	r6,4(r22)
 4001d14:	3084703a 	and	r2,r6,r2
 4001d18:	20002026 	beq	r4,zero,4001d9c <_realloc_r+0x2cc>
 4001d1c:	80af883a 	add	r23,r16,r2
 4001d20:	b96f883a 	add	r23,r23,r5
 4001d24:	21c05f26 	beq	r4,r7,4001ea4 <_realloc_r+0x3d4>
 4001d28:	b8c01c16 	blt	r23,r3,4001d9c <_realloc_r+0x2cc>
 4001d2c:	20800317 	ldw	r2,12(r4)
 4001d30:	20c00217 	ldw	r3,8(r4)
 4001d34:	81bfff04 	addi	r6,r16,-4
 4001d38:	01000904 	movi	r4,36
 4001d3c:	18800315 	stw	r2,12(r3)
 4001d40:	10c00215 	stw	r3,8(r2)
 4001d44:	b0c00217 	ldw	r3,8(r22)
 4001d48:	b0800317 	ldw	r2,12(r22)
 4001d4c:	b4800204 	addi	r18,r22,8
 4001d50:	18800315 	stw	r2,12(r3)
 4001d54:	10c00215 	stw	r3,8(r2)
 4001d58:	21801b36 	bltu	r4,r6,4001dc8 <_realloc_r+0x2f8>
 4001d5c:	008004c4 	movi	r2,19
 4001d60:	1180352e 	bgeu	r2,r6,4001e38 <_realloc_r+0x368>
 4001d64:	a8800017 	ldw	r2,0(r21)
 4001d68:	b0800215 	stw	r2,8(r22)
 4001d6c:	a8800117 	ldw	r2,4(r21)
 4001d70:	b0800315 	stw	r2,12(r22)
 4001d74:	008006c4 	movi	r2,27
 4001d78:	11807f36 	bltu	r2,r6,4001f78 <_realloc_r+0x4a8>
 4001d7c:	b0800404 	addi	r2,r22,16
 4001d80:	ad400204 	addi	r21,r21,8
 4001d84:	00002d06 	br	4001e3c <_realloc_r+0x36c>
 4001d88:	adbffe17 	ldw	r22,-8(r21)
 4001d8c:	00bfff04 	movi	r2,-4
 4001d90:	9dadc83a 	sub	r22,r19,r22
 4001d94:	b1000117 	ldw	r4,4(r22)
 4001d98:	2084703a 	and	r2,r4,r2
 4001d9c:	b03f7726 	beq	r22,zero,4001b7c <__alt_mem_onchip_memory+0xfbff9b7c>
 4001da0:	80af883a 	add	r23,r16,r2
 4001da4:	b8ff7516 	blt	r23,r3,4001b7c <__alt_mem_onchip_memory+0xfbff9b7c>
 4001da8:	b0800317 	ldw	r2,12(r22)
 4001dac:	b0c00217 	ldw	r3,8(r22)
 4001db0:	81bfff04 	addi	r6,r16,-4
 4001db4:	01000904 	movi	r4,36
 4001db8:	18800315 	stw	r2,12(r3)
 4001dbc:	10c00215 	stw	r3,8(r2)
 4001dc0:	b4800204 	addi	r18,r22,8
 4001dc4:	21bfe52e 	bgeu	r4,r6,4001d5c <__alt_mem_onchip_memory+0xfbff9d5c>
 4001dc8:	a80b883a 	mov	r5,r21
 4001dcc:	9009883a 	mov	r4,r18
 4001dd0:	400184c0 	call	400184c <memmove>
 4001dd4:	b821883a 	mov	r16,r23
 4001dd8:	b027883a 	mov	r19,r22
 4001ddc:	003f8a06 	br	4001c08 <__alt_mem_onchip_memory+0xfbff9c08>
 4001de0:	300b883a 	mov	r5,r6
 4001de4:	dfc00917 	ldw	ra,36(sp)
 4001de8:	df000817 	ldw	fp,32(sp)
 4001dec:	ddc00717 	ldw	r23,28(sp)
 4001df0:	dd800617 	ldw	r22,24(sp)
 4001df4:	dd400517 	ldw	r21,20(sp)
 4001df8:	dd000417 	ldw	r20,16(sp)
 4001dfc:	dcc00317 	ldw	r19,12(sp)
 4001e00:	dc800217 	ldw	r18,8(sp)
 4001e04:	dc400117 	ldw	r17,4(sp)
 4001e08:	dc000017 	ldw	r16,0(sp)
 4001e0c:	dec00a04 	addi	sp,sp,40
 4001e10:	4000e141 	jmpi	4000e14 <_malloc_r>
 4001e14:	a8c00017 	ldw	r3,0(r21)
 4001e18:	90c00015 	stw	r3,0(r18)
 4001e1c:	a8c00117 	ldw	r3,4(r21)
 4001e20:	90c00115 	stw	r3,4(r18)
 4001e24:	00c006c4 	movi	r3,27
 4001e28:	19804536 	bltu	r3,r6,4001f40 <_realloc_r+0x470>
 4001e2c:	90800204 	addi	r2,r18,8
 4001e30:	a8c00204 	addi	r3,r21,8
 4001e34:	003f6306 	br	4001bc4 <__alt_mem_onchip_memory+0xfbff9bc4>
 4001e38:	9005883a 	mov	r2,r18
 4001e3c:	a8c00017 	ldw	r3,0(r21)
 4001e40:	b821883a 	mov	r16,r23
 4001e44:	b027883a 	mov	r19,r22
 4001e48:	10c00015 	stw	r3,0(r2)
 4001e4c:	a8c00117 	ldw	r3,4(r21)
 4001e50:	10c00115 	stw	r3,4(r2)
 4001e54:	a8c00217 	ldw	r3,8(r21)
 4001e58:	10c00215 	stw	r3,8(r2)
 4001e5c:	003f6a06 	br	4001c08 <__alt_mem_onchip_memory+0xfbff9c08>
 4001e60:	9c67883a 	add	r19,r19,r17
 4001e64:	4445c83a 	sub	r2,r8,r17
 4001e68:	e4c00215 	stw	r19,8(fp)
 4001e6c:	10800054 	ori	r2,r2,1
 4001e70:	98800115 	stw	r2,4(r19)
 4001e74:	a8bfff17 	ldw	r2,-4(r21)
 4001e78:	a009883a 	mov	r4,r20
 4001e7c:	1080004c 	andi	r2,r2,1
 4001e80:	1462b03a 	or	r17,r2,r17
 4001e84:	ac7fff15 	stw	r17,-4(r21)
 4001e88:	400362c0 	call	400362c <__malloc_unlock>
 4001e8c:	a805883a 	mov	r2,r21
 4001e90:	003f6b06 	br	4001c40 <__alt_mem_onchip_memory+0xfbff9c40>
 4001e94:	a80b883a 	mov	r5,r21
 4001e98:	9009883a 	mov	r4,r18
 4001e9c:	400184c0 	call	400184c <memmove>
 4001ea0:	003f4e06 	br	4001bdc <__alt_mem_onchip_memory+0xfbff9bdc>
 4001ea4:	89000404 	addi	r4,r17,16
 4001ea8:	b93fbc16 	blt	r23,r4,4001d9c <__alt_mem_onchip_memory+0xfbff9d9c>
 4001eac:	b0800317 	ldw	r2,12(r22)
 4001eb0:	b0c00217 	ldw	r3,8(r22)
 4001eb4:	81bfff04 	addi	r6,r16,-4
 4001eb8:	01000904 	movi	r4,36
 4001ebc:	18800315 	stw	r2,12(r3)
 4001ec0:	10c00215 	stw	r3,8(r2)
 4001ec4:	b4800204 	addi	r18,r22,8
 4001ec8:	21804336 	bltu	r4,r6,4001fd8 <_realloc_r+0x508>
 4001ecc:	008004c4 	movi	r2,19
 4001ed0:	11803f2e 	bgeu	r2,r6,4001fd0 <_realloc_r+0x500>
 4001ed4:	a8800017 	ldw	r2,0(r21)
 4001ed8:	b0800215 	stw	r2,8(r22)
 4001edc:	a8800117 	ldw	r2,4(r21)
 4001ee0:	b0800315 	stw	r2,12(r22)
 4001ee4:	008006c4 	movi	r2,27
 4001ee8:	11803f36 	bltu	r2,r6,4001fe8 <_realloc_r+0x518>
 4001eec:	b0800404 	addi	r2,r22,16
 4001ef0:	ad400204 	addi	r21,r21,8
 4001ef4:	a8c00017 	ldw	r3,0(r21)
 4001ef8:	10c00015 	stw	r3,0(r2)
 4001efc:	a8c00117 	ldw	r3,4(r21)
 4001f00:	10c00115 	stw	r3,4(r2)
 4001f04:	a8c00217 	ldw	r3,8(r21)
 4001f08:	10c00215 	stw	r3,8(r2)
 4001f0c:	b447883a 	add	r3,r22,r17
 4001f10:	bc45c83a 	sub	r2,r23,r17
 4001f14:	e0c00215 	stw	r3,8(fp)
 4001f18:	10800054 	ori	r2,r2,1
 4001f1c:	18800115 	stw	r2,4(r3)
 4001f20:	b0800117 	ldw	r2,4(r22)
 4001f24:	a009883a 	mov	r4,r20
 4001f28:	1080004c 	andi	r2,r2,1
 4001f2c:	1462b03a 	or	r17,r2,r17
 4001f30:	b4400115 	stw	r17,4(r22)
 4001f34:	400362c0 	call	400362c <__malloc_unlock>
 4001f38:	9005883a 	mov	r2,r18
 4001f3c:	003f4006 	br	4001c40 <__alt_mem_onchip_memory+0xfbff9c40>
 4001f40:	a8c00217 	ldw	r3,8(r21)
 4001f44:	90c00215 	stw	r3,8(r18)
 4001f48:	a8c00317 	ldw	r3,12(r21)
 4001f4c:	90c00315 	stw	r3,12(r18)
 4001f50:	30801126 	beq	r6,r2,4001f98 <_realloc_r+0x4c8>
 4001f54:	90800404 	addi	r2,r18,16
 4001f58:	a8c00404 	addi	r3,r21,16
 4001f5c:	003f1906 	br	4001bc4 <__alt_mem_onchip_memory+0xfbff9bc4>
 4001f60:	90ffff17 	ldw	r3,-4(r18)
 4001f64:	00bfff04 	movi	r2,-4
 4001f68:	a825883a 	mov	r18,r21
 4001f6c:	1884703a 	and	r2,r3,r2
 4001f70:	80a1883a 	add	r16,r16,r2
 4001f74:	003f2406 	br	4001c08 <__alt_mem_onchip_memory+0xfbff9c08>
 4001f78:	a8800217 	ldw	r2,8(r21)
 4001f7c:	b0800415 	stw	r2,16(r22)
 4001f80:	a8800317 	ldw	r2,12(r21)
 4001f84:	b0800515 	stw	r2,20(r22)
 4001f88:	31000a26 	beq	r6,r4,4001fb4 <_realloc_r+0x4e4>
 4001f8c:	b0800604 	addi	r2,r22,24
 4001f90:	ad400404 	addi	r21,r21,16
 4001f94:	003fa906 	br	4001e3c <__alt_mem_onchip_memory+0xfbff9e3c>
 4001f98:	a9000417 	ldw	r4,16(r21)
 4001f9c:	90800604 	addi	r2,r18,24
 4001fa0:	a8c00604 	addi	r3,r21,24
 4001fa4:	91000415 	stw	r4,16(r18)
 4001fa8:	a9000517 	ldw	r4,20(r21)
 4001fac:	91000515 	stw	r4,20(r18)
 4001fb0:	003f0406 	br	4001bc4 <__alt_mem_onchip_memory+0xfbff9bc4>
 4001fb4:	a8c00417 	ldw	r3,16(r21)
 4001fb8:	ad400604 	addi	r21,r21,24
 4001fbc:	b0800804 	addi	r2,r22,32
 4001fc0:	b0c00615 	stw	r3,24(r22)
 4001fc4:	a8ffff17 	ldw	r3,-4(r21)
 4001fc8:	b0c00715 	stw	r3,28(r22)
 4001fcc:	003f9b06 	br	4001e3c <__alt_mem_onchip_memory+0xfbff9e3c>
 4001fd0:	9005883a 	mov	r2,r18
 4001fd4:	003fc706 	br	4001ef4 <__alt_mem_onchip_memory+0xfbff9ef4>
 4001fd8:	a80b883a 	mov	r5,r21
 4001fdc:	9009883a 	mov	r4,r18
 4001fe0:	400184c0 	call	400184c <memmove>
 4001fe4:	003fc906 	br	4001f0c <__alt_mem_onchip_memory+0xfbff9f0c>
 4001fe8:	a8800217 	ldw	r2,8(r21)
 4001fec:	b0800415 	stw	r2,16(r22)
 4001ff0:	a8800317 	ldw	r2,12(r21)
 4001ff4:	b0800515 	stw	r2,20(r22)
 4001ff8:	31000726 	beq	r6,r4,4002018 <_realloc_r+0x548>
 4001ffc:	b0800604 	addi	r2,r22,24
 4002000:	ad400404 	addi	r21,r21,16
 4002004:	003fbb06 	br	4001ef4 <__alt_mem_onchip_memory+0xfbff9ef4>
 4002008:	a009883a 	mov	r4,r20
 400200c:	400362c0 	call	400362c <__malloc_unlock>
 4002010:	0005883a 	mov	r2,zero
 4002014:	003f0a06 	br	4001c40 <__alt_mem_onchip_memory+0xfbff9c40>
 4002018:	a8c00417 	ldw	r3,16(r21)
 400201c:	ad400604 	addi	r21,r21,24
 4002020:	b0800804 	addi	r2,r22,32
 4002024:	b0c00615 	stw	r3,24(r22)
 4002028:	a8ffff17 	ldw	r3,-4(r21)
 400202c:	b0c00715 	stw	r3,28(r22)
 4002030:	003fb006 	br	4001ef4 <__alt_mem_onchip_memory+0xfbff9ef4>

04002034 <_sbrk_r>:
 4002034:	defffd04 	addi	sp,sp,-12
 4002038:	dc000015 	stw	r16,0(sp)
 400203c:	04010074 	movhi	r16,1025
 4002040:	dc400115 	stw	r17,4(sp)
 4002044:	84235904 	addi	r16,r16,-29340
 4002048:	2023883a 	mov	r17,r4
 400204c:	2809883a 	mov	r4,r5
 4002050:	dfc00215 	stw	ra,8(sp)
 4002054:	80000015 	stw	zero,0(r16)
 4002058:	40037ec0 	call	40037ec <sbrk>
 400205c:	00ffffc4 	movi	r3,-1
 4002060:	10c00526 	beq	r2,r3,4002078 <_sbrk_r+0x44>
 4002064:	dfc00217 	ldw	ra,8(sp)
 4002068:	dc400117 	ldw	r17,4(sp)
 400206c:	dc000017 	ldw	r16,0(sp)
 4002070:	dec00304 	addi	sp,sp,12
 4002074:	f800283a 	ret
 4002078:	80c00017 	ldw	r3,0(r16)
 400207c:	183ff926 	beq	r3,zero,4002064 <__alt_mem_onchip_memory+0xfbffa064>
 4002080:	88c00015 	stw	r3,0(r17)
 4002084:	003ff706 	br	4002064 <__alt_mem_onchip_memory+0xfbffa064>

04002088 <__sread>:
 4002088:	defffe04 	addi	sp,sp,-8
 400208c:	dc000015 	stw	r16,0(sp)
 4002090:	2821883a 	mov	r16,r5
 4002094:	2940038f 	ldh	r5,14(r5)
 4002098:	dfc00115 	stw	ra,4(sp)
 400209c:	4002dc80 	call	4002dc8 <_read_r>
 40020a0:	10000716 	blt	r2,zero,40020c0 <__sread+0x38>
 40020a4:	80c01417 	ldw	r3,80(r16)
 40020a8:	1887883a 	add	r3,r3,r2
 40020ac:	80c01415 	stw	r3,80(r16)
 40020b0:	dfc00117 	ldw	ra,4(sp)
 40020b4:	dc000017 	ldw	r16,0(sp)
 40020b8:	dec00204 	addi	sp,sp,8
 40020bc:	f800283a 	ret
 40020c0:	80c0030b 	ldhu	r3,12(r16)
 40020c4:	18fbffcc 	andi	r3,r3,61439
 40020c8:	80c0030d 	sth	r3,12(r16)
 40020cc:	dfc00117 	ldw	ra,4(sp)
 40020d0:	dc000017 	ldw	r16,0(sp)
 40020d4:	dec00204 	addi	sp,sp,8
 40020d8:	f800283a 	ret

040020dc <__seofread>:
 40020dc:	0005883a 	mov	r2,zero
 40020e0:	f800283a 	ret

040020e4 <__swrite>:
 40020e4:	2880030b 	ldhu	r2,12(r5)
 40020e8:	defffb04 	addi	sp,sp,-20
 40020ec:	dcc00315 	stw	r19,12(sp)
 40020f0:	dc800215 	stw	r18,8(sp)
 40020f4:	dc400115 	stw	r17,4(sp)
 40020f8:	dc000015 	stw	r16,0(sp)
 40020fc:	dfc00415 	stw	ra,16(sp)
 4002100:	10c0400c 	andi	r3,r2,256
 4002104:	2821883a 	mov	r16,r5
 4002108:	2023883a 	mov	r17,r4
 400210c:	3025883a 	mov	r18,r6
 4002110:	3827883a 	mov	r19,r7
 4002114:	18000526 	beq	r3,zero,400212c <__swrite+0x48>
 4002118:	2940038f 	ldh	r5,14(r5)
 400211c:	01c00084 	movi	r7,2
 4002120:	000d883a 	mov	r6,zero
 4002124:	4002bac0 	call	4002bac <_lseek_r>
 4002128:	8080030b 	ldhu	r2,12(r16)
 400212c:	8140038f 	ldh	r5,14(r16)
 4002130:	10bbffcc 	andi	r2,r2,61439
 4002134:	980f883a 	mov	r7,r19
 4002138:	900d883a 	mov	r6,r18
 400213c:	8809883a 	mov	r4,r17
 4002140:	8080030d 	sth	r2,12(r16)
 4002144:	dfc00417 	ldw	ra,16(sp)
 4002148:	dcc00317 	ldw	r19,12(sp)
 400214c:	dc800217 	ldw	r18,8(sp)
 4002150:	dc400117 	ldw	r17,4(sp)
 4002154:	dc000017 	ldw	r16,0(sp)
 4002158:	dec00504 	addi	sp,sp,20
 400215c:	40021c41 	jmpi	40021c4 <_write_r>

04002160 <__sseek>:
 4002160:	defffe04 	addi	sp,sp,-8
 4002164:	dc000015 	stw	r16,0(sp)
 4002168:	2821883a 	mov	r16,r5
 400216c:	2940038f 	ldh	r5,14(r5)
 4002170:	dfc00115 	stw	ra,4(sp)
 4002174:	4002bac0 	call	4002bac <_lseek_r>
 4002178:	00ffffc4 	movi	r3,-1
 400217c:	10c00826 	beq	r2,r3,40021a0 <__sseek+0x40>
 4002180:	80c0030b 	ldhu	r3,12(r16)
 4002184:	80801415 	stw	r2,80(r16)
 4002188:	18c40014 	ori	r3,r3,4096
 400218c:	80c0030d 	sth	r3,12(r16)
 4002190:	dfc00117 	ldw	ra,4(sp)
 4002194:	dc000017 	ldw	r16,0(sp)
 4002198:	dec00204 	addi	sp,sp,8
 400219c:	f800283a 	ret
 40021a0:	80c0030b 	ldhu	r3,12(r16)
 40021a4:	18fbffcc 	andi	r3,r3,61439
 40021a8:	80c0030d 	sth	r3,12(r16)
 40021ac:	dfc00117 	ldw	ra,4(sp)
 40021b0:	dc000017 	ldw	r16,0(sp)
 40021b4:	dec00204 	addi	sp,sp,8
 40021b8:	f800283a 	ret

040021bc <__sclose>:
 40021bc:	2940038f 	ldh	r5,14(r5)
 40021c0:	40023781 	jmpi	4002378 <_close_r>

040021c4 <_write_r>:
 40021c4:	defffd04 	addi	sp,sp,-12
 40021c8:	2805883a 	mov	r2,r5
 40021cc:	dc000015 	stw	r16,0(sp)
 40021d0:	04010074 	movhi	r16,1025
 40021d4:	dc400115 	stw	r17,4(sp)
 40021d8:	300b883a 	mov	r5,r6
 40021dc:	84235904 	addi	r16,r16,-29340
 40021e0:	2023883a 	mov	r17,r4
 40021e4:	380d883a 	mov	r6,r7
 40021e8:	1009883a 	mov	r4,r2
 40021ec:	dfc00215 	stw	ra,8(sp)
 40021f0:	80000015 	stw	zero,0(r16)
 40021f4:	40038d80 	call	40038d8 <write>
 40021f8:	00ffffc4 	movi	r3,-1
 40021fc:	10c00526 	beq	r2,r3,4002214 <_write_r+0x50>
 4002200:	dfc00217 	ldw	ra,8(sp)
 4002204:	dc400117 	ldw	r17,4(sp)
 4002208:	dc000017 	ldw	r16,0(sp)
 400220c:	dec00304 	addi	sp,sp,12
 4002210:	f800283a 	ret
 4002214:	80c00017 	ldw	r3,0(r16)
 4002218:	183ff926 	beq	r3,zero,4002200 <__alt_mem_onchip_memory+0xfbffa200>
 400221c:	88c00015 	stw	r3,0(r17)
 4002220:	003ff706 	br	4002200 <__alt_mem_onchip_memory+0xfbffa200>

04002224 <__swsetup_r>:
 4002224:	00810034 	movhi	r2,1024
 4002228:	defffd04 	addi	sp,sp,-12
 400222c:	109cae04 	addi	r2,r2,29368
 4002230:	dc400115 	stw	r17,4(sp)
 4002234:	2023883a 	mov	r17,r4
 4002238:	11000017 	ldw	r4,0(r2)
 400223c:	dc000015 	stw	r16,0(sp)
 4002240:	dfc00215 	stw	ra,8(sp)
 4002244:	2821883a 	mov	r16,r5
 4002248:	20000226 	beq	r4,zero,4002254 <__swsetup_r+0x30>
 400224c:	20800e17 	ldw	r2,56(r4)
 4002250:	10003126 	beq	r2,zero,4002318 <__swsetup_r+0xf4>
 4002254:	8080030b 	ldhu	r2,12(r16)
 4002258:	10c0020c 	andi	r3,r2,8
 400225c:	1009883a 	mov	r4,r2
 4002260:	18000f26 	beq	r3,zero,40022a0 <__swsetup_r+0x7c>
 4002264:	80c00417 	ldw	r3,16(r16)
 4002268:	18001526 	beq	r3,zero,40022c0 <__swsetup_r+0x9c>
 400226c:	1100004c 	andi	r4,r2,1
 4002270:	20001c1e 	bne	r4,zero,40022e4 <__swsetup_r+0xc0>
 4002274:	1080008c 	andi	r2,r2,2
 4002278:	1000291e 	bne	r2,zero,4002320 <__swsetup_r+0xfc>
 400227c:	80800517 	ldw	r2,20(r16)
 4002280:	80800215 	stw	r2,8(r16)
 4002284:	18001c26 	beq	r3,zero,40022f8 <__swsetup_r+0xd4>
 4002288:	0005883a 	mov	r2,zero
 400228c:	dfc00217 	ldw	ra,8(sp)
 4002290:	dc400117 	ldw	r17,4(sp)
 4002294:	dc000017 	ldw	r16,0(sp)
 4002298:	dec00304 	addi	sp,sp,12
 400229c:	f800283a 	ret
 40022a0:	2080040c 	andi	r2,r4,16
 40022a4:	10002e26 	beq	r2,zero,4002360 <__swsetup_r+0x13c>
 40022a8:	2080010c 	andi	r2,r4,4
 40022ac:	10001e1e 	bne	r2,zero,4002328 <__swsetup_r+0x104>
 40022b0:	80c00417 	ldw	r3,16(r16)
 40022b4:	20800214 	ori	r2,r4,8
 40022b8:	8080030d 	sth	r2,12(r16)
 40022bc:	183feb1e 	bne	r3,zero,400226c <__alt_mem_onchip_memory+0xfbffa26c>
 40022c0:	1100a00c 	andi	r4,r2,640
 40022c4:	01408004 	movi	r5,512
 40022c8:	217fe826 	beq	r4,r5,400226c <__alt_mem_onchip_memory+0xfbffa26c>
 40022cc:	800b883a 	mov	r5,r16
 40022d0:	8809883a 	mov	r4,r17
 40022d4:	4002c0c0 	call	4002c0c <__smakebuf_r>
 40022d8:	8080030b 	ldhu	r2,12(r16)
 40022dc:	80c00417 	ldw	r3,16(r16)
 40022e0:	003fe206 	br	400226c <__alt_mem_onchip_memory+0xfbffa26c>
 40022e4:	80800517 	ldw	r2,20(r16)
 40022e8:	80000215 	stw	zero,8(r16)
 40022ec:	0085c83a 	sub	r2,zero,r2
 40022f0:	80800615 	stw	r2,24(r16)
 40022f4:	183fe41e 	bne	r3,zero,4002288 <__alt_mem_onchip_memory+0xfbffa288>
 40022f8:	80c0030b 	ldhu	r3,12(r16)
 40022fc:	0005883a 	mov	r2,zero
 4002300:	1900200c 	andi	r4,r3,128
 4002304:	203fe126 	beq	r4,zero,400228c <__alt_mem_onchip_memory+0xfbffa28c>
 4002308:	18c01014 	ori	r3,r3,64
 400230c:	80c0030d 	sth	r3,12(r16)
 4002310:	00bfffc4 	movi	r2,-1
 4002314:	003fdd06 	br	400228c <__alt_mem_onchip_memory+0xfbffa28c>
 4002318:	40007800 	call	4000780 <__sinit>
 400231c:	003fcd06 	br	4002254 <__alt_mem_onchip_memory+0xfbffa254>
 4002320:	0005883a 	mov	r2,zero
 4002324:	003fd606 	br	4002280 <__alt_mem_onchip_memory+0xfbffa280>
 4002328:	81400c17 	ldw	r5,48(r16)
 400232c:	28000626 	beq	r5,zero,4002348 <__swsetup_r+0x124>
 4002330:	80801004 	addi	r2,r16,64
 4002334:	28800326 	beq	r5,r2,4002344 <__swsetup_r+0x120>
 4002338:	8809883a 	mov	r4,r17
 400233c:	400289c0 	call	400289c <_free_r>
 4002340:	8100030b 	ldhu	r4,12(r16)
 4002344:	80000c15 	stw	zero,48(r16)
 4002348:	80c00417 	ldw	r3,16(r16)
 400234c:	00bff6c4 	movi	r2,-37
 4002350:	1108703a 	and	r4,r2,r4
 4002354:	80000115 	stw	zero,4(r16)
 4002358:	80c00015 	stw	r3,0(r16)
 400235c:	003fd506 	br	40022b4 <__alt_mem_onchip_memory+0xfbffa2b4>
 4002360:	00800244 	movi	r2,9
 4002364:	88800015 	stw	r2,0(r17)
 4002368:	20801014 	ori	r2,r4,64
 400236c:	8080030d 	sth	r2,12(r16)
 4002370:	00bfffc4 	movi	r2,-1
 4002374:	003fc506 	br	400228c <__alt_mem_onchip_memory+0xfbffa28c>

04002378 <_close_r>:
 4002378:	defffd04 	addi	sp,sp,-12
 400237c:	dc000015 	stw	r16,0(sp)
 4002380:	04010074 	movhi	r16,1025
 4002384:	dc400115 	stw	r17,4(sp)
 4002388:	84235904 	addi	r16,r16,-29340
 400238c:	2023883a 	mov	r17,r4
 4002390:	2809883a 	mov	r4,r5
 4002394:	dfc00215 	stw	ra,8(sp)
 4002398:	80000015 	stw	zero,0(r16)
 400239c:	40030c80 	call	40030c8 <close>
 40023a0:	00ffffc4 	movi	r3,-1
 40023a4:	10c00526 	beq	r2,r3,40023bc <_close_r+0x44>
 40023a8:	dfc00217 	ldw	ra,8(sp)
 40023ac:	dc400117 	ldw	r17,4(sp)
 40023b0:	dc000017 	ldw	r16,0(sp)
 40023b4:	dec00304 	addi	sp,sp,12
 40023b8:	f800283a 	ret
 40023bc:	80c00017 	ldw	r3,0(r16)
 40023c0:	183ff926 	beq	r3,zero,40023a8 <__alt_mem_onchip_memory+0xfbffa3a8>
 40023c4:	88c00015 	stw	r3,0(r17)
 40023c8:	003ff706 	br	40023a8 <__alt_mem_onchip_memory+0xfbffa3a8>

040023cc <_fclose_r>:
 40023cc:	28003926 	beq	r5,zero,40024b4 <_fclose_r+0xe8>
 40023d0:	defffc04 	addi	sp,sp,-16
 40023d4:	dc400115 	stw	r17,4(sp)
 40023d8:	dc000015 	stw	r16,0(sp)
 40023dc:	dfc00315 	stw	ra,12(sp)
 40023e0:	dc800215 	stw	r18,8(sp)
 40023e4:	2023883a 	mov	r17,r4
 40023e8:	2821883a 	mov	r16,r5
 40023ec:	20000226 	beq	r4,zero,40023f8 <_fclose_r+0x2c>
 40023f0:	20800e17 	ldw	r2,56(r4)
 40023f4:	10002726 	beq	r2,zero,4002494 <_fclose_r+0xc8>
 40023f8:	8080030f 	ldh	r2,12(r16)
 40023fc:	1000071e 	bne	r2,zero,400241c <_fclose_r+0x50>
 4002400:	0005883a 	mov	r2,zero
 4002404:	dfc00317 	ldw	ra,12(sp)
 4002408:	dc800217 	ldw	r18,8(sp)
 400240c:	dc400117 	ldw	r17,4(sp)
 4002410:	dc000017 	ldw	r16,0(sp)
 4002414:	dec00404 	addi	sp,sp,16
 4002418:	f800283a 	ret
 400241c:	800b883a 	mov	r5,r16
 4002420:	8809883a 	mov	r4,r17
 4002424:	40024d00 	call	40024d0 <__sflush_r>
 4002428:	1025883a 	mov	r18,r2
 400242c:	80800b17 	ldw	r2,44(r16)
 4002430:	10000426 	beq	r2,zero,4002444 <_fclose_r+0x78>
 4002434:	81400717 	ldw	r5,28(r16)
 4002438:	8809883a 	mov	r4,r17
 400243c:	103ee83a 	callr	r2
 4002440:	10001616 	blt	r2,zero,400249c <_fclose_r+0xd0>
 4002444:	8080030b 	ldhu	r2,12(r16)
 4002448:	1080200c 	andi	r2,r2,128
 400244c:	1000151e 	bne	r2,zero,40024a4 <_fclose_r+0xd8>
 4002450:	81400c17 	ldw	r5,48(r16)
 4002454:	28000526 	beq	r5,zero,400246c <_fclose_r+0xa0>
 4002458:	80801004 	addi	r2,r16,64
 400245c:	28800226 	beq	r5,r2,4002468 <_fclose_r+0x9c>
 4002460:	8809883a 	mov	r4,r17
 4002464:	400289c0 	call	400289c <_free_r>
 4002468:	80000c15 	stw	zero,48(r16)
 400246c:	81401117 	ldw	r5,68(r16)
 4002470:	28000326 	beq	r5,zero,4002480 <_fclose_r+0xb4>
 4002474:	8809883a 	mov	r4,r17
 4002478:	400289c0 	call	400289c <_free_r>
 400247c:	80001115 	stw	zero,68(r16)
 4002480:	40007900 	call	4000790 <__sfp_lock_acquire>
 4002484:	8000030d 	sth	zero,12(r16)
 4002488:	40007940 	call	4000794 <__sfp_lock_release>
 400248c:	9005883a 	mov	r2,r18
 4002490:	003fdc06 	br	4002404 <__alt_mem_onchip_memory+0xfbffa404>
 4002494:	40007800 	call	4000780 <__sinit>
 4002498:	003fd706 	br	40023f8 <__alt_mem_onchip_memory+0xfbffa3f8>
 400249c:	04bfffc4 	movi	r18,-1
 40024a0:	003fe806 	br	4002444 <__alt_mem_onchip_memory+0xfbffa444>
 40024a4:	81400417 	ldw	r5,16(r16)
 40024a8:	8809883a 	mov	r4,r17
 40024ac:	400289c0 	call	400289c <_free_r>
 40024b0:	003fe706 	br	4002450 <__alt_mem_onchip_memory+0xfbffa450>
 40024b4:	0005883a 	mov	r2,zero
 40024b8:	f800283a 	ret

040024bc <fclose>:
 40024bc:	00810034 	movhi	r2,1024
 40024c0:	109cae04 	addi	r2,r2,29368
 40024c4:	200b883a 	mov	r5,r4
 40024c8:	11000017 	ldw	r4,0(r2)
 40024cc:	40023cc1 	jmpi	40023cc <_fclose_r>

040024d0 <__sflush_r>:
 40024d0:	2880030b 	ldhu	r2,12(r5)
 40024d4:	defffb04 	addi	sp,sp,-20
 40024d8:	dcc00315 	stw	r19,12(sp)
 40024dc:	dc400115 	stw	r17,4(sp)
 40024e0:	dfc00415 	stw	ra,16(sp)
 40024e4:	dc800215 	stw	r18,8(sp)
 40024e8:	dc000015 	stw	r16,0(sp)
 40024ec:	10c0020c 	andi	r3,r2,8
 40024f0:	2823883a 	mov	r17,r5
 40024f4:	2027883a 	mov	r19,r4
 40024f8:	1800311e 	bne	r3,zero,40025c0 <__sflush_r+0xf0>
 40024fc:	28c00117 	ldw	r3,4(r5)
 4002500:	10820014 	ori	r2,r2,2048
 4002504:	2880030d 	sth	r2,12(r5)
 4002508:	00c04b0e 	bge	zero,r3,4002638 <__sflush_r+0x168>
 400250c:	8a000a17 	ldw	r8,40(r17)
 4002510:	40002326 	beq	r8,zero,40025a0 <__sflush_r+0xd0>
 4002514:	9c000017 	ldw	r16,0(r19)
 4002518:	10c4000c 	andi	r3,r2,4096
 400251c:	98000015 	stw	zero,0(r19)
 4002520:	18004826 	beq	r3,zero,4002644 <__sflush_r+0x174>
 4002524:	89801417 	ldw	r6,80(r17)
 4002528:	10c0010c 	andi	r3,r2,4
 400252c:	18000626 	beq	r3,zero,4002548 <__sflush_r+0x78>
 4002530:	88c00117 	ldw	r3,4(r17)
 4002534:	88800c17 	ldw	r2,48(r17)
 4002538:	30cdc83a 	sub	r6,r6,r3
 400253c:	10000226 	beq	r2,zero,4002548 <__sflush_r+0x78>
 4002540:	88800f17 	ldw	r2,60(r17)
 4002544:	308dc83a 	sub	r6,r6,r2
 4002548:	89400717 	ldw	r5,28(r17)
 400254c:	000f883a 	mov	r7,zero
 4002550:	9809883a 	mov	r4,r19
 4002554:	403ee83a 	callr	r8
 4002558:	00ffffc4 	movi	r3,-1
 400255c:	10c04426 	beq	r2,r3,4002670 <__sflush_r+0x1a0>
 4002560:	88c0030b 	ldhu	r3,12(r17)
 4002564:	89000417 	ldw	r4,16(r17)
 4002568:	88000115 	stw	zero,4(r17)
 400256c:	197dffcc 	andi	r5,r3,63487
 4002570:	8940030d 	sth	r5,12(r17)
 4002574:	89000015 	stw	r4,0(r17)
 4002578:	18c4000c 	andi	r3,r3,4096
 400257c:	18002c1e 	bne	r3,zero,4002630 <__sflush_r+0x160>
 4002580:	89400c17 	ldw	r5,48(r17)
 4002584:	9c000015 	stw	r16,0(r19)
 4002588:	28000526 	beq	r5,zero,40025a0 <__sflush_r+0xd0>
 400258c:	88801004 	addi	r2,r17,64
 4002590:	28800226 	beq	r5,r2,400259c <__sflush_r+0xcc>
 4002594:	9809883a 	mov	r4,r19
 4002598:	400289c0 	call	400289c <_free_r>
 400259c:	88000c15 	stw	zero,48(r17)
 40025a0:	0005883a 	mov	r2,zero
 40025a4:	dfc00417 	ldw	ra,16(sp)
 40025a8:	dcc00317 	ldw	r19,12(sp)
 40025ac:	dc800217 	ldw	r18,8(sp)
 40025b0:	dc400117 	ldw	r17,4(sp)
 40025b4:	dc000017 	ldw	r16,0(sp)
 40025b8:	dec00504 	addi	sp,sp,20
 40025bc:	f800283a 	ret
 40025c0:	2c800417 	ldw	r18,16(r5)
 40025c4:	903ff626 	beq	r18,zero,40025a0 <__alt_mem_onchip_memory+0xfbffa5a0>
 40025c8:	2c000017 	ldw	r16,0(r5)
 40025cc:	108000cc 	andi	r2,r2,3
 40025d0:	2c800015 	stw	r18,0(r5)
 40025d4:	84a1c83a 	sub	r16,r16,r18
 40025d8:	1000131e 	bne	r2,zero,4002628 <__sflush_r+0x158>
 40025dc:	28800517 	ldw	r2,20(r5)
 40025e0:	88800215 	stw	r2,8(r17)
 40025e4:	04000316 	blt	zero,r16,40025f4 <__sflush_r+0x124>
 40025e8:	003fed06 	br	40025a0 <__alt_mem_onchip_memory+0xfbffa5a0>
 40025ec:	90a5883a 	add	r18,r18,r2
 40025f0:	043feb0e 	bge	zero,r16,40025a0 <__alt_mem_onchip_memory+0xfbffa5a0>
 40025f4:	88800917 	ldw	r2,36(r17)
 40025f8:	89400717 	ldw	r5,28(r17)
 40025fc:	800f883a 	mov	r7,r16
 4002600:	900d883a 	mov	r6,r18
 4002604:	9809883a 	mov	r4,r19
 4002608:	103ee83a 	callr	r2
 400260c:	80a1c83a 	sub	r16,r16,r2
 4002610:	00bff616 	blt	zero,r2,40025ec <__alt_mem_onchip_memory+0xfbffa5ec>
 4002614:	88c0030b 	ldhu	r3,12(r17)
 4002618:	00bfffc4 	movi	r2,-1
 400261c:	18c01014 	ori	r3,r3,64
 4002620:	88c0030d 	sth	r3,12(r17)
 4002624:	003fdf06 	br	40025a4 <__alt_mem_onchip_memory+0xfbffa5a4>
 4002628:	0005883a 	mov	r2,zero
 400262c:	003fec06 	br	40025e0 <__alt_mem_onchip_memory+0xfbffa5e0>
 4002630:	88801415 	stw	r2,80(r17)
 4002634:	003fd206 	br	4002580 <__alt_mem_onchip_memory+0xfbffa580>
 4002638:	28c00f17 	ldw	r3,60(r5)
 400263c:	00ffb316 	blt	zero,r3,400250c <__alt_mem_onchip_memory+0xfbffa50c>
 4002640:	003fd706 	br	40025a0 <__alt_mem_onchip_memory+0xfbffa5a0>
 4002644:	89400717 	ldw	r5,28(r17)
 4002648:	000d883a 	mov	r6,zero
 400264c:	01c00044 	movi	r7,1
 4002650:	9809883a 	mov	r4,r19
 4002654:	403ee83a 	callr	r8
 4002658:	100d883a 	mov	r6,r2
 400265c:	00bfffc4 	movi	r2,-1
 4002660:	30801426 	beq	r6,r2,40026b4 <__sflush_r+0x1e4>
 4002664:	8880030b 	ldhu	r2,12(r17)
 4002668:	8a000a17 	ldw	r8,40(r17)
 400266c:	003fae06 	br	4002528 <__alt_mem_onchip_memory+0xfbffa528>
 4002670:	98c00017 	ldw	r3,0(r19)
 4002674:	183fba26 	beq	r3,zero,4002560 <__alt_mem_onchip_memory+0xfbffa560>
 4002678:	01000744 	movi	r4,29
 400267c:	19000626 	beq	r3,r4,4002698 <__sflush_r+0x1c8>
 4002680:	01000584 	movi	r4,22
 4002684:	19000426 	beq	r3,r4,4002698 <__sflush_r+0x1c8>
 4002688:	88c0030b 	ldhu	r3,12(r17)
 400268c:	18c01014 	ori	r3,r3,64
 4002690:	88c0030d 	sth	r3,12(r17)
 4002694:	003fc306 	br	40025a4 <__alt_mem_onchip_memory+0xfbffa5a4>
 4002698:	8880030b 	ldhu	r2,12(r17)
 400269c:	88c00417 	ldw	r3,16(r17)
 40026a0:	88000115 	stw	zero,4(r17)
 40026a4:	10bdffcc 	andi	r2,r2,63487
 40026a8:	8880030d 	sth	r2,12(r17)
 40026ac:	88c00015 	stw	r3,0(r17)
 40026b0:	003fb306 	br	4002580 <__alt_mem_onchip_memory+0xfbffa580>
 40026b4:	98800017 	ldw	r2,0(r19)
 40026b8:	103fea26 	beq	r2,zero,4002664 <__alt_mem_onchip_memory+0xfbffa664>
 40026bc:	00c00744 	movi	r3,29
 40026c0:	10c00226 	beq	r2,r3,40026cc <__sflush_r+0x1fc>
 40026c4:	00c00584 	movi	r3,22
 40026c8:	10c0031e 	bne	r2,r3,40026d8 <__sflush_r+0x208>
 40026cc:	9c000015 	stw	r16,0(r19)
 40026d0:	0005883a 	mov	r2,zero
 40026d4:	003fb306 	br	40025a4 <__alt_mem_onchip_memory+0xfbffa5a4>
 40026d8:	88c0030b 	ldhu	r3,12(r17)
 40026dc:	3005883a 	mov	r2,r6
 40026e0:	18c01014 	ori	r3,r3,64
 40026e4:	88c0030d 	sth	r3,12(r17)
 40026e8:	003fae06 	br	40025a4 <__alt_mem_onchip_memory+0xfbffa5a4>

040026ec <_fflush_r>:
 40026ec:	defffd04 	addi	sp,sp,-12
 40026f0:	dc000115 	stw	r16,4(sp)
 40026f4:	dfc00215 	stw	ra,8(sp)
 40026f8:	2021883a 	mov	r16,r4
 40026fc:	20000226 	beq	r4,zero,4002708 <_fflush_r+0x1c>
 4002700:	20800e17 	ldw	r2,56(r4)
 4002704:	10000c26 	beq	r2,zero,4002738 <_fflush_r+0x4c>
 4002708:	2880030f 	ldh	r2,12(r5)
 400270c:	1000051e 	bne	r2,zero,4002724 <_fflush_r+0x38>
 4002710:	0005883a 	mov	r2,zero
 4002714:	dfc00217 	ldw	ra,8(sp)
 4002718:	dc000117 	ldw	r16,4(sp)
 400271c:	dec00304 	addi	sp,sp,12
 4002720:	f800283a 	ret
 4002724:	8009883a 	mov	r4,r16
 4002728:	dfc00217 	ldw	ra,8(sp)
 400272c:	dc000117 	ldw	r16,4(sp)
 4002730:	dec00304 	addi	sp,sp,12
 4002734:	40024d01 	jmpi	40024d0 <__sflush_r>
 4002738:	d9400015 	stw	r5,0(sp)
 400273c:	40007800 	call	4000780 <__sinit>
 4002740:	d9400017 	ldw	r5,0(sp)
 4002744:	003ff006 	br	4002708 <__alt_mem_onchip_memory+0xfbffa708>

04002748 <fflush>:
 4002748:	20000526 	beq	r4,zero,4002760 <fflush+0x18>
 400274c:	00810034 	movhi	r2,1024
 4002750:	109cae04 	addi	r2,r2,29368
 4002754:	200b883a 	mov	r5,r4
 4002758:	11000017 	ldw	r4,0(r2)
 400275c:	40026ec1 	jmpi	40026ec <_fflush_r>
 4002760:	00810034 	movhi	r2,1024
 4002764:	109cad04 	addi	r2,r2,29364
 4002768:	11000017 	ldw	r4,0(r2)
 400276c:	01410034 	movhi	r5,1024
 4002770:	2949bb04 	addi	r5,r5,9964
 4002774:	4000d501 	jmpi	4000d50 <_fwalk_reent>

04002778 <_malloc_trim_r>:
 4002778:	defffb04 	addi	sp,sp,-20
 400277c:	dcc00315 	stw	r19,12(sp)
 4002780:	04c10034 	movhi	r19,1024
 4002784:	dc800215 	stw	r18,8(sp)
 4002788:	dc400115 	stw	r17,4(sp)
 400278c:	dc000015 	stw	r16,0(sp)
 4002790:	dfc00415 	stw	ra,16(sp)
 4002794:	2821883a 	mov	r16,r5
 4002798:	9cd72904 	addi	r19,r19,23716
 400279c:	2025883a 	mov	r18,r4
 40027a0:	40036080 	call	4003608 <__malloc_lock>
 40027a4:	98800217 	ldw	r2,8(r19)
 40027a8:	14400117 	ldw	r17,4(r2)
 40027ac:	00bfff04 	movi	r2,-4
 40027b0:	88a2703a 	and	r17,r17,r2
 40027b4:	8c21c83a 	sub	r16,r17,r16
 40027b8:	8403fbc4 	addi	r16,r16,4079
 40027bc:	8020d33a 	srli	r16,r16,12
 40027c0:	0083ffc4 	movi	r2,4095
 40027c4:	843fffc4 	addi	r16,r16,-1
 40027c8:	8020933a 	slli	r16,r16,12
 40027cc:	1400060e 	bge	r2,r16,40027e8 <_malloc_trim_r+0x70>
 40027d0:	000b883a 	mov	r5,zero
 40027d4:	9009883a 	mov	r4,r18
 40027d8:	40020340 	call	4002034 <_sbrk_r>
 40027dc:	98c00217 	ldw	r3,8(r19)
 40027e0:	1c47883a 	add	r3,r3,r17
 40027e4:	10c00a26 	beq	r2,r3,4002810 <_malloc_trim_r+0x98>
 40027e8:	9009883a 	mov	r4,r18
 40027ec:	400362c0 	call	400362c <__malloc_unlock>
 40027f0:	0005883a 	mov	r2,zero
 40027f4:	dfc00417 	ldw	ra,16(sp)
 40027f8:	dcc00317 	ldw	r19,12(sp)
 40027fc:	dc800217 	ldw	r18,8(sp)
 4002800:	dc400117 	ldw	r17,4(sp)
 4002804:	dc000017 	ldw	r16,0(sp)
 4002808:	dec00504 	addi	sp,sp,20
 400280c:	f800283a 	ret
 4002810:	040bc83a 	sub	r5,zero,r16
 4002814:	9009883a 	mov	r4,r18
 4002818:	40020340 	call	4002034 <_sbrk_r>
 400281c:	00ffffc4 	movi	r3,-1
 4002820:	10c00d26 	beq	r2,r3,4002858 <_malloc_trim_r+0xe0>
 4002824:	00c10074 	movhi	r3,1025
 4002828:	18e36104 	addi	r3,r3,-29308
 400282c:	18800017 	ldw	r2,0(r3)
 4002830:	99000217 	ldw	r4,8(r19)
 4002834:	8c23c83a 	sub	r17,r17,r16
 4002838:	8c400054 	ori	r17,r17,1
 400283c:	1421c83a 	sub	r16,r2,r16
 4002840:	24400115 	stw	r17,4(r4)
 4002844:	9009883a 	mov	r4,r18
 4002848:	1c000015 	stw	r16,0(r3)
 400284c:	400362c0 	call	400362c <__malloc_unlock>
 4002850:	00800044 	movi	r2,1
 4002854:	003fe706 	br	40027f4 <__alt_mem_onchip_memory+0xfbffa7f4>
 4002858:	000b883a 	mov	r5,zero
 400285c:	9009883a 	mov	r4,r18
 4002860:	40020340 	call	4002034 <_sbrk_r>
 4002864:	99000217 	ldw	r4,8(r19)
 4002868:	014003c4 	movi	r5,15
 400286c:	1107c83a 	sub	r3,r2,r4
 4002870:	28ffdd0e 	bge	r5,r3,40027e8 <__alt_mem_onchip_memory+0xfbffa7e8>
 4002874:	01410034 	movhi	r5,1024
 4002878:	295caf04 	addi	r5,r5,29372
 400287c:	29400017 	ldw	r5,0(r5)
 4002880:	18c00054 	ori	r3,r3,1
 4002884:	20c00115 	stw	r3,4(r4)
 4002888:	00c10074 	movhi	r3,1025
 400288c:	1145c83a 	sub	r2,r2,r5
 4002890:	18e36104 	addi	r3,r3,-29308
 4002894:	18800015 	stw	r2,0(r3)
 4002898:	003fd306 	br	40027e8 <__alt_mem_onchip_memory+0xfbffa7e8>

0400289c <_free_r>:
 400289c:	28004126 	beq	r5,zero,40029a4 <_free_r+0x108>
 40028a0:	defffd04 	addi	sp,sp,-12
 40028a4:	dc400115 	stw	r17,4(sp)
 40028a8:	dc000015 	stw	r16,0(sp)
 40028ac:	2023883a 	mov	r17,r4
 40028b0:	2821883a 	mov	r16,r5
 40028b4:	dfc00215 	stw	ra,8(sp)
 40028b8:	40036080 	call	4003608 <__malloc_lock>
 40028bc:	81ffff17 	ldw	r7,-4(r16)
 40028c0:	00bfff84 	movi	r2,-2
 40028c4:	01010034 	movhi	r4,1024
 40028c8:	81bffe04 	addi	r6,r16,-8
 40028cc:	3884703a 	and	r2,r7,r2
 40028d0:	21172904 	addi	r4,r4,23716
 40028d4:	308b883a 	add	r5,r6,r2
 40028d8:	2a400117 	ldw	r9,4(r5)
 40028dc:	22000217 	ldw	r8,8(r4)
 40028e0:	00ffff04 	movi	r3,-4
 40028e4:	48c6703a 	and	r3,r9,r3
 40028e8:	2a005726 	beq	r5,r8,4002a48 <_free_r+0x1ac>
 40028ec:	28c00115 	stw	r3,4(r5)
 40028f0:	39c0004c 	andi	r7,r7,1
 40028f4:	3800091e 	bne	r7,zero,400291c <_free_r+0x80>
 40028f8:	823ffe17 	ldw	r8,-8(r16)
 40028fc:	22400204 	addi	r9,r4,8
 4002900:	320dc83a 	sub	r6,r6,r8
 4002904:	31c00217 	ldw	r7,8(r6)
 4002908:	1205883a 	add	r2,r2,r8
 400290c:	3a406526 	beq	r7,r9,4002aa4 <_free_r+0x208>
 4002910:	32000317 	ldw	r8,12(r6)
 4002914:	3a000315 	stw	r8,12(r7)
 4002918:	41c00215 	stw	r7,8(r8)
 400291c:	28cf883a 	add	r7,r5,r3
 4002920:	39c00117 	ldw	r7,4(r7)
 4002924:	39c0004c 	andi	r7,r7,1
 4002928:	38003a26 	beq	r7,zero,4002a14 <_free_r+0x178>
 400292c:	10c00054 	ori	r3,r2,1
 4002930:	30c00115 	stw	r3,4(r6)
 4002934:	3087883a 	add	r3,r6,r2
 4002938:	18800015 	stw	r2,0(r3)
 400293c:	00c07fc4 	movi	r3,511
 4002940:	18801936 	bltu	r3,r2,40029a8 <_free_r+0x10c>
 4002944:	1004d0fa 	srli	r2,r2,3
 4002948:	01c00044 	movi	r7,1
 400294c:	21400117 	ldw	r5,4(r4)
 4002950:	10c00044 	addi	r3,r2,1
 4002954:	18c7883a 	add	r3,r3,r3
 4002958:	1005d0ba 	srai	r2,r2,2
 400295c:	18c7883a 	add	r3,r3,r3
 4002960:	18c7883a 	add	r3,r3,r3
 4002964:	1907883a 	add	r3,r3,r4
 4002968:	3884983a 	sll	r2,r7,r2
 400296c:	19c00017 	ldw	r7,0(r3)
 4002970:	1a3ffe04 	addi	r8,r3,-8
 4002974:	1144b03a 	or	r2,r2,r5
 4002978:	32000315 	stw	r8,12(r6)
 400297c:	31c00215 	stw	r7,8(r6)
 4002980:	20800115 	stw	r2,4(r4)
 4002984:	19800015 	stw	r6,0(r3)
 4002988:	39800315 	stw	r6,12(r7)
 400298c:	8809883a 	mov	r4,r17
 4002990:	dfc00217 	ldw	ra,8(sp)
 4002994:	dc400117 	ldw	r17,4(sp)
 4002998:	dc000017 	ldw	r16,0(sp)
 400299c:	dec00304 	addi	sp,sp,12
 40029a0:	400362c1 	jmpi	400362c <__malloc_unlock>
 40029a4:	f800283a 	ret
 40029a8:	100ad27a 	srli	r5,r2,9
 40029ac:	00c00104 	movi	r3,4
 40029b0:	19404a36 	bltu	r3,r5,4002adc <_free_r+0x240>
 40029b4:	100ad1ba 	srli	r5,r2,6
 40029b8:	28c00e44 	addi	r3,r5,57
 40029bc:	18c7883a 	add	r3,r3,r3
 40029c0:	29400e04 	addi	r5,r5,56
 40029c4:	18c7883a 	add	r3,r3,r3
 40029c8:	18c7883a 	add	r3,r3,r3
 40029cc:	1909883a 	add	r4,r3,r4
 40029d0:	20c00017 	ldw	r3,0(r4)
 40029d4:	01c10034 	movhi	r7,1024
 40029d8:	213ffe04 	addi	r4,r4,-8
 40029dc:	39d72904 	addi	r7,r7,23716
 40029e0:	20c04426 	beq	r4,r3,4002af4 <_free_r+0x258>
 40029e4:	01ffff04 	movi	r7,-4
 40029e8:	19400117 	ldw	r5,4(r3)
 40029ec:	29ca703a 	and	r5,r5,r7
 40029f0:	1140022e 	bgeu	r2,r5,40029fc <_free_r+0x160>
 40029f4:	18c00217 	ldw	r3,8(r3)
 40029f8:	20fffb1e 	bne	r4,r3,40029e8 <__alt_mem_onchip_memory+0xfbffa9e8>
 40029fc:	19000317 	ldw	r4,12(r3)
 4002a00:	31000315 	stw	r4,12(r6)
 4002a04:	30c00215 	stw	r3,8(r6)
 4002a08:	21800215 	stw	r6,8(r4)
 4002a0c:	19800315 	stw	r6,12(r3)
 4002a10:	003fde06 	br	400298c <__alt_mem_onchip_memory+0xfbffa98c>
 4002a14:	29c00217 	ldw	r7,8(r5)
 4002a18:	10c5883a 	add	r2,r2,r3
 4002a1c:	00c10034 	movhi	r3,1024
 4002a20:	18d72b04 	addi	r3,r3,23724
 4002a24:	38c03b26 	beq	r7,r3,4002b14 <_free_r+0x278>
 4002a28:	2a000317 	ldw	r8,12(r5)
 4002a2c:	11400054 	ori	r5,r2,1
 4002a30:	3087883a 	add	r3,r6,r2
 4002a34:	3a000315 	stw	r8,12(r7)
 4002a38:	41c00215 	stw	r7,8(r8)
 4002a3c:	31400115 	stw	r5,4(r6)
 4002a40:	18800015 	stw	r2,0(r3)
 4002a44:	003fbd06 	br	400293c <__alt_mem_onchip_memory+0xfbffa93c>
 4002a48:	39c0004c 	andi	r7,r7,1
 4002a4c:	10c5883a 	add	r2,r2,r3
 4002a50:	3800071e 	bne	r7,zero,4002a70 <_free_r+0x1d4>
 4002a54:	81fffe17 	ldw	r7,-8(r16)
 4002a58:	31cdc83a 	sub	r6,r6,r7
 4002a5c:	30c00317 	ldw	r3,12(r6)
 4002a60:	31400217 	ldw	r5,8(r6)
 4002a64:	11c5883a 	add	r2,r2,r7
 4002a68:	28c00315 	stw	r3,12(r5)
 4002a6c:	19400215 	stw	r5,8(r3)
 4002a70:	10c00054 	ori	r3,r2,1
 4002a74:	30c00115 	stw	r3,4(r6)
 4002a78:	00c10034 	movhi	r3,1024
 4002a7c:	18dcb004 	addi	r3,r3,29376
 4002a80:	18c00017 	ldw	r3,0(r3)
 4002a84:	21800215 	stw	r6,8(r4)
 4002a88:	10ffc036 	bltu	r2,r3,400298c <__alt_mem_onchip_memory+0xfbffa98c>
 4002a8c:	00810074 	movhi	r2,1025
 4002a90:	10a35804 	addi	r2,r2,-29344
 4002a94:	11400017 	ldw	r5,0(r2)
 4002a98:	8809883a 	mov	r4,r17
 4002a9c:	40027780 	call	4002778 <_malloc_trim_r>
 4002aa0:	003fba06 	br	400298c <__alt_mem_onchip_memory+0xfbffa98c>
 4002aa4:	28c9883a 	add	r4,r5,r3
 4002aa8:	21000117 	ldw	r4,4(r4)
 4002aac:	2100004c 	andi	r4,r4,1
 4002ab0:	2000391e 	bne	r4,zero,4002b98 <_free_r+0x2fc>
 4002ab4:	29c00217 	ldw	r7,8(r5)
 4002ab8:	29000317 	ldw	r4,12(r5)
 4002abc:	1885883a 	add	r2,r3,r2
 4002ac0:	10c00054 	ori	r3,r2,1
 4002ac4:	39000315 	stw	r4,12(r7)
 4002ac8:	21c00215 	stw	r7,8(r4)
 4002acc:	30c00115 	stw	r3,4(r6)
 4002ad0:	308d883a 	add	r6,r6,r2
 4002ad4:	30800015 	stw	r2,0(r6)
 4002ad8:	003fac06 	br	400298c <__alt_mem_onchip_memory+0xfbffa98c>
 4002adc:	00c00504 	movi	r3,20
 4002ae0:	19401536 	bltu	r3,r5,4002b38 <_free_r+0x29c>
 4002ae4:	28c01704 	addi	r3,r5,92
 4002ae8:	18c7883a 	add	r3,r3,r3
 4002aec:	294016c4 	addi	r5,r5,91
 4002af0:	003fb406 	br	40029c4 <__alt_mem_onchip_memory+0xfbffa9c4>
 4002af4:	280bd0ba 	srai	r5,r5,2
 4002af8:	00c00044 	movi	r3,1
 4002afc:	38800117 	ldw	r2,4(r7)
 4002b00:	194a983a 	sll	r5,r3,r5
 4002b04:	2007883a 	mov	r3,r4
 4002b08:	2884b03a 	or	r2,r5,r2
 4002b0c:	38800115 	stw	r2,4(r7)
 4002b10:	003fbb06 	br	4002a00 <__alt_mem_onchip_memory+0xfbffaa00>
 4002b14:	21800515 	stw	r6,20(r4)
 4002b18:	21800415 	stw	r6,16(r4)
 4002b1c:	10c00054 	ori	r3,r2,1
 4002b20:	31c00315 	stw	r7,12(r6)
 4002b24:	31c00215 	stw	r7,8(r6)
 4002b28:	30c00115 	stw	r3,4(r6)
 4002b2c:	308d883a 	add	r6,r6,r2
 4002b30:	30800015 	stw	r2,0(r6)
 4002b34:	003f9506 	br	400298c <__alt_mem_onchip_memory+0xfbffa98c>
 4002b38:	00c01504 	movi	r3,84
 4002b3c:	19400536 	bltu	r3,r5,4002b54 <_free_r+0x2b8>
 4002b40:	100ad33a 	srli	r5,r2,12
 4002b44:	28c01bc4 	addi	r3,r5,111
 4002b48:	18c7883a 	add	r3,r3,r3
 4002b4c:	29401b84 	addi	r5,r5,110
 4002b50:	003f9c06 	br	40029c4 <__alt_mem_onchip_memory+0xfbffa9c4>
 4002b54:	00c05504 	movi	r3,340
 4002b58:	19400536 	bltu	r3,r5,4002b70 <_free_r+0x2d4>
 4002b5c:	100ad3fa 	srli	r5,r2,15
 4002b60:	28c01e04 	addi	r3,r5,120
 4002b64:	18c7883a 	add	r3,r3,r3
 4002b68:	29401dc4 	addi	r5,r5,119
 4002b6c:	003f9506 	br	40029c4 <__alt_mem_onchip_memory+0xfbffa9c4>
 4002b70:	00c15504 	movi	r3,1364
 4002b74:	19400536 	bltu	r3,r5,4002b8c <_free_r+0x2f0>
 4002b78:	100ad4ba 	srli	r5,r2,18
 4002b7c:	28c01f44 	addi	r3,r5,125
 4002b80:	18c7883a 	add	r3,r3,r3
 4002b84:	29401f04 	addi	r5,r5,124
 4002b88:	003f8e06 	br	40029c4 <__alt_mem_onchip_memory+0xfbffa9c4>
 4002b8c:	00c03f84 	movi	r3,254
 4002b90:	01401f84 	movi	r5,126
 4002b94:	003f8b06 	br	40029c4 <__alt_mem_onchip_memory+0xfbffa9c4>
 4002b98:	10c00054 	ori	r3,r2,1
 4002b9c:	30c00115 	stw	r3,4(r6)
 4002ba0:	308d883a 	add	r6,r6,r2
 4002ba4:	30800015 	stw	r2,0(r6)
 4002ba8:	003f7806 	br	400298c <__alt_mem_onchip_memory+0xfbffa98c>

04002bac <_lseek_r>:
 4002bac:	defffd04 	addi	sp,sp,-12
 4002bb0:	2805883a 	mov	r2,r5
 4002bb4:	dc000015 	stw	r16,0(sp)
 4002bb8:	04010074 	movhi	r16,1025
 4002bbc:	dc400115 	stw	r17,4(sp)
 4002bc0:	300b883a 	mov	r5,r6
 4002bc4:	84235904 	addi	r16,r16,-29340
 4002bc8:	2023883a 	mov	r17,r4
 4002bcc:	380d883a 	mov	r6,r7
 4002bd0:	1009883a 	mov	r4,r2
 4002bd4:	dfc00215 	stw	ra,8(sp)
 4002bd8:	80000015 	stw	zero,0(r16)
 4002bdc:	40034b80 	call	40034b8 <lseek>
 4002be0:	00ffffc4 	movi	r3,-1
 4002be4:	10c00526 	beq	r2,r3,4002bfc <_lseek_r+0x50>
 4002be8:	dfc00217 	ldw	ra,8(sp)
 4002bec:	dc400117 	ldw	r17,4(sp)
 4002bf0:	dc000017 	ldw	r16,0(sp)
 4002bf4:	dec00304 	addi	sp,sp,12
 4002bf8:	f800283a 	ret
 4002bfc:	80c00017 	ldw	r3,0(r16)
 4002c00:	183ff926 	beq	r3,zero,4002be8 <__alt_mem_onchip_memory+0xfbffabe8>
 4002c04:	88c00015 	stw	r3,0(r17)
 4002c08:	003ff706 	br	4002be8 <__alt_mem_onchip_memory+0xfbffabe8>

04002c0c <__smakebuf_r>:
 4002c0c:	2880030b 	ldhu	r2,12(r5)
 4002c10:	10c0008c 	andi	r3,r2,2
 4002c14:	1800411e 	bne	r3,zero,4002d1c <__smakebuf_r+0x110>
 4002c18:	deffec04 	addi	sp,sp,-80
 4002c1c:	dc000f15 	stw	r16,60(sp)
 4002c20:	2821883a 	mov	r16,r5
 4002c24:	2940038f 	ldh	r5,14(r5)
 4002c28:	dc401015 	stw	r17,64(sp)
 4002c2c:	dfc01315 	stw	ra,76(sp)
 4002c30:	dcc01215 	stw	r19,72(sp)
 4002c34:	dc801115 	stw	r18,68(sp)
 4002c38:	2023883a 	mov	r17,r4
 4002c3c:	28001c16 	blt	r5,zero,4002cb0 <__smakebuf_r+0xa4>
 4002c40:	d80d883a 	mov	r6,sp
 4002c44:	4002e280 	call	4002e28 <_fstat_r>
 4002c48:	10001816 	blt	r2,zero,4002cac <__smakebuf_r+0xa0>
 4002c4c:	d8800117 	ldw	r2,4(sp)
 4002c50:	00e00014 	movui	r3,32768
 4002c54:	10bc000c 	andi	r2,r2,61440
 4002c58:	14c80020 	cmpeqi	r19,r2,8192
 4002c5c:	10c03726 	beq	r2,r3,4002d3c <__smakebuf_r+0x130>
 4002c60:	80c0030b 	ldhu	r3,12(r16)
 4002c64:	18c20014 	ori	r3,r3,2048
 4002c68:	80c0030d 	sth	r3,12(r16)
 4002c6c:	00c80004 	movi	r3,8192
 4002c70:	10c0521e 	bne	r2,r3,4002dbc <__smakebuf_r+0x1b0>
 4002c74:	8140038f 	ldh	r5,14(r16)
 4002c78:	8809883a 	mov	r4,r17
 4002c7c:	4002e840 	call	4002e84 <_isatty_r>
 4002c80:	10004c26 	beq	r2,zero,4002db4 <__smakebuf_r+0x1a8>
 4002c84:	8080030b 	ldhu	r2,12(r16)
 4002c88:	80c010c4 	addi	r3,r16,67
 4002c8c:	80c00015 	stw	r3,0(r16)
 4002c90:	10800054 	ori	r2,r2,1
 4002c94:	8080030d 	sth	r2,12(r16)
 4002c98:	00800044 	movi	r2,1
 4002c9c:	80c00415 	stw	r3,16(r16)
 4002ca0:	80800515 	stw	r2,20(r16)
 4002ca4:	04810004 	movi	r18,1024
 4002ca8:	00000706 	br	4002cc8 <__smakebuf_r+0xbc>
 4002cac:	8080030b 	ldhu	r2,12(r16)
 4002cb0:	10c0200c 	andi	r3,r2,128
 4002cb4:	18001f1e 	bne	r3,zero,4002d34 <__smakebuf_r+0x128>
 4002cb8:	04810004 	movi	r18,1024
 4002cbc:	10820014 	ori	r2,r2,2048
 4002cc0:	8080030d 	sth	r2,12(r16)
 4002cc4:	0027883a 	mov	r19,zero
 4002cc8:	900b883a 	mov	r5,r18
 4002ccc:	8809883a 	mov	r4,r17
 4002cd0:	4000e140 	call	4000e14 <_malloc_r>
 4002cd4:	10002c26 	beq	r2,zero,4002d88 <__smakebuf_r+0x17c>
 4002cd8:	80c0030b 	ldhu	r3,12(r16)
 4002cdc:	01010034 	movhi	r4,1024
 4002ce0:	21010e04 	addi	r4,r4,1080
 4002ce4:	89000f15 	stw	r4,60(r17)
 4002ce8:	18c02014 	ori	r3,r3,128
 4002cec:	80c0030d 	sth	r3,12(r16)
 4002cf0:	80800015 	stw	r2,0(r16)
 4002cf4:	80800415 	stw	r2,16(r16)
 4002cf8:	84800515 	stw	r18,20(r16)
 4002cfc:	98001a1e 	bne	r19,zero,4002d68 <__smakebuf_r+0x15c>
 4002d00:	dfc01317 	ldw	ra,76(sp)
 4002d04:	dcc01217 	ldw	r19,72(sp)
 4002d08:	dc801117 	ldw	r18,68(sp)
 4002d0c:	dc401017 	ldw	r17,64(sp)
 4002d10:	dc000f17 	ldw	r16,60(sp)
 4002d14:	dec01404 	addi	sp,sp,80
 4002d18:	f800283a 	ret
 4002d1c:	288010c4 	addi	r2,r5,67
 4002d20:	28800015 	stw	r2,0(r5)
 4002d24:	28800415 	stw	r2,16(r5)
 4002d28:	00800044 	movi	r2,1
 4002d2c:	28800515 	stw	r2,20(r5)
 4002d30:	f800283a 	ret
 4002d34:	04801004 	movi	r18,64
 4002d38:	003fe006 	br	4002cbc <__alt_mem_onchip_memory+0xfbffacbc>
 4002d3c:	81000a17 	ldw	r4,40(r16)
 4002d40:	00c10034 	movhi	r3,1024
 4002d44:	18c85804 	addi	r3,r3,8544
 4002d48:	20ffc51e 	bne	r4,r3,4002c60 <__alt_mem_onchip_memory+0xfbffac60>
 4002d4c:	8080030b 	ldhu	r2,12(r16)
 4002d50:	04810004 	movi	r18,1024
 4002d54:	84801315 	stw	r18,76(r16)
 4002d58:	1484b03a 	or	r2,r2,r18
 4002d5c:	8080030d 	sth	r2,12(r16)
 4002d60:	0027883a 	mov	r19,zero
 4002d64:	003fd806 	br	4002cc8 <__alt_mem_onchip_memory+0xfbffacc8>
 4002d68:	8140038f 	ldh	r5,14(r16)
 4002d6c:	8809883a 	mov	r4,r17
 4002d70:	4002e840 	call	4002e84 <_isatty_r>
 4002d74:	103fe226 	beq	r2,zero,4002d00 <__alt_mem_onchip_memory+0xfbffad00>
 4002d78:	8080030b 	ldhu	r2,12(r16)
 4002d7c:	10800054 	ori	r2,r2,1
 4002d80:	8080030d 	sth	r2,12(r16)
 4002d84:	003fde06 	br	4002d00 <__alt_mem_onchip_memory+0xfbffad00>
 4002d88:	8080030b 	ldhu	r2,12(r16)
 4002d8c:	10c0800c 	andi	r3,r2,512
 4002d90:	183fdb1e 	bne	r3,zero,4002d00 <__alt_mem_onchip_memory+0xfbffad00>
 4002d94:	10800094 	ori	r2,r2,2
 4002d98:	80c010c4 	addi	r3,r16,67
 4002d9c:	8080030d 	sth	r2,12(r16)
 4002da0:	00800044 	movi	r2,1
 4002da4:	80c00015 	stw	r3,0(r16)
 4002da8:	80c00415 	stw	r3,16(r16)
 4002dac:	80800515 	stw	r2,20(r16)
 4002db0:	003fd306 	br	4002d00 <__alt_mem_onchip_memory+0xfbffad00>
 4002db4:	04810004 	movi	r18,1024
 4002db8:	003fc306 	br	4002cc8 <__alt_mem_onchip_memory+0xfbffacc8>
 4002dbc:	0027883a 	mov	r19,zero
 4002dc0:	04810004 	movi	r18,1024
 4002dc4:	003fc006 	br	4002cc8 <__alt_mem_onchip_memory+0xfbffacc8>

04002dc8 <_read_r>:
 4002dc8:	defffd04 	addi	sp,sp,-12
 4002dcc:	2805883a 	mov	r2,r5
 4002dd0:	dc000015 	stw	r16,0(sp)
 4002dd4:	04010074 	movhi	r16,1025
 4002dd8:	dc400115 	stw	r17,4(sp)
 4002ddc:	300b883a 	mov	r5,r6
 4002de0:	84235904 	addi	r16,r16,-29340
 4002de4:	2023883a 	mov	r17,r4
 4002de8:	380d883a 	mov	r6,r7
 4002dec:	1009883a 	mov	r4,r2
 4002df0:	dfc00215 	stw	ra,8(sp)
 4002df4:	80000015 	stw	zero,0(r16)
 4002df8:	400368c0 	call	400368c <read>
 4002dfc:	00ffffc4 	movi	r3,-1
 4002e00:	10c00526 	beq	r2,r3,4002e18 <_read_r+0x50>
 4002e04:	dfc00217 	ldw	ra,8(sp)
 4002e08:	dc400117 	ldw	r17,4(sp)
 4002e0c:	dc000017 	ldw	r16,0(sp)
 4002e10:	dec00304 	addi	sp,sp,12
 4002e14:	f800283a 	ret
 4002e18:	80c00017 	ldw	r3,0(r16)
 4002e1c:	183ff926 	beq	r3,zero,4002e04 <__alt_mem_onchip_memory+0xfbffae04>
 4002e20:	88c00015 	stw	r3,0(r17)
 4002e24:	003ff706 	br	4002e04 <__alt_mem_onchip_memory+0xfbffae04>

04002e28 <_fstat_r>:
 4002e28:	defffd04 	addi	sp,sp,-12
 4002e2c:	2805883a 	mov	r2,r5
 4002e30:	dc000015 	stw	r16,0(sp)
 4002e34:	04010074 	movhi	r16,1025
 4002e38:	dc400115 	stw	r17,4(sp)
 4002e3c:	84235904 	addi	r16,r16,-29340
 4002e40:	2023883a 	mov	r17,r4
 4002e44:	300b883a 	mov	r5,r6
 4002e48:	1009883a 	mov	r4,r2
 4002e4c:	dfc00215 	stw	ra,8(sp)
 4002e50:	80000015 	stw	zero,0(r16)
 4002e54:	40032000 	call	4003200 <fstat>
 4002e58:	00ffffc4 	movi	r3,-1
 4002e5c:	10c00526 	beq	r2,r3,4002e74 <_fstat_r+0x4c>
 4002e60:	dfc00217 	ldw	ra,8(sp)
 4002e64:	dc400117 	ldw	r17,4(sp)
 4002e68:	dc000017 	ldw	r16,0(sp)
 4002e6c:	dec00304 	addi	sp,sp,12
 4002e70:	f800283a 	ret
 4002e74:	80c00017 	ldw	r3,0(r16)
 4002e78:	183ff926 	beq	r3,zero,4002e60 <__alt_mem_onchip_memory+0xfbffae60>
 4002e7c:	88c00015 	stw	r3,0(r17)
 4002e80:	003ff706 	br	4002e60 <__alt_mem_onchip_memory+0xfbffae60>

04002e84 <_isatty_r>:
 4002e84:	defffd04 	addi	sp,sp,-12
 4002e88:	dc000015 	stw	r16,0(sp)
 4002e8c:	04010074 	movhi	r16,1025
 4002e90:	dc400115 	stw	r17,4(sp)
 4002e94:	84235904 	addi	r16,r16,-29340
 4002e98:	2023883a 	mov	r17,r4
 4002e9c:	2809883a 	mov	r4,r5
 4002ea0:	dfc00215 	stw	ra,8(sp)
 4002ea4:	80000015 	stw	zero,0(r16)
 4002ea8:	40032ec0 	call	40032ec <isatty>
 4002eac:	00ffffc4 	movi	r3,-1
 4002eb0:	10c00526 	beq	r2,r3,4002ec8 <_isatty_r+0x44>
 4002eb4:	dfc00217 	ldw	ra,8(sp)
 4002eb8:	dc400117 	ldw	r17,4(sp)
 4002ebc:	dc000017 	ldw	r16,0(sp)
 4002ec0:	dec00304 	addi	sp,sp,12
 4002ec4:	f800283a 	ret
 4002ec8:	80c00017 	ldw	r3,0(r16)
 4002ecc:	183ff926 	beq	r3,zero,4002eb4 <__alt_mem_onchip_memory+0xfbffaeb4>
 4002ed0:	88c00015 	stw	r3,0(r17)
 4002ed4:	003ff706 	br	4002eb4 <__alt_mem_onchip_memory+0xfbffaeb4>

04002ed8 <__divsi3>:
 4002ed8:	20001b16 	blt	r4,zero,4002f48 <__divsi3+0x70>
 4002edc:	000f883a 	mov	r7,zero
 4002ee0:	28001616 	blt	r5,zero,4002f3c <__divsi3+0x64>
 4002ee4:	200d883a 	mov	r6,r4
 4002ee8:	29001a2e 	bgeu	r5,r4,4002f54 <__divsi3+0x7c>
 4002eec:	00800804 	movi	r2,32
 4002ef0:	00c00044 	movi	r3,1
 4002ef4:	00000106 	br	4002efc <__divsi3+0x24>
 4002ef8:	10000d26 	beq	r2,zero,4002f30 <__divsi3+0x58>
 4002efc:	294b883a 	add	r5,r5,r5
 4002f00:	10bfffc4 	addi	r2,r2,-1
 4002f04:	18c7883a 	add	r3,r3,r3
 4002f08:	293ffb36 	bltu	r5,r4,4002ef8 <__alt_mem_onchip_memory+0xfbffaef8>
 4002f0c:	0005883a 	mov	r2,zero
 4002f10:	18000726 	beq	r3,zero,4002f30 <__divsi3+0x58>
 4002f14:	0005883a 	mov	r2,zero
 4002f18:	31400236 	bltu	r6,r5,4002f24 <__divsi3+0x4c>
 4002f1c:	314dc83a 	sub	r6,r6,r5
 4002f20:	10c4b03a 	or	r2,r2,r3
 4002f24:	1806d07a 	srli	r3,r3,1
 4002f28:	280ad07a 	srli	r5,r5,1
 4002f2c:	183ffa1e 	bne	r3,zero,4002f18 <__alt_mem_onchip_memory+0xfbffaf18>
 4002f30:	38000126 	beq	r7,zero,4002f38 <__divsi3+0x60>
 4002f34:	0085c83a 	sub	r2,zero,r2
 4002f38:	f800283a 	ret
 4002f3c:	014bc83a 	sub	r5,zero,r5
 4002f40:	39c0005c 	xori	r7,r7,1
 4002f44:	003fe706 	br	4002ee4 <__alt_mem_onchip_memory+0xfbffaee4>
 4002f48:	0109c83a 	sub	r4,zero,r4
 4002f4c:	01c00044 	movi	r7,1
 4002f50:	003fe306 	br	4002ee0 <__alt_mem_onchip_memory+0xfbffaee0>
 4002f54:	00c00044 	movi	r3,1
 4002f58:	003fee06 	br	4002f14 <__alt_mem_onchip_memory+0xfbffaf14>

04002f5c <__modsi3>:
 4002f5c:	20001716 	blt	r4,zero,4002fbc <__modsi3+0x60>
 4002f60:	000f883a 	mov	r7,zero
 4002f64:	2005883a 	mov	r2,r4
 4002f68:	28001216 	blt	r5,zero,4002fb4 <__modsi3+0x58>
 4002f6c:	2900162e 	bgeu	r5,r4,4002fc8 <__modsi3+0x6c>
 4002f70:	01800804 	movi	r6,32
 4002f74:	00c00044 	movi	r3,1
 4002f78:	00000106 	br	4002f80 <__modsi3+0x24>
 4002f7c:	30000a26 	beq	r6,zero,4002fa8 <__modsi3+0x4c>
 4002f80:	294b883a 	add	r5,r5,r5
 4002f84:	31bfffc4 	addi	r6,r6,-1
 4002f88:	18c7883a 	add	r3,r3,r3
 4002f8c:	293ffb36 	bltu	r5,r4,4002f7c <__alt_mem_onchip_memory+0xfbffaf7c>
 4002f90:	18000526 	beq	r3,zero,4002fa8 <__modsi3+0x4c>
 4002f94:	1806d07a 	srli	r3,r3,1
 4002f98:	11400136 	bltu	r2,r5,4002fa0 <__modsi3+0x44>
 4002f9c:	1145c83a 	sub	r2,r2,r5
 4002fa0:	280ad07a 	srli	r5,r5,1
 4002fa4:	183ffb1e 	bne	r3,zero,4002f94 <__alt_mem_onchip_memory+0xfbffaf94>
 4002fa8:	38000126 	beq	r7,zero,4002fb0 <__modsi3+0x54>
 4002fac:	0085c83a 	sub	r2,zero,r2
 4002fb0:	f800283a 	ret
 4002fb4:	014bc83a 	sub	r5,zero,r5
 4002fb8:	003fec06 	br	4002f6c <__alt_mem_onchip_memory+0xfbffaf6c>
 4002fbc:	0109c83a 	sub	r4,zero,r4
 4002fc0:	01c00044 	movi	r7,1
 4002fc4:	003fe706 	br	4002f64 <__alt_mem_onchip_memory+0xfbffaf64>
 4002fc8:	00c00044 	movi	r3,1
 4002fcc:	003ff106 	br	4002f94 <__alt_mem_onchip_memory+0xfbffaf94>

04002fd0 <__udivsi3>:
 4002fd0:	200d883a 	mov	r6,r4
 4002fd4:	2900152e 	bgeu	r5,r4,400302c <__udivsi3+0x5c>
 4002fd8:	28001416 	blt	r5,zero,400302c <__udivsi3+0x5c>
 4002fdc:	00800804 	movi	r2,32
 4002fe0:	00c00044 	movi	r3,1
 4002fe4:	00000206 	br	4002ff0 <__udivsi3+0x20>
 4002fe8:	10000e26 	beq	r2,zero,4003024 <__udivsi3+0x54>
 4002fec:	28000516 	blt	r5,zero,4003004 <__udivsi3+0x34>
 4002ff0:	294b883a 	add	r5,r5,r5
 4002ff4:	10bfffc4 	addi	r2,r2,-1
 4002ff8:	18c7883a 	add	r3,r3,r3
 4002ffc:	293ffa36 	bltu	r5,r4,4002fe8 <__alt_mem_onchip_memory+0xfbffafe8>
 4003000:	18000826 	beq	r3,zero,4003024 <__udivsi3+0x54>
 4003004:	0005883a 	mov	r2,zero
 4003008:	31400236 	bltu	r6,r5,4003014 <__udivsi3+0x44>
 400300c:	314dc83a 	sub	r6,r6,r5
 4003010:	10c4b03a 	or	r2,r2,r3
 4003014:	1806d07a 	srli	r3,r3,1
 4003018:	280ad07a 	srli	r5,r5,1
 400301c:	183ffa1e 	bne	r3,zero,4003008 <__alt_mem_onchip_memory+0xfbffb008>
 4003020:	f800283a 	ret
 4003024:	0005883a 	mov	r2,zero
 4003028:	f800283a 	ret
 400302c:	00c00044 	movi	r3,1
 4003030:	003ff406 	br	4003004 <__alt_mem_onchip_memory+0xfbffb004>

04003034 <__umodsi3>:
 4003034:	2005883a 	mov	r2,r4
 4003038:	2900122e 	bgeu	r5,r4,4003084 <__umodsi3+0x50>
 400303c:	28001116 	blt	r5,zero,4003084 <__umodsi3+0x50>
 4003040:	01800804 	movi	r6,32
 4003044:	00c00044 	movi	r3,1
 4003048:	00000206 	br	4003054 <__umodsi3+0x20>
 400304c:	30000c26 	beq	r6,zero,4003080 <__umodsi3+0x4c>
 4003050:	28000516 	blt	r5,zero,4003068 <__umodsi3+0x34>
 4003054:	294b883a 	add	r5,r5,r5
 4003058:	31bfffc4 	addi	r6,r6,-1
 400305c:	18c7883a 	add	r3,r3,r3
 4003060:	293ffa36 	bltu	r5,r4,400304c <__alt_mem_onchip_memory+0xfbffb04c>
 4003064:	18000626 	beq	r3,zero,4003080 <__umodsi3+0x4c>
 4003068:	1806d07a 	srli	r3,r3,1
 400306c:	11400136 	bltu	r2,r5,4003074 <__umodsi3+0x40>
 4003070:	1145c83a 	sub	r2,r2,r5
 4003074:	280ad07a 	srli	r5,r5,1
 4003078:	183ffb1e 	bne	r3,zero,4003068 <__alt_mem_onchip_memory+0xfbffb068>
 400307c:	f800283a 	ret
 4003080:	f800283a 	ret
 4003084:	00c00044 	movi	r3,1
 4003088:	003ff706 	br	4003068 <__alt_mem_onchip_memory+0xfbffb068>

0400308c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400308c:	defffe04 	addi	sp,sp,-8
 4003090:	dfc00115 	stw	ra,4(sp)
 4003094:	df000015 	stw	fp,0(sp)
 4003098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400309c:	d0a00917 	ldw	r2,-32732(gp)
 40030a0:	10000326 	beq	r2,zero,40030b0 <alt_get_errno+0x24>
 40030a4:	d0a00917 	ldw	r2,-32732(gp)
 40030a8:	103ee83a 	callr	r2
 40030ac:	00000106 	br	40030b4 <alt_get_errno+0x28>
 40030b0:	d0a6ac04 	addi	r2,gp,-25936
}
 40030b4:	e037883a 	mov	sp,fp
 40030b8:	dfc00117 	ldw	ra,4(sp)
 40030bc:	df000017 	ldw	fp,0(sp)
 40030c0:	dec00204 	addi	sp,sp,8
 40030c4:	f800283a 	ret

040030c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40030c8:	defffb04 	addi	sp,sp,-20
 40030cc:	dfc00415 	stw	ra,16(sp)
 40030d0:	df000315 	stw	fp,12(sp)
 40030d4:	df000304 	addi	fp,sp,12
 40030d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 40030dc:	e0bfff17 	ldw	r2,-4(fp)
 40030e0:	10000616 	blt	r2,zero,40030fc <close+0x34>
 40030e4:	e0bfff17 	ldw	r2,-4(fp)
 40030e8:	10c00324 	muli	r3,r2,12
 40030ec:	00810034 	movhi	r2,1024
 40030f0:	10983504 	addi	r2,r2,24788
 40030f4:	1885883a 	add	r2,r3,r2
 40030f8:	00000106 	br	4003100 <close+0x38>
 40030fc:	0005883a 	mov	r2,zero
 4003100:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4003104:	e0bffd17 	ldw	r2,-12(fp)
 4003108:	10001926 	beq	r2,zero,4003170 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400310c:	e0bffd17 	ldw	r2,-12(fp)
 4003110:	10800017 	ldw	r2,0(r2)
 4003114:	10800417 	ldw	r2,16(r2)
 4003118:	10000626 	beq	r2,zero,4003134 <close+0x6c>
 400311c:	e0bffd17 	ldw	r2,-12(fp)
 4003120:	10800017 	ldw	r2,0(r2)
 4003124:	10800417 	ldw	r2,16(r2)
 4003128:	e13ffd17 	ldw	r4,-12(fp)
 400312c:	103ee83a 	callr	r2
 4003130:	00000106 	br	4003138 <close+0x70>
 4003134:	0005883a 	mov	r2,zero
 4003138:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400313c:	e13fff17 	ldw	r4,-4(fp)
 4003140:	40037880 	call	4003788 <alt_release_fd>
    if (rval < 0)
 4003144:	e0bffe17 	ldw	r2,-8(fp)
 4003148:	1000070e 	bge	r2,zero,4003168 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 400314c:	400308c0 	call	400308c <alt_get_errno>
 4003150:	1007883a 	mov	r3,r2
 4003154:	e0bffe17 	ldw	r2,-8(fp)
 4003158:	0085c83a 	sub	r2,zero,r2
 400315c:	18800015 	stw	r2,0(r3)
      return -1;
 4003160:	00bfffc4 	movi	r2,-1
 4003164:	00000706 	br	4003184 <close+0xbc>
    }
    return 0;
 4003168:	0005883a 	mov	r2,zero
 400316c:	00000506 	br	4003184 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003170:	400308c0 	call	400308c <alt_get_errno>
 4003174:	1007883a 	mov	r3,r2
 4003178:	00801444 	movi	r2,81
 400317c:	18800015 	stw	r2,0(r3)
    return -1;
 4003180:	00bfffc4 	movi	r2,-1
  }
}
 4003184:	e037883a 	mov	sp,fp
 4003188:	dfc00117 	ldw	ra,4(sp)
 400318c:	df000017 	ldw	fp,0(sp)
 4003190:	dec00204 	addi	sp,sp,8
 4003194:	f800283a 	ret

04003198 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4003198:	defffc04 	addi	sp,sp,-16
 400319c:	df000315 	stw	fp,12(sp)
 40031a0:	df000304 	addi	fp,sp,12
 40031a4:	e13ffd15 	stw	r4,-12(fp)
 40031a8:	e17ffe15 	stw	r5,-8(fp)
 40031ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40031b0:	e0bfff17 	ldw	r2,-4(fp)
}
 40031b4:	e037883a 	mov	sp,fp
 40031b8:	df000017 	ldw	fp,0(sp)
 40031bc:	dec00104 	addi	sp,sp,4
 40031c0:	f800283a 	ret

040031c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40031c4:	defffe04 	addi	sp,sp,-8
 40031c8:	dfc00115 	stw	ra,4(sp)
 40031cc:	df000015 	stw	fp,0(sp)
 40031d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40031d4:	d0a00917 	ldw	r2,-32732(gp)
 40031d8:	10000326 	beq	r2,zero,40031e8 <alt_get_errno+0x24>
 40031dc:	d0a00917 	ldw	r2,-32732(gp)
 40031e0:	103ee83a 	callr	r2
 40031e4:	00000106 	br	40031ec <alt_get_errno+0x28>
 40031e8:	d0a6ac04 	addi	r2,gp,-25936
}
 40031ec:	e037883a 	mov	sp,fp
 40031f0:	dfc00117 	ldw	ra,4(sp)
 40031f4:	df000017 	ldw	fp,0(sp)
 40031f8:	dec00204 	addi	sp,sp,8
 40031fc:	f800283a 	ret

04003200 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4003200:	defffb04 	addi	sp,sp,-20
 4003204:	dfc00415 	stw	ra,16(sp)
 4003208:	df000315 	stw	fp,12(sp)
 400320c:	df000304 	addi	fp,sp,12
 4003210:	e13ffe15 	stw	r4,-8(fp)
 4003214:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003218:	e0bffe17 	ldw	r2,-8(fp)
 400321c:	10000616 	blt	r2,zero,4003238 <fstat+0x38>
 4003220:	e0bffe17 	ldw	r2,-8(fp)
 4003224:	10c00324 	muli	r3,r2,12
 4003228:	00810034 	movhi	r2,1024
 400322c:	10983504 	addi	r2,r2,24788
 4003230:	1885883a 	add	r2,r3,r2
 4003234:	00000106 	br	400323c <fstat+0x3c>
 4003238:	0005883a 	mov	r2,zero
 400323c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4003240:	e0bffd17 	ldw	r2,-12(fp)
 4003244:	10001026 	beq	r2,zero,4003288 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4003248:	e0bffd17 	ldw	r2,-12(fp)
 400324c:	10800017 	ldw	r2,0(r2)
 4003250:	10800817 	ldw	r2,32(r2)
 4003254:	10000726 	beq	r2,zero,4003274 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4003258:	e0bffd17 	ldw	r2,-12(fp)
 400325c:	10800017 	ldw	r2,0(r2)
 4003260:	10800817 	ldw	r2,32(r2)
 4003264:	e17fff17 	ldw	r5,-4(fp)
 4003268:	e13ffd17 	ldw	r4,-12(fp)
 400326c:	103ee83a 	callr	r2
 4003270:	00000a06 	br	400329c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4003274:	e0bfff17 	ldw	r2,-4(fp)
 4003278:	00c80004 	movi	r3,8192
 400327c:	10c00115 	stw	r3,4(r2)
      return 0;
 4003280:	0005883a 	mov	r2,zero
 4003284:	00000506 	br	400329c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003288:	40031c40 	call	40031c4 <alt_get_errno>
 400328c:	1007883a 	mov	r3,r2
 4003290:	00801444 	movi	r2,81
 4003294:	18800015 	stw	r2,0(r3)
    return -1;
 4003298:	00bfffc4 	movi	r2,-1
  }
}
 400329c:	e037883a 	mov	sp,fp
 40032a0:	dfc00117 	ldw	ra,4(sp)
 40032a4:	df000017 	ldw	fp,0(sp)
 40032a8:	dec00204 	addi	sp,sp,8
 40032ac:	f800283a 	ret

040032b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40032b0:	defffe04 	addi	sp,sp,-8
 40032b4:	dfc00115 	stw	ra,4(sp)
 40032b8:	df000015 	stw	fp,0(sp)
 40032bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40032c0:	d0a00917 	ldw	r2,-32732(gp)
 40032c4:	10000326 	beq	r2,zero,40032d4 <alt_get_errno+0x24>
 40032c8:	d0a00917 	ldw	r2,-32732(gp)
 40032cc:	103ee83a 	callr	r2
 40032d0:	00000106 	br	40032d8 <alt_get_errno+0x28>
 40032d4:	d0a6ac04 	addi	r2,gp,-25936
}
 40032d8:	e037883a 	mov	sp,fp
 40032dc:	dfc00117 	ldw	ra,4(sp)
 40032e0:	df000017 	ldw	fp,0(sp)
 40032e4:	dec00204 	addi	sp,sp,8
 40032e8:	f800283a 	ret

040032ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 40032ec:	deffed04 	addi	sp,sp,-76
 40032f0:	dfc01215 	stw	ra,72(sp)
 40032f4:	df001115 	stw	fp,68(sp)
 40032f8:	df001104 	addi	fp,sp,68
 40032fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003300:	e0bfff17 	ldw	r2,-4(fp)
 4003304:	10000616 	blt	r2,zero,4003320 <isatty+0x34>
 4003308:	e0bfff17 	ldw	r2,-4(fp)
 400330c:	10c00324 	muli	r3,r2,12
 4003310:	00810034 	movhi	r2,1024
 4003314:	10983504 	addi	r2,r2,24788
 4003318:	1885883a 	add	r2,r3,r2
 400331c:	00000106 	br	4003324 <isatty+0x38>
 4003320:	0005883a 	mov	r2,zero
 4003324:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4003328:	e0bfef17 	ldw	r2,-68(fp)
 400332c:	10000e26 	beq	r2,zero,4003368 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4003330:	e0bfef17 	ldw	r2,-68(fp)
 4003334:	10800017 	ldw	r2,0(r2)
 4003338:	10800817 	ldw	r2,32(r2)
 400333c:	1000021e 	bne	r2,zero,4003348 <isatty+0x5c>
    {
      return 1;
 4003340:	00800044 	movi	r2,1
 4003344:	00000d06 	br	400337c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4003348:	e0bff004 	addi	r2,fp,-64
 400334c:	100b883a 	mov	r5,r2
 4003350:	e13fff17 	ldw	r4,-4(fp)
 4003354:	40032000 	call	4003200 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4003358:	e0bff117 	ldw	r2,-60(fp)
 400335c:	10880020 	cmpeqi	r2,r2,8192
 4003360:	10803fcc 	andi	r2,r2,255
 4003364:	00000506 	br	400337c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003368:	40032b00 	call	40032b0 <alt_get_errno>
 400336c:	1007883a 	mov	r3,r2
 4003370:	00801444 	movi	r2,81
 4003374:	18800015 	stw	r2,0(r3)
    return 0;
 4003378:	0005883a 	mov	r2,zero
  }
}
 400337c:	e037883a 	mov	sp,fp
 4003380:	dfc00117 	ldw	ra,4(sp)
 4003384:	df000017 	ldw	fp,0(sp)
 4003388:	dec00204 	addi	sp,sp,8
 400338c:	f800283a 	ret

04003390 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4003390:	defffc04 	addi	sp,sp,-16
 4003394:	df000315 	stw	fp,12(sp)
 4003398:	df000304 	addi	fp,sp,12
 400339c:	e13ffd15 	stw	r4,-12(fp)
 40033a0:	e17ffe15 	stw	r5,-8(fp)
 40033a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40033a8:	e0fffe17 	ldw	r3,-8(fp)
 40033ac:	e0bffd17 	ldw	r2,-12(fp)
 40033b0:	18800c26 	beq	r3,r2,40033e4 <alt_load_section+0x54>
  {
    while( to != end )
 40033b4:	00000806 	br	40033d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 40033b8:	e0bffe17 	ldw	r2,-8(fp)
 40033bc:	10c00104 	addi	r3,r2,4
 40033c0:	e0fffe15 	stw	r3,-8(fp)
 40033c4:	e0fffd17 	ldw	r3,-12(fp)
 40033c8:	19000104 	addi	r4,r3,4
 40033cc:	e13ffd15 	stw	r4,-12(fp)
 40033d0:	18c00017 	ldw	r3,0(r3)
 40033d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40033d8:	e0fffe17 	ldw	r3,-8(fp)
 40033dc:	e0bfff17 	ldw	r2,-4(fp)
 40033e0:	18bff51e 	bne	r3,r2,40033b8 <__alt_mem_onchip_memory+0xfbffb3b8>
    {
      *to++ = *from++;
    }
  }
}
 40033e4:	0001883a 	nop
 40033e8:	e037883a 	mov	sp,fp
 40033ec:	df000017 	ldw	fp,0(sp)
 40033f0:	dec00104 	addi	sp,sp,4
 40033f4:	f800283a 	ret

040033f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40033f8:	defffe04 	addi	sp,sp,-8
 40033fc:	dfc00115 	stw	ra,4(sp)
 4003400:	df000015 	stw	fp,0(sp)
 4003404:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4003408:	01810034 	movhi	r6,1024
 400340c:	319cbb04 	addi	r6,r6,29420
 4003410:	01410034 	movhi	r5,1024
 4003414:	29562004 	addi	r5,r5,22656
 4003418:	01010034 	movhi	r4,1024
 400341c:	211cbb04 	addi	r4,r4,29420
 4003420:	40033900 	call	4003390 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4003424:	01810034 	movhi	r6,1024
 4003428:	31809104 	addi	r6,r6,580
 400342c:	01410034 	movhi	r5,1024
 4003430:	29400804 	addi	r5,r5,32
 4003434:	01010034 	movhi	r4,1024
 4003438:	21000804 	addi	r4,r4,32
 400343c:	40033900 	call	4003390 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4003440:	01810034 	movhi	r6,1024
 4003444:	31962004 	addi	r6,r6,22656
 4003448:	01410034 	movhi	r5,1024
 400344c:	29560e04 	addi	r5,r5,22584
 4003450:	01010034 	movhi	r4,1024
 4003454:	21160e04 	addi	r4,r4,22584
 4003458:	40033900 	call	4003390 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400345c:	40047240 	call	4004724 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4003460:	400490c0 	call	400490c <alt_icache_flush_all>
}
 4003464:	0001883a 	nop
 4003468:	e037883a 	mov	sp,fp
 400346c:	dfc00117 	ldw	ra,4(sp)
 4003470:	df000017 	ldw	fp,0(sp)
 4003474:	dec00204 	addi	sp,sp,8
 4003478:	f800283a 	ret

0400347c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400347c:	defffe04 	addi	sp,sp,-8
 4003480:	dfc00115 	stw	ra,4(sp)
 4003484:	df000015 	stw	fp,0(sp)
 4003488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400348c:	d0a00917 	ldw	r2,-32732(gp)
 4003490:	10000326 	beq	r2,zero,40034a0 <alt_get_errno+0x24>
 4003494:	d0a00917 	ldw	r2,-32732(gp)
 4003498:	103ee83a 	callr	r2
 400349c:	00000106 	br	40034a4 <alt_get_errno+0x28>
 40034a0:	d0a6ac04 	addi	r2,gp,-25936
}
 40034a4:	e037883a 	mov	sp,fp
 40034a8:	dfc00117 	ldw	ra,4(sp)
 40034ac:	df000017 	ldw	fp,0(sp)
 40034b0:	dec00204 	addi	sp,sp,8
 40034b4:	f800283a 	ret

040034b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 40034b8:	defff904 	addi	sp,sp,-28
 40034bc:	dfc00615 	stw	ra,24(sp)
 40034c0:	df000515 	stw	fp,20(sp)
 40034c4:	df000504 	addi	fp,sp,20
 40034c8:	e13ffd15 	stw	r4,-12(fp)
 40034cc:	e17ffe15 	stw	r5,-8(fp)
 40034d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 40034d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40034d8:	e0bffd17 	ldw	r2,-12(fp)
 40034dc:	10000616 	blt	r2,zero,40034f8 <lseek+0x40>
 40034e0:	e0bffd17 	ldw	r2,-12(fp)
 40034e4:	10c00324 	muli	r3,r2,12
 40034e8:	00810034 	movhi	r2,1024
 40034ec:	10983504 	addi	r2,r2,24788
 40034f0:	1885883a 	add	r2,r3,r2
 40034f4:	00000106 	br	40034fc <lseek+0x44>
 40034f8:	0005883a 	mov	r2,zero
 40034fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4003500:	e0bffc17 	ldw	r2,-16(fp)
 4003504:	10001026 	beq	r2,zero,4003548 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4003508:	e0bffc17 	ldw	r2,-16(fp)
 400350c:	10800017 	ldw	r2,0(r2)
 4003510:	10800717 	ldw	r2,28(r2)
 4003514:	10000926 	beq	r2,zero,400353c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4003518:	e0bffc17 	ldw	r2,-16(fp)
 400351c:	10800017 	ldw	r2,0(r2)
 4003520:	10800717 	ldw	r2,28(r2)
 4003524:	e1bfff17 	ldw	r6,-4(fp)
 4003528:	e17ffe17 	ldw	r5,-8(fp)
 400352c:	e13ffc17 	ldw	r4,-16(fp)
 4003530:	103ee83a 	callr	r2
 4003534:	e0bffb15 	stw	r2,-20(fp)
 4003538:	00000506 	br	4003550 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400353c:	00bfde84 	movi	r2,-134
 4003540:	e0bffb15 	stw	r2,-20(fp)
 4003544:	00000206 	br	4003550 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 4003548:	00bfebc4 	movi	r2,-81
 400354c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4003550:	e0bffb17 	ldw	r2,-20(fp)
 4003554:	1000070e 	bge	r2,zero,4003574 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 4003558:	400347c0 	call	400347c <alt_get_errno>
 400355c:	1007883a 	mov	r3,r2
 4003560:	e0bffb17 	ldw	r2,-20(fp)
 4003564:	0085c83a 	sub	r2,zero,r2
 4003568:	18800015 	stw	r2,0(r3)
    rc = -1;
 400356c:	00bfffc4 	movi	r2,-1
 4003570:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4003574:	e0bffb17 	ldw	r2,-20(fp)
}
 4003578:	e037883a 	mov	sp,fp
 400357c:	dfc00117 	ldw	ra,4(sp)
 4003580:	df000017 	ldw	fp,0(sp)
 4003584:	dec00204 	addi	sp,sp,8
 4003588:	f800283a 	ret

0400358c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400358c:	defffd04 	addi	sp,sp,-12
 4003590:	dfc00215 	stw	ra,8(sp)
 4003594:	df000115 	stw	fp,4(sp)
 4003598:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400359c:	0009883a 	mov	r4,zero
 40035a0:	4003a040 	call	4003a04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40035a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40035a8:	4003a3c0 	call	4003a3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40035ac:	01810034 	movhi	r6,1024
 40035b0:	31961804 	addi	r6,r6,22624
 40035b4:	01410034 	movhi	r5,1024
 40035b8:	29561804 	addi	r5,r5,22624
 40035bc:	01010034 	movhi	r4,1024
 40035c0:	21161804 	addi	r4,r4,22624
 40035c4:	4004ca40 	call	4004ca4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40035c8:	400484c0 	call	400484c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40035cc:	01010034 	movhi	r4,1024
 40035d0:	21122b04 	addi	r4,r4,18604
 40035d4:	40054a40 	call	40054a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40035d8:	d0a6ad17 	ldw	r2,-25932(gp)
 40035dc:	d0e6ae17 	ldw	r3,-25928(gp)
 40035e0:	d126af17 	ldw	r4,-25924(gp)
 40035e4:	200d883a 	mov	r6,r4
 40035e8:	180b883a 	mov	r5,r3
 40035ec:	1009883a 	mov	r4,r2
 40035f0:	40002900 	call	4000290 <main>
 40035f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40035f8:	01000044 	movi	r4,1
 40035fc:	40030c80 	call	40030c8 <close>
  exit (result);
 4003600:	e13fff17 	ldw	r4,-4(fp)
 4003604:	40054b80 	call	40054b8 <exit>

04003608 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4003608:	defffe04 	addi	sp,sp,-8
 400360c:	df000115 	stw	fp,4(sp)
 4003610:	df000104 	addi	fp,sp,4
 4003614:	e13fff15 	stw	r4,-4(fp)
}
 4003618:	0001883a 	nop
 400361c:	e037883a 	mov	sp,fp
 4003620:	df000017 	ldw	fp,0(sp)
 4003624:	dec00104 	addi	sp,sp,4
 4003628:	f800283a 	ret

0400362c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400362c:	defffe04 	addi	sp,sp,-8
 4003630:	df000115 	stw	fp,4(sp)
 4003634:	df000104 	addi	fp,sp,4
 4003638:	e13fff15 	stw	r4,-4(fp)
}
 400363c:	0001883a 	nop
 4003640:	e037883a 	mov	sp,fp
 4003644:	df000017 	ldw	fp,0(sp)
 4003648:	dec00104 	addi	sp,sp,4
 400364c:	f800283a 	ret

04003650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003650:	defffe04 	addi	sp,sp,-8
 4003654:	dfc00115 	stw	ra,4(sp)
 4003658:	df000015 	stw	fp,0(sp)
 400365c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003660:	d0a00917 	ldw	r2,-32732(gp)
 4003664:	10000326 	beq	r2,zero,4003674 <alt_get_errno+0x24>
 4003668:	d0a00917 	ldw	r2,-32732(gp)
 400366c:	103ee83a 	callr	r2
 4003670:	00000106 	br	4003678 <alt_get_errno+0x28>
 4003674:	d0a6ac04 	addi	r2,gp,-25936
}
 4003678:	e037883a 	mov	sp,fp
 400367c:	dfc00117 	ldw	ra,4(sp)
 4003680:	df000017 	ldw	fp,0(sp)
 4003684:	dec00204 	addi	sp,sp,8
 4003688:	f800283a 	ret

0400368c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400368c:	defff904 	addi	sp,sp,-28
 4003690:	dfc00615 	stw	ra,24(sp)
 4003694:	df000515 	stw	fp,20(sp)
 4003698:	df000504 	addi	fp,sp,20
 400369c:	e13ffd15 	stw	r4,-12(fp)
 40036a0:	e17ffe15 	stw	r5,-8(fp)
 40036a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40036a8:	e0bffd17 	ldw	r2,-12(fp)
 40036ac:	10000616 	blt	r2,zero,40036c8 <read+0x3c>
 40036b0:	e0bffd17 	ldw	r2,-12(fp)
 40036b4:	10c00324 	muli	r3,r2,12
 40036b8:	00810034 	movhi	r2,1024
 40036bc:	10983504 	addi	r2,r2,24788
 40036c0:	1885883a 	add	r2,r3,r2
 40036c4:	00000106 	br	40036cc <read+0x40>
 40036c8:	0005883a 	mov	r2,zero
 40036cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40036d0:	e0bffb17 	ldw	r2,-20(fp)
 40036d4:	10002226 	beq	r2,zero,4003760 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40036d8:	e0bffb17 	ldw	r2,-20(fp)
 40036dc:	10800217 	ldw	r2,8(r2)
 40036e0:	108000cc 	andi	r2,r2,3
 40036e4:	10800060 	cmpeqi	r2,r2,1
 40036e8:	1000181e 	bne	r2,zero,400374c <read+0xc0>
        (fd->dev->read))
 40036ec:	e0bffb17 	ldw	r2,-20(fp)
 40036f0:	10800017 	ldw	r2,0(r2)
 40036f4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40036f8:	10001426 	beq	r2,zero,400374c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 40036fc:	e0bffb17 	ldw	r2,-20(fp)
 4003700:	10800017 	ldw	r2,0(r2)
 4003704:	10800517 	ldw	r2,20(r2)
 4003708:	e0ffff17 	ldw	r3,-4(fp)
 400370c:	180d883a 	mov	r6,r3
 4003710:	e17ffe17 	ldw	r5,-8(fp)
 4003714:	e13ffb17 	ldw	r4,-20(fp)
 4003718:	103ee83a 	callr	r2
 400371c:	e0bffc15 	stw	r2,-16(fp)
 4003720:	e0bffc17 	ldw	r2,-16(fp)
 4003724:	1000070e 	bge	r2,zero,4003744 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 4003728:	40036500 	call	4003650 <alt_get_errno>
 400372c:	1007883a 	mov	r3,r2
 4003730:	e0bffc17 	ldw	r2,-16(fp)
 4003734:	0085c83a 	sub	r2,zero,r2
 4003738:	18800015 	stw	r2,0(r3)
          return -1;
 400373c:	00bfffc4 	movi	r2,-1
 4003740:	00000c06 	br	4003774 <read+0xe8>
        }
        return rval;
 4003744:	e0bffc17 	ldw	r2,-16(fp)
 4003748:	00000a06 	br	4003774 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400374c:	40036500 	call	4003650 <alt_get_errno>
 4003750:	1007883a 	mov	r3,r2
 4003754:	00800344 	movi	r2,13
 4003758:	18800015 	stw	r2,0(r3)
 400375c:	00000406 	br	4003770 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4003760:	40036500 	call	4003650 <alt_get_errno>
 4003764:	1007883a 	mov	r3,r2
 4003768:	00801444 	movi	r2,81
 400376c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4003770:	00bfffc4 	movi	r2,-1
}
 4003774:	e037883a 	mov	sp,fp
 4003778:	dfc00117 	ldw	ra,4(sp)
 400377c:	df000017 	ldw	fp,0(sp)
 4003780:	dec00204 	addi	sp,sp,8
 4003784:	f800283a 	ret

04003788 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4003788:	defffe04 	addi	sp,sp,-8
 400378c:	df000115 	stw	fp,4(sp)
 4003790:	df000104 	addi	fp,sp,4
 4003794:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4003798:	e0bfff17 	ldw	r2,-4(fp)
 400379c:	108000d0 	cmplti	r2,r2,3
 40037a0:	10000d1e 	bne	r2,zero,40037d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 40037a4:	00810034 	movhi	r2,1024
 40037a8:	10983504 	addi	r2,r2,24788
 40037ac:	e0ffff17 	ldw	r3,-4(fp)
 40037b0:	18c00324 	muli	r3,r3,12
 40037b4:	10c5883a 	add	r2,r2,r3
 40037b8:	10800204 	addi	r2,r2,8
 40037bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40037c0:	00810034 	movhi	r2,1024
 40037c4:	10983504 	addi	r2,r2,24788
 40037c8:	e0ffff17 	ldw	r3,-4(fp)
 40037cc:	18c00324 	muli	r3,r3,12
 40037d0:	10c5883a 	add	r2,r2,r3
 40037d4:	10000015 	stw	zero,0(r2)
  }
}
 40037d8:	0001883a 	nop
 40037dc:	e037883a 	mov	sp,fp
 40037e0:	df000017 	ldw	fp,0(sp)
 40037e4:	dec00104 	addi	sp,sp,4
 40037e8:	f800283a 	ret

040037ec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 40037ec:	defff904 	addi	sp,sp,-28
 40037f0:	df000615 	stw	fp,24(sp)
 40037f4:	df000604 	addi	fp,sp,24
 40037f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40037fc:	0005303a 	rdctl	r2,status
 4003800:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003804:	e0fffe17 	ldw	r3,-8(fp)
 4003808:	00bfff84 	movi	r2,-2
 400380c:	1884703a 	and	r2,r3,r2
 4003810:	1001703a 	wrctl	status,r2
  
  return context;
 4003814:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4003818:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400381c:	d0a00a17 	ldw	r2,-32728(gp)
 4003820:	10c000c4 	addi	r3,r2,3
 4003824:	00bfff04 	movi	r2,-4
 4003828:	1884703a 	and	r2,r3,r2
 400382c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4003830:	d0e00a17 	ldw	r3,-32728(gp)
 4003834:	e0bfff17 	ldw	r2,-4(fp)
 4003838:	1887883a 	add	r3,r3,r2
 400383c:	00820034 	movhi	r2,2048
 4003840:	10800004 	addi	r2,r2,0
 4003844:	10c0062e 	bgeu	r2,r3,4003860 <sbrk+0x74>
 4003848:	e0bffb17 	ldw	r2,-20(fp)
 400384c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003850:	e0bffa17 	ldw	r2,-24(fp)
 4003854:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4003858:	00bfffc4 	movi	r2,-1
 400385c:	00000b06 	br	400388c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4003860:	d0a00a17 	ldw	r2,-32728(gp)
 4003864:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4003868:	d0e00a17 	ldw	r3,-32728(gp)
 400386c:	e0bfff17 	ldw	r2,-4(fp)
 4003870:	1885883a 	add	r2,r3,r2
 4003874:	d0a00a15 	stw	r2,-32728(gp)
 4003878:	e0bffb17 	ldw	r2,-20(fp)
 400387c:	e0bffc15 	stw	r2,-16(fp)
 4003880:	e0bffc17 	ldw	r2,-16(fp)
 4003884:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4003888:	e0bffd17 	ldw	r2,-12(fp)
} 
 400388c:	e037883a 	mov	sp,fp
 4003890:	df000017 	ldw	fp,0(sp)
 4003894:	dec00104 	addi	sp,sp,4
 4003898:	f800283a 	ret

0400389c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400389c:	defffe04 	addi	sp,sp,-8
 40038a0:	dfc00115 	stw	ra,4(sp)
 40038a4:	df000015 	stw	fp,0(sp)
 40038a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40038ac:	d0a00917 	ldw	r2,-32732(gp)
 40038b0:	10000326 	beq	r2,zero,40038c0 <alt_get_errno+0x24>
 40038b4:	d0a00917 	ldw	r2,-32732(gp)
 40038b8:	103ee83a 	callr	r2
 40038bc:	00000106 	br	40038c4 <alt_get_errno+0x28>
 40038c0:	d0a6ac04 	addi	r2,gp,-25936
}
 40038c4:	e037883a 	mov	sp,fp
 40038c8:	dfc00117 	ldw	ra,4(sp)
 40038cc:	df000017 	ldw	fp,0(sp)
 40038d0:	dec00204 	addi	sp,sp,8
 40038d4:	f800283a 	ret

040038d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 40038d8:	defff904 	addi	sp,sp,-28
 40038dc:	dfc00615 	stw	ra,24(sp)
 40038e0:	df000515 	stw	fp,20(sp)
 40038e4:	df000504 	addi	fp,sp,20
 40038e8:	e13ffd15 	stw	r4,-12(fp)
 40038ec:	e17ffe15 	stw	r5,-8(fp)
 40038f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40038f4:	e0bffd17 	ldw	r2,-12(fp)
 40038f8:	10000616 	blt	r2,zero,4003914 <write+0x3c>
 40038fc:	e0bffd17 	ldw	r2,-12(fp)
 4003900:	10c00324 	muli	r3,r2,12
 4003904:	00810034 	movhi	r2,1024
 4003908:	10983504 	addi	r2,r2,24788
 400390c:	1885883a 	add	r2,r3,r2
 4003910:	00000106 	br	4003918 <write+0x40>
 4003914:	0005883a 	mov	r2,zero
 4003918:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400391c:	e0bffb17 	ldw	r2,-20(fp)
 4003920:	10002126 	beq	r2,zero,40039a8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4003924:	e0bffb17 	ldw	r2,-20(fp)
 4003928:	10800217 	ldw	r2,8(r2)
 400392c:	108000cc 	andi	r2,r2,3
 4003930:	10001826 	beq	r2,zero,4003994 <write+0xbc>
 4003934:	e0bffb17 	ldw	r2,-20(fp)
 4003938:	10800017 	ldw	r2,0(r2)
 400393c:	10800617 	ldw	r2,24(r2)
 4003940:	10001426 	beq	r2,zero,4003994 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4003944:	e0bffb17 	ldw	r2,-20(fp)
 4003948:	10800017 	ldw	r2,0(r2)
 400394c:	10800617 	ldw	r2,24(r2)
 4003950:	e0ffff17 	ldw	r3,-4(fp)
 4003954:	180d883a 	mov	r6,r3
 4003958:	e17ffe17 	ldw	r5,-8(fp)
 400395c:	e13ffb17 	ldw	r4,-20(fp)
 4003960:	103ee83a 	callr	r2
 4003964:	e0bffc15 	stw	r2,-16(fp)
 4003968:	e0bffc17 	ldw	r2,-16(fp)
 400396c:	1000070e 	bge	r2,zero,400398c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4003970:	400389c0 	call	400389c <alt_get_errno>
 4003974:	1007883a 	mov	r3,r2
 4003978:	e0bffc17 	ldw	r2,-16(fp)
 400397c:	0085c83a 	sub	r2,zero,r2
 4003980:	18800015 	stw	r2,0(r3)
        return -1;
 4003984:	00bfffc4 	movi	r2,-1
 4003988:	00000c06 	br	40039bc <write+0xe4>
      }
      return rval;
 400398c:	e0bffc17 	ldw	r2,-16(fp)
 4003990:	00000a06 	br	40039bc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4003994:	400389c0 	call	400389c <alt_get_errno>
 4003998:	1007883a 	mov	r3,r2
 400399c:	00800344 	movi	r2,13
 40039a0:	18800015 	stw	r2,0(r3)
 40039a4:	00000406 	br	40039b8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 40039a8:	400389c0 	call	400389c <alt_get_errno>
 40039ac:	1007883a 	mov	r3,r2
 40039b0:	00801444 	movi	r2,81
 40039b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40039b8:	00bfffc4 	movi	r2,-1
}
 40039bc:	e037883a 	mov	sp,fp
 40039c0:	dfc00117 	ldw	ra,4(sp)
 40039c4:	df000017 	ldw	fp,0(sp)
 40039c8:	dec00204 	addi	sp,sp,8
 40039cc:	f800283a 	ret

040039d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 40039d0:	defffd04 	addi	sp,sp,-12
 40039d4:	dfc00215 	stw	ra,8(sp)
 40039d8:	df000115 	stw	fp,4(sp)
 40039dc:	df000104 	addi	fp,sp,4
 40039e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40039e4:	d1600604 	addi	r5,gp,-32744
 40039e8:	e13fff17 	ldw	r4,-4(fp)
 40039ec:	40047a80 	call	40047a8 <alt_dev_llist_insert>
}
 40039f0:	e037883a 	mov	sp,fp
 40039f4:	dfc00117 	ldw	ra,4(sp)
 40039f8:	df000017 	ldw	fp,0(sp)
 40039fc:	dec00204 	addi	sp,sp,8
 4003a00:	f800283a 	ret

04003a04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4003a04:	defffd04 	addi	sp,sp,-12
 4003a08:	dfc00215 	stw	ra,8(sp)
 4003a0c:	df000115 	stw	fp,4(sp)
 4003a10:	df000104 	addi	fp,sp,4
 4003a14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 4003a18:	40051180 	call	4005118 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4003a1c:	00800044 	movi	r2,1
 4003a20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4003a24:	0001883a 	nop
 4003a28:	e037883a 	mov	sp,fp
 4003a2c:	dfc00117 	ldw	ra,4(sp)
 4003a30:	df000017 	ldw	fp,0(sp)
 4003a34:	dec00204 	addi	sp,sp,8
 4003a38:	f800283a 	ret

04003a3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4003a3c:	defffe04 	addi	sp,sp,-8
 4003a40:	dfc00115 	stw	ra,4(sp)
 4003a44:	df000015 	stw	fp,0(sp)
 4003a48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER, high_res_timer);
 4003a4c:	01c0fa04 	movi	r7,1000
 4003a50:	000d883a 	mov	r6,zero
 4003a54:	000b883a 	mov	r5,zero
 4003a58:	01020074 	movhi	r4,2049
 4003a5c:	21040004 	addi	r4,r4,4096
 4003a60:	400457c0 	call	400457c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4003a64:	01800044 	movi	r6,1
 4003a68:	000b883a 	mov	r5,zero
 4003a6c:	01010034 	movhi	r4,1024
 4003a70:	21189f04 	addi	r4,r4,25212
 4003a74:	4003c000 	call	4003c00 <altera_avalon_jtag_uart_init>
 4003a78:	01010034 	movhi	r4,1024
 4003a7c:	21189504 	addi	r4,r4,25172
 4003a80:	40039d00 	call	40039d0 <alt_dev_reg>
}
 4003a84:	0001883a 	nop
 4003a88:	e037883a 	mov	sp,fp
 4003a8c:	dfc00117 	ldw	ra,4(sp)
 4003a90:	df000017 	ldw	fp,0(sp)
 4003a94:	dec00204 	addi	sp,sp,8
 4003a98:	f800283a 	ret

04003a9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4003a9c:	defffa04 	addi	sp,sp,-24
 4003aa0:	dfc00515 	stw	ra,20(sp)
 4003aa4:	df000415 	stw	fp,16(sp)
 4003aa8:	df000404 	addi	fp,sp,16
 4003aac:	e13ffd15 	stw	r4,-12(fp)
 4003ab0:	e17ffe15 	stw	r5,-8(fp)
 4003ab4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4003ab8:	e0bffd17 	ldw	r2,-12(fp)
 4003abc:	10800017 	ldw	r2,0(r2)
 4003ac0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4003ac4:	e0bffc17 	ldw	r2,-16(fp)
 4003ac8:	10c00a04 	addi	r3,r2,40
 4003acc:	e0bffd17 	ldw	r2,-12(fp)
 4003ad0:	10800217 	ldw	r2,8(r2)
 4003ad4:	100f883a 	mov	r7,r2
 4003ad8:	e1bfff17 	ldw	r6,-4(fp)
 4003adc:	e17ffe17 	ldw	r5,-8(fp)
 4003ae0:	1809883a 	mov	r4,r3
 4003ae4:	40040c40 	call	40040c4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4003ae8:	e037883a 	mov	sp,fp
 4003aec:	dfc00117 	ldw	ra,4(sp)
 4003af0:	df000017 	ldw	fp,0(sp)
 4003af4:	dec00204 	addi	sp,sp,8
 4003af8:	f800283a 	ret

04003afc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4003afc:	defffa04 	addi	sp,sp,-24
 4003b00:	dfc00515 	stw	ra,20(sp)
 4003b04:	df000415 	stw	fp,16(sp)
 4003b08:	df000404 	addi	fp,sp,16
 4003b0c:	e13ffd15 	stw	r4,-12(fp)
 4003b10:	e17ffe15 	stw	r5,-8(fp)
 4003b14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4003b18:	e0bffd17 	ldw	r2,-12(fp)
 4003b1c:	10800017 	ldw	r2,0(r2)
 4003b20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4003b24:	e0bffc17 	ldw	r2,-16(fp)
 4003b28:	10c00a04 	addi	r3,r2,40
 4003b2c:	e0bffd17 	ldw	r2,-12(fp)
 4003b30:	10800217 	ldw	r2,8(r2)
 4003b34:	100f883a 	mov	r7,r2
 4003b38:	e1bfff17 	ldw	r6,-4(fp)
 4003b3c:	e17ffe17 	ldw	r5,-8(fp)
 4003b40:	1809883a 	mov	r4,r3
 4003b44:	40042e00 	call	40042e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4003b48:	e037883a 	mov	sp,fp
 4003b4c:	dfc00117 	ldw	ra,4(sp)
 4003b50:	df000017 	ldw	fp,0(sp)
 4003b54:	dec00204 	addi	sp,sp,8
 4003b58:	f800283a 	ret

04003b5c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4003b5c:	defffc04 	addi	sp,sp,-16
 4003b60:	dfc00315 	stw	ra,12(sp)
 4003b64:	df000215 	stw	fp,8(sp)
 4003b68:	df000204 	addi	fp,sp,8
 4003b6c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4003b70:	e0bfff17 	ldw	r2,-4(fp)
 4003b74:	10800017 	ldw	r2,0(r2)
 4003b78:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4003b7c:	e0bffe17 	ldw	r2,-8(fp)
 4003b80:	10c00a04 	addi	r3,r2,40
 4003b84:	e0bfff17 	ldw	r2,-4(fp)
 4003b88:	10800217 	ldw	r2,8(r2)
 4003b8c:	100b883a 	mov	r5,r2
 4003b90:	1809883a 	mov	r4,r3
 4003b94:	4003f6c0 	call	4003f6c <altera_avalon_jtag_uart_close>
}
 4003b98:	e037883a 	mov	sp,fp
 4003b9c:	dfc00117 	ldw	ra,4(sp)
 4003ba0:	df000017 	ldw	fp,0(sp)
 4003ba4:	dec00204 	addi	sp,sp,8
 4003ba8:	f800283a 	ret

04003bac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4003bac:	defffa04 	addi	sp,sp,-24
 4003bb0:	dfc00515 	stw	ra,20(sp)
 4003bb4:	df000415 	stw	fp,16(sp)
 4003bb8:	df000404 	addi	fp,sp,16
 4003bbc:	e13ffd15 	stw	r4,-12(fp)
 4003bc0:	e17ffe15 	stw	r5,-8(fp)
 4003bc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4003bc8:	e0bffd17 	ldw	r2,-12(fp)
 4003bcc:	10800017 	ldw	r2,0(r2)
 4003bd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4003bd4:	e0bffc17 	ldw	r2,-16(fp)
 4003bd8:	10800a04 	addi	r2,r2,40
 4003bdc:	e1bfff17 	ldw	r6,-4(fp)
 4003be0:	e17ffe17 	ldw	r5,-8(fp)
 4003be4:	1009883a 	mov	r4,r2
 4003be8:	4003fd40 	call	4003fd4 <altera_avalon_jtag_uart_ioctl>
}
 4003bec:	e037883a 	mov	sp,fp
 4003bf0:	dfc00117 	ldw	ra,4(sp)
 4003bf4:	df000017 	ldw	fp,0(sp)
 4003bf8:	dec00204 	addi	sp,sp,8
 4003bfc:	f800283a 	ret

04003c00 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4003c00:	defffa04 	addi	sp,sp,-24
 4003c04:	dfc00515 	stw	ra,20(sp)
 4003c08:	df000415 	stw	fp,16(sp)
 4003c0c:	df000404 	addi	fp,sp,16
 4003c10:	e13ffd15 	stw	r4,-12(fp)
 4003c14:	e17ffe15 	stw	r5,-8(fp)
 4003c18:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4003c1c:	e0bffd17 	ldw	r2,-12(fp)
 4003c20:	00c00044 	movi	r3,1
 4003c24:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4003c28:	e0bffd17 	ldw	r2,-12(fp)
 4003c2c:	10800017 	ldw	r2,0(r2)
 4003c30:	10800104 	addi	r2,r2,4
 4003c34:	1007883a 	mov	r3,r2
 4003c38:	e0bffd17 	ldw	r2,-12(fp)
 4003c3c:	10800817 	ldw	r2,32(r2)
 4003c40:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4003c44:	e0bffe17 	ldw	r2,-8(fp)
 4003c48:	e0ffff17 	ldw	r3,-4(fp)
 4003c4c:	d8000015 	stw	zero,0(sp)
 4003c50:	e1fffd17 	ldw	r7,-12(fp)
 4003c54:	01810034 	movhi	r6,1024
 4003c58:	318f3004 	addi	r6,r6,15552
 4003c5c:	180b883a 	mov	r5,r3
 4003c60:	1009883a 	mov	r4,r2
 4003c64:	40049400 	call	4004940 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4003c68:	e0bffd17 	ldw	r2,-12(fp)
 4003c6c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4003c70:	e0bffd17 	ldw	r2,-12(fp)
 4003c74:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4003c78:	d0e6b117 	ldw	r3,-25916(gp)
 4003c7c:	e1fffd17 	ldw	r7,-12(fp)
 4003c80:	01810034 	movhi	r6,1024
 4003c84:	318fb304 	addi	r6,r6,16076
 4003c88:	180b883a 	mov	r5,r3
 4003c8c:	1009883a 	mov	r4,r2
 4003c90:	40045f80 	call	40045f8 <alt_alarm_start>
 4003c94:	1000040e 	bge	r2,zero,4003ca8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4003c98:	e0fffd17 	ldw	r3,-12(fp)
 4003c9c:	00a00034 	movhi	r2,32768
 4003ca0:	10bfffc4 	addi	r2,r2,-1
 4003ca4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4003ca8:	0001883a 	nop
 4003cac:	e037883a 	mov	sp,fp
 4003cb0:	dfc00117 	ldw	ra,4(sp)
 4003cb4:	df000017 	ldw	fp,0(sp)
 4003cb8:	dec00204 	addi	sp,sp,8
 4003cbc:	f800283a 	ret

04003cc0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4003cc0:	defff804 	addi	sp,sp,-32
 4003cc4:	df000715 	stw	fp,28(sp)
 4003cc8:	df000704 	addi	fp,sp,28
 4003ccc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4003cd0:	e0bfff17 	ldw	r2,-4(fp)
 4003cd4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4003cd8:	e0bffb17 	ldw	r2,-20(fp)
 4003cdc:	10800017 	ldw	r2,0(r2)
 4003ce0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4003ce4:	e0bffc17 	ldw	r2,-16(fp)
 4003ce8:	10800104 	addi	r2,r2,4
 4003cec:	10800037 	ldwio	r2,0(r2)
 4003cf0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4003cf4:	e0bffd17 	ldw	r2,-12(fp)
 4003cf8:	1080c00c 	andi	r2,r2,768
 4003cfc:	10006d26 	beq	r2,zero,4003eb4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4003d00:	e0bffd17 	ldw	r2,-12(fp)
 4003d04:	1080400c 	andi	r2,r2,256
 4003d08:	10003526 	beq	r2,zero,4003de0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4003d0c:	00800074 	movhi	r2,1
 4003d10:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4003d14:	e0bffb17 	ldw	r2,-20(fp)
 4003d18:	10800a17 	ldw	r2,40(r2)
 4003d1c:	10800044 	addi	r2,r2,1
 4003d20:	1081ffcc 	andi	r2,r2,2047
 4003d24:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4003d28:	e0bffb17 	ldw	r2,-20(fp)
 4003d2c:	10c00b17 	ldw	r3,44(r2)
 4003d30:	e0bffe17 	ldw	r2,-8(fp)
 4003d34:	18801526 	beq	r3,r2,4003d8c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4003d38:	e0bffc17 	ldw	r2,-16(fp)
 4003d3c:	10800037 	ldwio	r2,0(r2)
 4003d40:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4003d44:	e0bff917 	ldw	r2,-28(fp)
 4003d48:	10a0000c 	andi	r2,r2,32768
 4003d4c:	10001126 	beq	r2,zero,4003d94 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4003d50:	e0bffb17 	ldw	r2,-20(fp)
 4003d54:	10800a17 	ldw	r2,40(r2)
 4003d58:	e0fff917 	ldw	r3,-28(fp)
 4003d5c:	1809883a 	mov	r4,r3
 4003d60:	e0fffb17 	ldw	r3,-20(fp)
 4003d64:	1885883a 	add	r2,r3,r2
 4003d68:	10800e04 	addi	r2,r2,56
 4003d6c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4003d70:	e0bffb17 	ldw	r2,-20(fp)
 4003d74:	10800a17 	ldw	r2,40(r2)
 4003d78:	10800044 	addi	r2,r2,1
 4003d7c:	10c1ffcc 	andi	r3,r2,2047
 4003d80:	e0bffb17 	ldw	r2,-20(fp)
 4003d84:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4003d88:	003fe206 	br	4003d14 <__alt_mem_onchip_memory+0xfbffbd14>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4003d8c:	0001883a 	nop
 4003d90:	00000106 	br	4003d98 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4003d94:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4003d98:	e0bff917 	ldw	r2,-28(fp)
 4003d9c:	10bfffec 	andhi	r2,r2,65535
 4003da0:	10000f26 	beq	r2,zero,4003de0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4003da4:	e0bffb17 	ldw	r2,-20(fp)
 4003da8:	10c00817 	ldw	r3,32(r2)
 4003dac:	00bfff84 	movi	r2,-2
 4003db0:	1886703a 	and	r3,r3,r2
 4003db4:	e0bffb17 	ldw	r2,-20(fp)
 4003db8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4003dbc:	e0bffc17 	ldw	r2,-16(fp)
 4003dc0:	10800104 	addi	r2,r2,4
 4003dc4:	1007883a 	mov	r3,r2
 4003dc8:	e0bffb17 	ldw	r2,-20(fp)
 4003dcc:	10800817 	ldw	r2,32(r2)
 4003dd0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4003dd4:	e0bffc17 	ldw	r2,-16(fp)
 4003dd8:	10800104 	addi	r2,r2,4
 4003ddc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4003de0:	e0bffd17 	ldw	r2,-12(fp)
 4003de4:	1080800c 	andi	r2,r2,512
 4003de8:	103fbe26 	beq	r2,zero,4003ce4 <__alt_mem_onchip_memory+0xfbffbce4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4003dec:	e0bffd17 	ldw	r2,-12(fp)
 4003df0:	1004d43a 	srli	r2,r2,16
 4003df4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4003df8:	00001406 	br	4003e4c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4003dfc:	e0bffc17 	ldw	r2,-16(fp)
 4003e00:	e0fffb17 	ldw	r3,-20(fp)
 4003e04:	18c00d17 	ldw	r3,52(r3)
 4003e08:	e13ffb17 	ldw	r4,-20(fp)
 4003e0c:	20c7883a 	add	r3,r4,r3
 4003e10:	18c20e04 	addi	r3,r3,2104
 4003e14:	18c00003 	ldbu	r3,0(r3)
 4003e18:	18c03fcc 	andi	r3,r3,255
 4003e1c:	18c0201c 	xori	r3,r3,128
 4003e20:	18ffe004 	addi	r3,r3,-128
 4003e24:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4003e28:	e0bffb17 	ldw	r2,-20(fp)
 4003e2c:	10800d17 	ldw	r2,52(r2)
 4003e30:	10800044 	addi	r2,r2,1
 4003e34:	10c1ffcc 	andi	r3,r2,2047
 4003e38:	e0bffb17 	ldw	r2,-20(fp)
 4003e3c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4003e40:	e0bffa17 	ldw	r2,-24(fp)
 4003e44:	10bfffc4 	addi	r2,r2,-1
 4003e48:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4003e4c:	e0bffa17 	ldw	r2,-24(fp)
 4003e50:	10000526 	beq	r2,zero,4003e68 <altera_avalon_jtag_uart_irq+0x1a8>
 4003e54:	e0bffb17 	ldw	r2,-20(fp)
 4003e58:	10c00d17 	ldw	r3,52(r2)
 4003e5c:	e0bffb17 	ldw	r2,-20(fp)
 4003e60:	10800c17 	ldw	r2,48(r2)
 4003e64:	18bfe51e 	bne	r3,r2,4003dfc <__alt_mem_onchip_memory+0xfbffbdfc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4003e68:	e0bffa17 	ldw	r2,-24(fp)
 4003e6c:	103f9d26 	beq	r2,zero,4003ce4 <__alt_mem_onchip_memory+0xfbffbce4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4003e70:	e0bffb17 	ldw	r2,-20(fp)
 4003e74:	10c00817 	ldw	r3,32(r2)
 4003e78:	00bfff44 	movi	r2,-3
 4003e7c:	1886703a 	and	r3,r3,r2
 4003e80:	e0bffb17 	ldw	r2,-20(fp)
 4003e84:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4003e88:	e0bffb17 	ldw	r2,-20(fp)
 4003e8c:	10800017 	ldw	r2,0(r2)
 4003e90:	10800104 	addi	r2,r2,4
 4003e94:	1007883a 	mov	r3,r2
 4003e98:	e0bffb17 	ldw	r2,-20(fp)
 4003e9c:	10800817 	ldw	r2,32(r2)
 4003ea0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4003ea4:	e0bffc17 	ldw	r2,-16(fp)
 4003ea8:	10800104 	addi	r2,r2,4
 4003eac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4003eb0:	003f8c06 	br	4003ce4 <__alt_mem_onchip_memory+0xfbffbce4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4003eb4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4003eb8:	0001883a 	nop
 4003ebc:	e037883a 	mov	sp,fp
 4003ec0:	df000017 	ldw	fp,0(sp)
 4003ec4:	dec00104 	addi	sp,sp,4
 4003ec8:	f800283a 	ret

04003ecc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4003ecc:	defff804 	addi	sp,sp,-32
 4003ed0:	df000715 	stw	fp,28(sp)
 4003ed4:	df000704 	addi	fp,sp,28
 4003ed8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4003edc:	e0bffb17 	ldw	r2,-20(fp)
 4003ee0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4003ee4:	e0bff917 	ldw	r2,-28(fp)
 4003ee8:	10800017 	ldw	r2,0(r2)
 4003eec:	10800104 	addi	r2,r2,4
 4003ef0:	10800037 	ldwio	r2,0(r2)
 4003ef4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4003ef8:	e0bffa17 	ldw	r2,-24(fp)
 4003efc:	1081000c 	andi	r2,r2,1024
 4003f00:	10000b26 	beq	r2,zero,4003f30 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4003f04:	e0bff917 	ldw	r2,-28(fp)
 4003f08:	10800017 	ldw	r2,0(r2)
 4003f0c:	10800104 	addi	r2,r2,4
 4003f10:	1007883a 	mov	r3,r2
 4003f14:	e0bff917 	ldw	r2,-28(fp)
 4003f18:	10800817 	ldw	r2,32(r2)
 4003f1c:	10810014 	ori	r2,r2,1024
 4003f20:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4003f24:	e0bff917 	ldw	r2,-28(fp)
 4003f28:	10000915 	stw	zero,36(r2)
 4003f2c:	00000a06 	br	4003f58 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4003f30:	e0bff917 	ldw	r2,-28(fp)
 4003f34:	10c00917 	ldw	r3,36(r2)
 4003f38:	00a00034 	movhi	r2,32768
 4003f3c:	10bfff04 	addi	r2,r2,-4
 4003f40:	10c00536 	bltu	r2,r3,4003f58 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4003f44:	e0bff917 	ldw	r2,-28(fp)
 4003f48:	10800917 	ldw	r2,36(r2)
 4003f4c:	10c00044 	addi	r3,r2,1
 4003f50:	e0bff917 	ldw	r2,-28(fp)
 4003f54:	10c00915 	stw	r3,36(r2)
 4003f58:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4003f5c:	e037883a 	mov	sp,fp
 4003f60:	df000017 	ldw	fp,0(sp)
 4003f64:	dec00104 	addi	sp,sp,4
 4003f68:	f800283a 	ret

04003f6c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4003f6c:	defffd04 	addi	sp,sp,-12
 4003f70:	df000215 	stw	fp,8(sp)
 4003f74:	df000204 	addi	fp,sp,8
 4003f78:	e13ffe15 	stw	r4,-8(fp)
 4003f7c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4003f80:	00000506 	br	4003f98 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4003f84:	e0bfff17 	ldw	r2,-4(fp)
 4003f88:	1090000c 	andi	r2,r2,16384
 4003f8c:	10000226 	beq	r2,zero,4003f98 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4003f90:	00bffd44 	movi	r2,-11
 4003f94:	00000b06 	br	4003fc4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4003f98:	e0bffe17 	ldw	r2,-8(fp)
 4003f9c:	10c00d17 	ldw	r3,52(r2)
 4003fa0:	e0bffe17 	ldw	r2,-8(fp)
 4003fa4:	10800c17 	ldw	r2,48(r2)
 4003fa8:	18800526 	beq	r3,r2,4003fc0 <altera_avalon_jtag_uart_close+0x54>
 4003fac:	e0bffe17 	ldw	r2,-8(fp)
 4003fb0:	10c00917 	ldw	r3,36(r2)
 4003fb4:	e0bffe17 	ldw	r2,-8(fp)
 4003fb8:	10800117 	ldw	r2,4(r2)
 4003fbc:	18bff136 	bltu	r3,r2,4003f84 <__alt_mem_onchip_memory+0xfbffbf84>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4003fc0:	0005883a 	mov	r2,zero
}
 4003fc4:	e037883a 	mov	sp,fp
 4003fc8:	df000017 	ldw	fp,0(sp)
 4003fcc:	dec00104 	addi	sp,sp,4
 4003fd0:	f800283a 	ret

04003fd4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4003fd4:	defffa04 	addi	sp,sp,-24
 4003fd8:	df000515 	stw	fp,20(sp)
 4003fdc:	df000504 	addi	fp,sp,20
 4003fe0:	e13ffd15 	stw	r4,-12(fp)
 4003fe4:	e17ffe15 	stw	r5,-8(fp)
 4003fe8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4003fec:	00bff9c4 	movi	r2,-25
 4003ff0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4003ff4:	e0bffe17 	ldw	r2,-8(fp)
 4003ff8:	10da8060 	cmpeqi	r3,r2,27137
 4003ffc:	1800031e 	bne	r3,zero,400400c <altera_avalon_jtag_uart_ioctl+0x38>
 4004000:	109a80a0 	cmpeqi	r2,r2,27138
 4004004:	1000181e 	bne	r2,zero,4004068 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4004008:	00002906 	br	40040b0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400400c:	e0bffd17 	ldw	r2,-12(fp)
 4004010:	10c00117 	ldw	r3,4(r2)
 4004014:	00a00034 	movhi	r2,32768
 4004018:	10bfffc4 	addi	r2,r2,-1
 400401c:	18802126 	beq	r3,r2,40040a4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4004020:	e0bfff17 	ldw	r2,-4(fp)
 4004024:	10800017 	ldw	r2,0(r2)
 4004028:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400402c:	e0bffc17 	ldw	r2,-16(fp)
 4004030:	10800090 	cmplti	r2,r2,2
 4004034:	1000061e 	bne	r2,zero,4004050 <altera_avalon_jtag_uart_ioctl+0x7c>
 4004038:	e0fffc17 	ldw	r3,-16(fp)
 400403c:	00a00034 	movhi	r2,32768
 4004040:	10bfffc4 	addi	r2,r2,-1
 4004044:	18800226 	beq	r3,r2,4004050 <altera_avalon_jtag_uart_ioctl+0x7c>
 4004048:	e0bffc17 	ldw	r2,-16(fp)
 400404c:	00000206 	br	4004058 <altera_avalon_jtag_uart_ioctl+0x84>
 4004050:	00a00034 	movhi	r2,32768
 4004054:	10bfff84 	addi	r2,r2,-2
 4004058:	e0fffd17 	ldw	r3,-12(fp)
 400405c:	18800115 	stw	r2,4(r3)
      rc = 0;
 4004060:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4004064:	00000f06 	br	40040a4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4004068:	e0bffd17 	ldw	r2,-12(fp)
 400406c:	10c00117 	ldw	r3,4(r2)
 4004070:	00a00034 	movhi	r2,32768
 4004074:	10bfffc4 	addi	r2,r2,-1
 4004078:	18800c26 	beq	r3,r2,40040ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400407c:	e0bffd17 	ldw	r2,-12(fp)
 4004080:	10c00917 	ldw	r3,36(r2)
 4004084:	e0bffd17 	ldw	r2,-12(fp)
 4004088:	10800117 	ldw	r2,4(r2)
 400408c:	1885803a 	cmpltu	r2,r3,r2
 4004090:	10c03fcc 	andi	r3,r2,255
 4004094:	e0bfff17 	ldw	r2,-4(fp)
 4004098:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400409c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40040a0:	00000206 	br	40040ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 40040a4:	0001883a 	nop
 40040a8:	00000106 	br	40040b0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 40040ac:	0001883a 	nop

  default:
    break;
  }

  return rc;
 40040b0:	e0bffb17 	ldw	r2,-20(fp)
}
 40040b4:	e037883a 	mov	sp,fp
 40040b8:	df000017 	ldw	fp,0(sp)
 40040bc:	dec00104 	addi	sp,sp,4
 40040c0:	f800283a 	ret

040040c4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 40040c4:	defff304 	addi	sp,sp,-52
 40040c8:	dfc00c15 	stw	ra,48(sp)
 40040cc:	df000b15 	stw	fp,44(sp)
 40040d0:	df000b04 	addi	fp,sp,44
 40040d4:	e13ffc15 	stw	r4,-16(fp)
 40040d8:	e17ffd15 	stw	r5,-12(fp)
 40040dc:	e1bffe15 	stw	r6,-8(fp)
 40040e0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 40040e4:	e0bffd17 	ldw	r2,-12(fp)
 40040e8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40040ec:	00004706 	br	400420c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 40040f0:	e0bffc17 	ldw	r2,-16(fp)
 40040f4:	10800a17 	ldw	r2,40(r2)
 40040f8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 40040fc:	e0bffc17 	ldw	r2,-16(fp)
 4004100:	10800b17 	ldw	r2,44(r2)
 4004104:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4004108:	e0fff717 	ldw	r3,-36(fp)
 400410c:	e0bff817 	ldw	r2,-32(fp)
 4004110:	18800536 	bltu	r3,r2,4004128 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4004114:	e0fff717 	ldw	r3,-36(fp)
 4004118:	e0bff817 	ldw	r2,-32(fp)
 400411c:	1885c83a 	sub	r2,r3,r2
 4004120:	e0bff615 	stw	r2,-40(fp)
 4004124:	00000406 	br	4004138 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4004128:	00c20004 	movi	r3,2048
 400412c:	e0bff817 	ldw	r2,-32(fp)
 4004130:	1885c83a 	sub	r2,r3,r2
 4004134:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4004138:	e0bff617 	ldw	r2,-40(fp)
 400413c:	10001e26 	beq	r2,zero,40041b8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4004140:	e0fffe17 	ldw	r3,-8(fp)
 4004144:	e0bff617 	ldw	r2,-40(fp)
 4004148:	1880022e 	bgeu	r3,r2,4004154 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400414c:	e0bffe17 	ldw	r2,-8(fp)
 4004150:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4004154:	e0bffc17 	ldw	r2,-16(fp)
 4004158:	10c00e04 	addi	r3,r2,56
 400415c:	e0bff817 	ldw	r2,-32(fp)
 4004160:	1885883a 	add	r2,r3,r2
 4004164:	e1bff617 	ldw	r6,-40(fp)
 4004168:	100b883a 	mov	r5,r2
 400416c:	e13ff517 	ldw	r4,-44(fp)
 4004170:	40017040 	call	4001704 <memcpy>
      ptr   += n;
 4004174:	e0fff517 	ldw	r3,-44(fp)
 4004178:	e0bff617 	ldw	r2,-40(fp)
 400417c:	1885883a 	add	r2,r3,r2
 4004180:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4004184:	e0fffe17 	ldw	r3,-8(fp)
 4004188:	e0bff617 	ldw	r2,-40(fp)
 400418c:	1885c83a 	sub	r2,r3,r2
 4004190:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004194:	e0fff817 	ldw	r3,-32(fp)
 4004198:	e0bff617 	ldw	r2,-40(fp)
 400419c:	1885883a 	add	r2,r3,r2
 40041a0:	10c1ffcc 	andi	r3,r2,2047
 40041a4:	e0bffc17 	ldw	r2,-16(fp)
 40041a8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 40041ac:	e0bffe17 	ldw	r2,-8(fp)
 40041b0:	00bfcf16 	blt	zero,r2,40040f0 <__alt_mem_onchip_memory+0xfbffc0f0>
 40041b4:	00000106 	br	40041bc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 40041b8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 40041bc:	e0fff517 	ldw	r3,-44(fp)
 40041c0:	e0bffd17 	ldw	r2,-12(fp)
 40041c4:	1880141e 	bne	r3,r2,4004218 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 40041c8:	e0bfff17 	ldw	r2,-4(fp)
 40041cc:	1090000c 	andi	r2,r2,16384
 40041d0:	1000131e 	bne	r2,zero,4004220 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 40041d4:	0001883a 	nop
 40041d8:	e0bffc17 	ldw	r2,-16(fp)
 40041dc:	10c00a17 	ldw	r3,40(r2)
 40041e0:	e0bff717 	ldw	r2,-36(fp)
 40041e4:	1880051e 	bne	r3,r2,40041fc <altera_avalon_jtag_uart_read+0x138>
 40041e8:	e0bffc17 	ldw	r2,-16(fp)
 40041ec:	10c00917 	ldw	r3,36(r2)
 40041f0:	e0bffc17 	ldw	r2,-16(fp)
 40041f4:	10800117 	ldw	r2,4(r2)
 40041f8:	18bff736 	bltu	r3,r2,40041d8 <__alt_mem_onchip_memory+0xfbffc1d8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 40041fc:	e0bffc17 	ldw	r2,-16(fp)
 4004200:	10c00a17 	ldw	r3,40(r2)
 4004204:	e0bff717 	ldw	r2,-36(fp)
 4004208:	18800726 	beq	r3,r2,4004228 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400420c:	e0bffe17 	ldw	r2,-8(fp)
 4004210:	00bfb716 	blt	zero,r2,40040f0 <__alt_mem_onchip_memory+0xfbffc0f0>
 4004214:	00000506 	br	400422c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4004218:	0001883a 	nop
 400421c:	00000306 	br	400422c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4004220:	0001883a 	nop
 4004224:	00000106 	br	400422c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4004228:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400422c:	e0fff517 	ldw	r3,-44(fp)
 4004230:	e0bffd17 	ldw	r2,-12(fp)
 4004234:	18801826 	beq	r3,r2,4004298 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004238:	0005303a 	rdctl	r2,status
 400423c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004240:	e0fffb17 	ldw	r3,-20(fp)
 4004244:	00bfff84 	movi	r2,-2
 4004248:	1884703a 	and	r2,r3,r2
 400424c:	1001703a 	wrctl	status,r2
  
  return context;
 4004250:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4004254:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4004258:	e0bffc17 	ldw	r2,-16(fp)
 400425c:	10800817 	ldw	r2,32(r2)
 4004260:	10c00054 	ori	r3,r2,1
 4004264:	e0bffc17 	ldw	r2,-16(fp)
 4004268:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400426c:	e0bffc17 	ldw	r2,-16(fp)
 4004270:	10800017 	ldw	r2,0(r2)
 4004274:	10800104 	addi	r2,r2,4
 4004278:	1007883a 	mov	r3,r2
 400427c:	e0bffc17 	ldw	r2,-16(fp)
 4004280:	10800817 	ldw	r2,32(r2)
 4004284:	18800035 	stwio	r2,0(r3)
 4004288:	e0bffa17 	ldw	r2,-24(fp)
 400428c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004290:	e0bff917 	ldw	r2,-28(fp)
 4004294:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4004298:	e0fff517 	ldw	r3,-44(fp)
 400429c:	e0bffd17 	ldw	r2,-12(fp)
 40042a0:	18800426 	beq	r3,r2,40042b4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 40042a4:	e0fff517 	ldw	r3,-44(fp)
 40042a8:	e0bffd17 	ldw	r2,-12(fp)
 40042ac:	1885c83a 	sub	r2,r3,r2
 40042b0:	00000606 	br	40042cc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 40042b4:	e0bfff17 	ldw	r2,-4(fp)
 40042b8:	1090000c 	andi	r2,r2,16384
 40042bc:	10000226 	beq	r2,zero,40042c8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 40042c0:	00bffd44 	movi	r2,-11
 40042c4:	00000106 	br	40042cc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 40042c8:	00bffec4 	movi	r2,-5
}
 40042cc:	e037883a 	mov	sp,fp
 40042d0:	dfc00117 	ldw	ra,4(sp)
 40042d4:	df000017 	ldw	fp,0(sp)
 40042d8:	dec00204 	addi	sp,sp,8
 40042dc:	f800283a 	ret

040042e0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40042e0:	defff304 	addi	sp,sp,-52
 40042e4:	dfc00c15 	stw	ra,48(sp)
 40042e8:	df000b15 	stw	fp,44(sp)
 40042ec:	df000b04 	addi	fp,sp,44
 40042f0:	e13ffc15 	stw	r4,-16(fp)
 40042f4:	e17ffd15 	stw	r5,-12(fp)
 40042f8:	e1bffe15 	stw	r6,-8(fp)
 40042fc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4004300:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4004304:	e0bffd17 	ldw	r2,-12(fp)
 4004308:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400430c:	00003706 	br	40043ec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4004310:	e0bffc17 	ldw	r2,-16(fp)
 4004314:	10800c17 	ldw	r2,48(r2)
 4004318:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 400431c:	e0bffc17 	ldw	r2,-16(fp)
 4004320:	10800d17 	ldw	r2,52(r2)
 4004324:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4004328:	e0fff917 	ldw	r3,-28(fp)
 400432c:	e0bff517 	ldw	r2,-44(fp)
 4004330:	1880062e 	bgeu	r3,r2,400434c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4004334:	e0fff517 	ldw	r3,-44(fp)
 4004338:	e0bff917 	ldw	r2,-28(fp)
 400433c:	1885c83a 	sub	r2,r3,r2
 4004340:	10bfffc4 	addi	r2,r2,-1
 4004344:	e0bff615 	stw	r2,-40(fp)
 4004348:	00000b06 	br	4004378 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400434c:	e0bff517 	ldw	r2,-44(fp)
 4004350:	10000526 	beq	r2,zero,4004368 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4004354:	00c20004 	movi	r3,2048
 4004358:	e0bff917 	ldw	r2,-28(fp)
 400435c:	1885c83a 	sub	r2,r3,r2
 4004360:	e0bff615 	stw	r2,-40(fp)
 4004364:	00000406 	br	4004378 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4004368:	00c1ffc4 	movi	r3,2047
 400436c:	e0bff917 	ldw	r2,-28(fp)
 4004370:	1885c83a 	sub	r2,r3,r2
 4004374:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4004378:	e0bff617 	ldw	r2,-40(fp)
 400437c:	10001e26 	beq	r2,zero,40043f8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4004380:	e0fffe17 	ldw	r3,-8(fp)
 4004384:	e0bff617 	ldw	r2,-40(fp)
 4004388:	1880022e 	bgeu	r3,r2,4004394 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400438c:	e0bffe17 	ldw	r2,-8(fp)
 4004390:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4004394:	e0bffc17 	ldw	r2,-16(fp)
 4004398:	10c20e04 	addi	r3,r2,2104
 400439c:	e0bff917 	ldw	r2,-28(fp)
 40043a0:	1885883a 	add	r2,r3,r2
 40043a4:	e1bff617 	ldw	r6,-40(fp)
 40043a8:	e17ffd17 	ldw	r5,-12(fp)
 40043ac:	1009883a 	mov	r4,r2
 40043b0:	40017040 	call	4001704 <memcpy>
      ptr   += n;
 40043b4:	e0fffd17 	ldw	r3,-12(fp)
 40043b8:	e0bff617 	ldw	r2,-40(fp)
 40043bc:	1885883a 	add	r2,r3,r2
 40043c0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 40043c4:	e0fffe17 	ldw	r3,-8(fp)
 40043c8:	e0bff617 	ldw	r2,-40(fp)
 40043cc:	1885c83a 	sub	r2,r3,r2
 40043d0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40043d4:	e0fff917 	ldw	r3,-28(fp)
 40043d8:	e0bff617 	ldw	r2,-40(fp)
 40043dc:	1885883a 	add	r2,r3,r2
 40043e0:	10c1ffcc 	andi	r3,r2,2047
 40043e4:	e0bffc17 	ldw	r2,-16(fp)
 40043e8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40043ec:	e0bffe17 	ldw	r2,-8(fp)
 40043f0:	00bfc716 	blt	zero,r2,4004310 <__alt_mem_onchip_memory+0xfbffc310>
 40043f4:	00000106 	br	40043fc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 40043f8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40043fc:	0005303a 	rdctl	r2,status
 4004400:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004404:	e0fffb17 	ldw	r3,-20(fp)
 4004408:	00bfff84 	movi	r2,-2
 400440c:	1884703a 	and	r2,r3,r2
 4004410:	1001703a 	wrctl	status,r2
  
  return context;
 4004414:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4004418:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400441c:	e0bffc17 	ldw	r2,-16(fp)
 4004420:	10800817 	ldw	r2,32(r2)
 4004424:	10c00094 	ori	r3,r2,2
 4004428:	e0bffc17 	ldw	r2,-16(fp)
 400442c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4004430:	e0bffc17 	ldw	r2,-16(fp)
 4004434:	10800017 	ldw	r2,0(r2)
 4004438:	10800104 	addi	r2,r2,4
 400443c:	1007883a 	mov	r3,r2
 4004440:	e0bffc17 	ldw	r2,-16(fp)
 4004444:	10800817 	ldw	r2,32(r2)
 4004448:	18800035 	stwio	r2,0(r3)
 400444c:	e0bffa17 	ldw	r2,-24(fp)
 4004450:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004454:	e0bff817 	ldw	r2,-32(fp)
 4004458:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400445c:	e0bffe17 	ldw	r2,-8(fp)
 4004460:	0080100e 	bge	zero,r2,40044a4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4004464:	e0bfff17 	ldw	r2,-4(fp)
 4004468:	1090000c 	andi	r2,r2,16384
 400446c:	1000101e 	bne	r2,zero,40044b0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4004470:	0001883a 	nop
 4004474:	e0bffc17 	ldw	r2,-16(fp)
 4004478:	10c00d17 	ldw	r3,52(r2)
 400447c:	e0bff517 	ldw	r2,-44(fp)
 4004480:	1880051e 	bne	r3,r2,4004498 <altera_avalon_jtag_uart_write+0x1b8>
 4004484:	e0bffc17 	ldw	r2,-16(fp)
 4004488:	10c00917 	ldw	r3,36(r2)
 400448c:	e0bffc17 	ldw	r2,-16(fp)
 4004490:	10800117 	ldw	r2,4(r2)
 4004494:	18bff736 	bltu	r3,r2,4004474 <__alt_mem_onchip_memory+0xfbffc474>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4004498:	e0bffc17 	ldw	r2,-16(fp)
 400449c:	10800917 	ldw	r2,36(r2)
 40044a0:	1000051e 	bne	r2,zero,40044b8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 40044a4:	e0bffe17 	ldw	r2,-8(fp)
 40044a8:	00bfd016 	blt	zero,r2,40043ec <__alt_mem_onchip_memory+0xfbffc3ec>
 40044ac:	00000306 	br	40044bc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 40044b0:	0001883a 	nop
 40044b4:	00000106 	br	40044bc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 40044b8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 40044bc:	e0fffd17 	ldw	r3,-12(fp)
 40044c0:	e0bff717 	ldw	r2,-36(fp)
 40044c4:	18800426 	beq	r3,r2,40044d8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 40044c8:	e0fffd17 	ldw	r3,-12(fp)
 40044cc:	e0bff717 	ldw	r2,-36(fp)
 40044d0:	1885c83a 	sub	r2,r3,r2
 40044d4:	00000606 	br	40044f0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 40044d8:	e0bfff17 	ldw	r2,-4(fp)
 40044dc:	1090000c 	andi	r2,r2,16384
 40044e0:	10000226 	beq	r2,zero,40044ec <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 40044e4:	00bffd44 	movi	r2,-11
 40044e8:	00000106 	br	40044f0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 40044ec:	00bffec4 	movi	r2,-5
}
 40044f0:	e037883a 	mov	sp,fp
 40044f4:	dfc00117 	ldw	ra,4(sp)
 40044f8:	df000017 	ldw	fp,0(sp)
 40044fc:	dec00204 	addi	sp,sp,8
 4004500:	f800283a 	ret

04004504 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4004504:	defffa04 	addi	sp,sp,-24
 4004508:	dfc00515 	stw	ra,20(sp)
 400450c:	df000415 	stw	fp,16(sp)
 4004510:	df000404 	addi	fp,sp,16
 4004514:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4004518:	0007883a 	mov	r3,zero
 400451c:	e0bfff17 	ldw	r2,-4(fp)
 4004520:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4004524:	e0bfff17 	ldw	r2,-4(fp)
 4004528:	10800104 	addi	r2,r2,4
 400452c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004530:	0005303a 	rdctl	r2,status
 4004534:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004538:	e0fffd17 	ldw	r3,-12(fp)
 400453c:	00bfff84 	movi	r2,-2
 4004540:	1884703a 	and	r2,r3,r2
 4004544:	1001703a 	wrctl	status,r2
  
  return context;
 4004548:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 400454c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4004550:	40050100 	call	4005010 <alt_tick>
 4004554:	e0bffc17 	ldw	r2,-16(fp)
 4004558:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400455c:	e0bffe17 	ldw	r2,-8(fp)
 4004560:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4004564:	0001883a 	nop
 4004568:	e037883a 	mov	sp,fp
 400456c:	dfc00117 	ldw	ra,4(sp)
 4004570:	df000017 	ldw	fp,0(sp)
 4004574:	dec00204 	addi	sp,sp,8
 4004578:	f800283a 	ret

0400457c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 400457c:	defff804 	addi	sp,sp,-32
 4004580:	dfc00715 	stw	ra,28(sp)
 4004584:	df000615 	stw	fp,24(sp)
 4004588:	df000604 	addi	fp,sp,24
 400458c:	e13ffc15 	stw	r4,-16(fp)
 4004590:	e17ffd15 	stw	r5,-12(fp)
 4004594:	e1bffe15 	stw	r6,-8(fp)
 4004598:	e1ffff15 	stw	r7,-4(fp)
 400459c:	e0bfff17 	ldw	r2,-4(fp)
 40045a0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 40045a4:	d0a6b117 	ldw	r2,-25916(gp)
 40045a8:	1000021e 	bne	r2,zero,40045b4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 40045ac:	e0bffb17 	ldw	r2,-20(fp)
 40045b0:	d0a6b115 	stw	r2,-25916(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 40045b4:	e0bffc17 	ldw	r2,-16(fp)
 40045b8:	10800104 	addi	r2,r2,4
 40045bc:	00c001c4 	movi	r3,7
 40045c0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 40045c4:	d8000015 	stw	zero,0(sp)
 40045c8:	e1fffc17 	ldw	r7,-16(fp)
 40045cc:	01810034 	movhi	r6,1024
 40045d0:	31914104 	addi	r6,r6,17668
 40045d4:	e17ffe17 	ldw	r5,-8(fp)
 40045d8:	e13ffd17 	ldw	r4,-12(fp)
 40045dc:	40049400 	call	4004940 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 40045e0:	0001883a 	nop
 40045e4:	e037883a 	mov	sp,fp
 40045e8:	dfc00117 	ldw	ra,4(sp)
 40045ec:	df000017 	ldw	fp,0(sp)
 40045f0:	dec00204 	addi	sp,sp,8
 40045f4:	f800283a 	ret

040045f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 40045f8:	defff504 	addi	sp,sp,-44
 40045fc:	df000a15 	stw	fp,40(sp)
 4004600:	df000a04 	addi	fp,sp,40
 4004604:	e13ffc15 	stw	r4,-16(fp)
 4004608:	e17ffd15 	stw	r5,-12(fp)
 400460c:	e1bffe15 	stw	r6,-8(fp)
 4004610:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4004614:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4004618:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
 400461c:	10003c26 	beq	r2,zero,4004710 <alt_alarm_start+0x118>
  {
    if (alarm)
 4004620:	e0bffc17 	ldw	r2,-16(fp)
 4004624:	10003826 	beq	r2,zero,4004708 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4004628:	e0bffc17 	ldw	r2,-16(fp)
 400462c:	e0fffe17 	ldw	r3,-8(fp)
 4004630:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4004634:	e0bffc17 	ldw	r2,-16(fp)
 4004638:	e0ffff17 	ldw	r3,-4(fp)
 400463c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004640:	0005303a 	rdctl	r2,status
 4004644:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004648:	e0fff917 	ldw	r3,-28(fp)
 400464c:	00bfff84 	movi	r2,-2
 4004650:	1884703a 	and	r2,r3,r2
 4004654:	1001703a 	wrctl	status,r2
  
  return context;
 4004658:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 400465c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4004660:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
 4004664:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4004668:	e0fffd17 	ldw	r3,-12(fp)
 400466c:	e0bff617 	ldw	r2,-40(fp)
 4004670:	1885883a 	add	r2,r3,r2
 4004674:	10c00044 	addi	r3,r2,1
 4004678:	e0bffc17 	ldw	r2,-16(fp)
 400467c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4004680:	e0bffc17 	ldw	r2,-16(fp)
 4004684:	10c00217 	ldw	r3,8(r2)
 4004688:	e0bff617 	ldw	r2,-40(fp)
 400468c:	1880042e 	bgeu	r3,r2,40046a0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4004690:	e0bffc17 	ldw	r2,-16(fp)
 4004694:	00c00044 	movi	r3,1
 4004698:	10c00405 	stb	r3,16(r2)
 400469c:	00000206 	br	40046a8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 40046a0:	e0bffc17 	ldw	r2,-16(fp)
 40046a4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 40046a8:	e0bffc17 	ldw	r2,-16(fp)
 40046ac:	d0e00c04 	addi	r3,gp,-32720
 40046b0:	e0fffa15 	stw	r3,-24(fp)
 40046b4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40046b8:	e0bffb17 	ldw	r2,-20(fp)
 40046bc:	e0fffa17 	ldw	r3,-24(fp)
 40046c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40046c4:	e0bffa17 	ldw	r2,-24(fp)
 40046c8:	10c00017 	ldw	r3,0(r2)
 40046cc:	e0bffb17 	ldw	r2,-20(fp)
 40046d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40046d4:	e0bffa17 	ldw	r2,-24(fp)
 40046d8:	10800017 	ldw	r2,0(r2)
 40046dc:	e0fffb17 	ldw	r3,-20(fp)
 40046e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40046e4:	e0bffa17 	ldw	r2,-24(fp)
 40046e8:	e0fffb17 	ldw	r3,-20(fp)
 40046ec:	10c00015 	stw	r3,0(r2)
 40046f0:	e0bff817 	ldw	r2,-32(fp)
 40046f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40046f8:	e0bff717 	ldw	r2,-36(fp)
 40046fc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4004700:	0005883a 	mov	r2,zero
 4004704:	00000306 	br	4004714 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4004708:	00bffa84 	movi	r2,-22
 400470c:	00000106 	br	4004714 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4004710:	00bfde84 	movi	r2,-134
  }
}
 4004714:	e037883a 	mov	sp,fp
 4004718:	df000017 	ldw	fp,0(sp)
 400471c:	dec00104 	addi	sp,sp,4
 4004720:	f800283a 	ret

04004724 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4004724:	defffe04 	addi	sp,sp,-8
 4004728:	df000115 	stw	fp,4(sp)
 400472c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4004730:	e03fff15 	stw	zero,-4(fp)
 4004734:	00000506 	br	400474c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4004738:	e0bfff17 	ldw	r2,-4(fp)
 400473c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4004740:	e0bfff17 	ldw	r2,-4(fp)
 4004744:	10800804 	addi	r2,r2,32
 4004748:	e0bfff15 	stw	r2,-4(fp)
 400474c:	e0bfff17 	ldw	r2,-4(fp)
 4004750:	10880030 	cmpltui	r2,r2,8192
 4004754:	103ff81e 	bne	r2,zero,4004738 <__alt_mem_onchip_memory+0xfbffc738>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4004758:	0001883a 	nop
 400475c:	e037883a 	mov	sp,fp
 4004760:	df000017 	ldw	fp,0(sp)
 4004764:	dec00104 	addi	sp,sp,4
 4004768:	f800283a 	ret

0400476c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400476c:	defffe04 	addi	sp,sp,-8
 4004770:	dfc00115 	stw	ra,4(sp)
 4004774:	df000015 	stw	fp,0(sp)
 4004778:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400477c:	d0a00917 	ldw	r2,-32732(gp)
 4004780:	10000326 	beq	r2,zero,4004790 <alt_get_errno+0x24>
 4004784:	d0a00917 	ldw	r2,-32732(gp)
 4004788:	103ee83a 	callr	r2
 400478c:	00000106 	br	4004794 <alt_get_errno+0x28>
 4004790:	d0a6ac04 	addi	r2,gp,-25936
}
 4004794:	e037883a 	mov	sp,fp
 4004798:	dfc00117 	ldw	ra,4(sp)
 400479c:	df000017 	ldw	fp,0(sp)
 40047a0:	dec00204 	addi	sp,sp,8
 40047a4:	f800283a 	ret

040047a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40047a8:	defffa04 	addi	sp,sp,-24
 40047ac:	dfc00515 	stw	ra,20(sp)
 40047b0:	df000415 	stw	fp,16(sp)
 40047b4:	df000404 	addi	fp,sp,16
 40047b8:	e13ffe15 	stw	r4,-8(fp)
 40047bc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40047c0:	e0bffe17 	ldw	r2,-8(fp)
 40047c4:	10000326 	beq	r2,zero,40047d4 <alt_dev_llist_insert+0x2c>
 40047c8:	e0bffe17 	ldw	r2,-8(fp)
 40047cc:	10800217 	ldw	r2,8(r2)
 40047d0:	1000061e 	bne	r2,zero,40047ec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 40047d4:	400476c0 	call	400476c <alt_get_errno>
 40047d8:	1007883a 	mov	r3,r2
 40047dc:	00800584 	movi	r2,22
 40047e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40047e4:	00bffa84 	movi	r2,-22
 40047e8:	00001306 	br	4004838 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40047ec:	e0bffe17 	ldw	r2,-8(fp)
 40047f0:	e0ffff17 	ldw	r3,-4(fp)
 40047f4:	e0fffc15 	stw	r3,-16(fp)
 40047f8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40047fc:	e0bffd17 	ldw	r2,-12(fp)
 4004800:	e0fffc17 	ldw	r3,-16(fp)
 4004804:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4004808:	e0bffc17 	ldw	r2,-16(fp)
 400480c:	10c00017 	ldw	r3,0(r2)
 4004810:	e0bffd17 	ldw	r2,-12(fp)
 4004814:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4004818:	e0bffc17 	ldw	r2,-16(fp)
 400481c:	10800017 	ldw	r2,0(r2)
 4004820:	e0fffd17 	ldw	r3,-12(fp)
 4004824:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4004828:	e0bffc17 	ldw	r2,-16(fp)
 400482c:	e0fffd17 	ldw	r3,-12(fp)
 4004830:	10c00015 	stw	r3,0(r2)

  return 0;  
 4004834:	0005883a 	mov	r2,zero
}
 4004838:	e037883a 	mov	sp,fp
 400483c:	dfc00117 	ldw	ra,4(sp)
 4004840:	df000017 	ldw	fp,0(sp)
 4004844:	dec00204 	addi	sp,sp,8
 4004848:	f800283a 	ret

0400484c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400484c:	defffd04 	addi	sp,sp,-12
 4004850:	dfc00215 	stw	ra,8(sp)
 4004854:	df000115 	stw	fp,4(sp)
 4004858:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400485c:	00810034 	movhi	r2,1024
 4004860:	10960d04 	addi	r2,r2,22580
 4004864:	e0bfff15 	stw	r2,-4(fp)
 4004868:	00000606 	br	4004884 <_do_ctors+0x38>
        (*ctor) (); 
 400486c:	e0bfff17 	ldw	r2,-4(fp)
 4004870:	10800017 	ldw	r2,0(r2)
 4004874:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4004878:	e0bfff17 	ldw	r2,-4(fp)
 400487c:	10bfff04 	addi	r2,r2,-4
 4004880:	e0bfff15 	stw	r2,-4(fp)
 4004884:	e0ffff17 	ldw	r3,-4(fp)
 4004888:	00810034 	movhi	r2,1024
 400488c:	10960e04 	addi	r2,r2,22584
 4004890:	18bff62e 	bgeu	r3,r2,400486c <__alt_mem_onchip_memory+0xfbffc86c>
        (*ctor) (); 
}
 4004894:	0001883a 	nop
 4004898:	e037883a 	mov	sp,fp
 400489c:	dfc00117 	ldw	ra,4(sp)
 40048a0:	df000017 	ldw	fp,0(sp)
 40048a4:	dec00204 	addi	sp,sp,8
 40048a8:	f800283a 	ret

040048ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40048ac:	defffd04 	addi	sp,sp,-12
 40048b0:	dfc00215 	stw	ra,8(sp)
 40048b4:	df000115 	stw	fp,4(sp)
 40048b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40048bc:	00810034 	movhi	r2,1024
 40048c0:	10960d04 	addi	r2,r2,22580
 40048c4:	e0bfff15 	stw	r2,-4(fp)
 40048c8:	00000606 	br	40048e4 <_do_dtors+0x38>
        (*dtor) (); 
 40048cc:	e0bfff17 	ldw	r2,-4(fp)
 40048d0:	10800017 	ldw	r2,0(r2)
 40048d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40048d8:	e0bfff17 	ldw	r2,-4(fp)
 40048dc:	10bfff04 	addi	r2,r2,-4
 40048e0:	e0bfff15 	stw	r2,-4(fp)
 40048e4:	e0ffff17 	ldw	r3,-4(fp)
 40048e8:	00810034 	movhi	r2,1024
 40048ec:	10960e04 	addi	r2,r2,22584
 40048f0:	18bff62e 	bgeu	r3,r2,40048cc <__alt_mem_onchip_memory+0xfbffc8cc>
        (*dtor) (); 
}
 40048f4:	0001883a 	nop
 40048f8:	e037883a 	mov	sp,fp
 40048fc:	dfc00117 	ldw	ra,4(sp)
 4004900:	df000017 	ldw	fp,0(sp)
 4004904:	dec00204 	addi	sp,sp,8
 4004908:	f800283a 	ret

0400490c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400490c:	defffe04 	addi	sp,sp,-8
 4004910:	dfc00115 	stw	ra,4(sp)
 4004914:	df000015 	stw	fp,0(sp)
 4004918:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 400491c:	01440004 	movi	r5,4096
 4004920:	0009883a 	mov	r4,zero
 4004924:	40053780 	call	4005378 <alt_icache_flush>
#endif
}
 4004928:	0001883a 	nop
 400492c:	e037883a 	mov	sp,fp
 4004930:	dfc00117 	ldw	ra,4(sp)
 4004934:	df000017 	ldw	fp,0(sp)
 4004938:	dec00204 	addi	sp,sp,8
 400493c:	f800283a 	ret

04004940 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4004940:	defff904 	addi	sp,sp,-28
 4004944:	dfc00615 	stw	ra,24(sp)
 4004948:	df000515 	stw	fp,20(sp)
 400494c:	df000504 	addi	fp,sp,20
 4004950:	e13ffc15 	stw	r4,-16(fp)
 4004954:	e17ffd15 	stw	r5,-12(fp)
 4004958:	e1bffe15 	stw	r6,-8(fp)
 400495c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4004960:	e0800217 	ldw	r2,8(fp)
 4004964:	d8800015 	stw	r2,0(sp)
 4004968:	e1ffff17 	ldw	r7,-4(fp)
 400496c:	e1bffe17 	ldw	r6,-8(fp)
 4004970:	e17ffd17 	ldw	r5,-12(fp)
 4004974:	e13ffc17 	ldw	r4,-16(fp)
 4004978:	4004af00 	call	4004af0 <alt_iic_isr_register>
}  
 400497c:	e037883a 	mov	sp,fp
 4004980:	dfc00117 	ldw	ra,4(sp)
 4004984:	df000017 	ldw	fp,0(sp)
 4004988:	dec00204 	addi	sp,sp,8
 400498c:	f800283a 	ret

04004990 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4004990:	defff904 	addi	sp,sp,-28
 4004994:	df000615 	stw	fp,24(sp)
 4004998:	df000604 	addi	fp,sp,24
 400499c:	e13ffe15 	stw	r4,-8(fp)
 40049a0:	e17fff15 	stw	r5,-4(fp)
 40049a4:	e0bfff17 	ldw	r2,-4(fp)
 40049a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40049ac:	0005303a 	rdctl	r2,status
 40049b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40049b4:	e0fffb17 	ldw	r3,-20(fp)
 40049b8:	00bfff84 	movi	r2,-2
 40049bc:	1884703a 	and	r2,r3,r2
 40049c0:	1001703a 	wrctl	status,r2
  
  return context;
 40049c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40049c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 40049cc:	00c00044 	movi	r3,1
 40049d0:	e0bffa17 	ldw	r2,-24(fp)
 40049d4:	1884983a 	sll	r2,r3,r2
 40049d8:	1007883a 	mov	r3,r2
 40049dc:	d0a6b017 	ldw	r2,-25920(gp)
 40049e0:	1884b03a 	or	r2,r3,r2
 40049e4:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40049e8:	d0a6b017 	ldw	r2,-25920(gp)
 40049ec:	100170fa 	wrctl	ienable,r2
 40049f0:	e0bffc17 	ldw	r2,-16(fp)
 40049f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40049f8:	e0bffd17 	ldw	r2,-12(fp)
 40049fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4004a00:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4004a04:	0001883a 	nop
}
 4004a08:	e037883a 	mov	sp,fp
 4004a0c:	df000017 	ldw	fp,0(sp)
 4004a10:	dec00104 	addi	sp,sp,4
 4004a14:	f800283a 	ret

04004a18 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4004a18:	defff904 	addi	sp,sp,-28
 4004a1c:	df000615 	stw	fp,24(sp)
 4004a20:	df000604 	addi	fp,sp,24
 4004a24:	e13ffe15 	stw	r4,-8(fp)
 4004a28:	e17fff15 	stw	r5,-4(fp)
 4004a2c:	e0bfff17 	ldw	r2,-4(fp)
 4004a30:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004a34:	0005303a 	rdctl	r2,status
 4004a38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004a3c:	e0fffb17 	ldw	r3,-20(fp)
 4004a40:	00bfff84 	movi	r2,-2
 4004a44:	1884703a 	and	r2,r3,r2
 4004a48:	1001703a 	wrctl	status,r2
  
  return context;
 4004a4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4004a50:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4004a54:	00c00044 	movi	r3,1
 4004a58:	e0bffa17 	ldw	r2,-24(fp)
 4004a5c:	1884983a 	sll	r2,r3,r2
 4004a60:	0084303a 	nor	r2,zero,r2
 4004a64:	1007883a 	mov	r3,r2
 4004a68:	d0a6b017 	ldw	r2,-25920(gp)
 4004a6c:	1884703a 	and	r2,r3,r2
 4004a70:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4004a74:	d0a6b017 	ldw	r2,-25920(gp)
 4004a78:	100170fa 	wrctl	ienable,r2
 4004a7c:	e0bffc17 	ldw	r2,-16(fp)
 4004a80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004a84:	e0bffd17 	ldw	r2,-12(fp)
 4004a88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4004a8c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4004a90:	0001883a 	nop
}
 4004a94:	e037883a 	mov	sp,fp
 4004a98:	df000017 	ldw	fp,0(sp)
 4004a9c:	dec00104 	addi	sp,sp,4
 4004aa0:	f800283a 	ret

04004aa4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4004aa4:	defffc04 	addi	sp,sp,-16
 4004aa8:	df000315 	stw	fp,12(sp)
 4004aac:	df000304 	addi	fp,sp,12
 4004ab0:	e13ffe15 	stw	r4,-8(fp)
 4004ab4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4004ab8:	000530fa 	rdctl	r2,ienable
 4004abc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4004ac0:	00c00044 	movi	r3,1
 4004ac4:	e0bfff17 	ldw	r2,-4(fp)
 4004ac8:	1884983a 	sll	r2,r3,r2
 4004acc:	1007883a 	mov	r3,r2
 4004ad0:	e0bffd17 	ldw	r2,-12(fp)
 4004ad4:	1884703a 	and	r2,r3,r2
 4004ad8:	1004c03a 	cmpne	r2,r2,zero
 4004adc:	10803fcc 	andi	r2,r2,255
}
 4004ae0:	e037883a 	mov	sp,fp
 4004ae4:	df000017 	ldw	fp,0(sp)
 4004ae8:	dec00104 	addi	sp,sp,4
 4004aec:	f800283a 	ret

04004af0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4004af0:	defff504 	addi	sp,sp,-44
 4004af4:	dfc00a15 	stw	ra,40(sp)
 4004af8:	df000915 	stw	fp,36(sp)
 4004afc:	df000904 	addi	fp,sp,36
 4004b00:	e13ffc15 	stw	r4,-16(fp)
 4004b04:	e17ffd15 	stw	r5,-12(fp)
 4004b08:	e1bffe15 	stw	r6,-8(fp)
 4004b0c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4004b10:	00bffa84 	movi	r2,-22
 4004b14:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4004b18:	e0bffd17 	ldw	r2,-12(fp)
 4004b1c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4004b20:	e0bff817 	ldw	r2,-32(fp)
 4004b24:	10800808 	cmpgei	r2,r2,32
 4004b28:	1000271e 	bne	r2,zero,4004bc8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004b2c:	0005303a 	rdctl	r2,status
 4004b30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004b34:	e0fffb17 	ldw	r3,-20(fp)
 4004b38:	00bfff84 	movi	r2,-2
 4004b3c:	1884703a 	and	r2,r3,r2
 4004b40:	1001703a 	wrctl	status,r2
  
  return context;
 4004b44:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4004b48:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4004b4c:	00810074 	movhi	r2,1025
 4004b50:	10a36b04 	addi	r2,r2,-29268
 4004b54:	e0fff817 	ldw	r3,-32(fp)
 4004b58:	180690fa 	slli	r3,r3,3
 4004b5c:	10c5883a 	add	r2,r2,r3
 4004b60:	e0fffe17 	ldw	r3,-8(fp)
 4004b64:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4004b68:	00810074 	movhi	r2,1025
 4004b6c:	10a36b04 	addi	r2,r2,-29268
 4004b70:	e0fff817 	ldw	r3,-32(fp)
 4004b74:	180690fa 	slli	r3,r3,3
 4004b78:	10c5883a 	add	r2,r2,r3
 4004b7c:	10800104 	addi	r2,r2,4
 4004b80:	e0ffff17 	ldw	r3,-4(fp)
 4004b84:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4004b88:	e0bffe17 	ldw	r2,-8(fp)
 4004b8c:	10000526 	beq	r2,zero,4004ba4 <alt_iic_isr_register+0xb4>
 4004b90:	e0bff817 	ldw	r2,-32(fp)
 4004b94:	100b883a 	mov	r5,r2
 4004b98:	e13ffc17 	ldw	r4,-16(fp)
 4004b9c:	40049900 	call	4004990 <alt_ic_irq_enable>
 4004ba0:	00000406 	br	4004bb4 <alt_iic_isr_register+0xc4>
 4004ba4:	e0bff817 	ldw	r2,-32(fp)
 4004ba8:	100b883a 	mov	r5,r2
 4004bac:	e13ffc17 	ldw	r4,-16(fp)
 4004bb0:	4004a180 	call	4004a18 <alt_ic_irq_disable>
 4004bb4:	e0bff715 	stw	r2,-36(fp)
 4004bb8:	e0bffa17 	ldw	r2,-24(fp)
 4004bbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004bc0:	e0bff917 	ldw	r2,-28(fp)
 4004bc4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4004bc8:	e0bff717 	ldw	r2,-36(fp)
}
 4004bcc:	e037883a 	mov	sp,fp
 4004bd0:	dfc00117 	ldw	ra,4(sp)
 4004bd4:	df000017 	ldw	fp,0(sp)
 4004bd8:	dec00204 	addi	sp,sp,8
 4004bdc:	f800283a 	ret

04004be0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4004be0:	defff904 	addi	sp,sp,-28
 4004be4:	dfc00615 	stw	ra,24(sp)
 4004be8:	df000515 	stw	fp,20(sp)
 4004bec:	df000504 	addi	fp,sp,20
 4004bf0:	e13ffc15 	stw	r4,-16(fp)
 4004bf4:	e17ffd15 	stw	r5,-12(fp)
 4004bf8:	e1bffe15 	stw	r6,-8(fp)
 4004bfc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4004c00:	e1bfff17 	ldw	r6,-4(fp)
 4004c04:	e17ffe17 	ldw	r5,-8(fp)
 4004c08:	e13ffd17 	ldw	r4,-12(fp)
 4004c0c:	4004e200 	call	4004e20 <open>
 4004c10:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4004c14:	e0bffb17 	ldw	r2,-20(fp)
 4004c18:	10001c16 	blt	r2,zero,4004c8c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4004c1c:	00810034 	movhi	r2,1024
 4004c20:	10983504 	addi	r2,r2,24788
 4004c24:	e0fffb17 	ldw	r3,-20(fp)
 4004c28:	18c00324 	muli	r3,r3,12
 4004c2c:	10c5883a 	add	r2,r2,r3
 4004c30:	10c00017 	ldw	r3,0(r2)
 4004c34:	e0bffc17 	ldw	r2,-16(fp)
 4004c38:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4004c3c:	00810034 	movhi	r2,1024
 4004c40:	10983504 	addi	r2,r2,24788
 4004c44:	e0fffb17 	ldw	r3,-20(fp)
 4004c48:	18c00324 	muli	r3,r3,12
 4004c4c:	10c5883a 	add	r2,r2,r3
 4004c50:	10800104 	addi	r2,r2,4
 4004c54:	10c00017 	ldw	r3,0(r2)
 4004c58:	e0bffc17 	ldw	r2,-16(fp)
 4004c5c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4004c60:	00810034 	movhi	r2,1024
 4004c64:	10983504 	addi	r2,r2,24788
 4004c68:	e0fffb17 	ldw	r3,-20(fp)
 4004c6c:	18c00324 	muli	r3,r3,12
 4004c70:	10c5883a 	add	r2,r2,r3
 4004c74:	10800204 	addi	r2,r2,8
 4004c78:	10c00017 	ldw	r3,0(r2)
 4004c7c:	e0bffc17 	ldw	r2,-16(fp)
 4004c80:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4004c84:	e13ffb17 	ldw	r4,-20(fp)
 4004c88:	40037880 	call	4003788 <alt_release_fd>
  }
} 
 4004c8c:	0001883a 	nop
 4004c90:	e037883a 	mov	sp,fp
 4004c94:	dfc00117 	ldw	ra,4(sp)
 4004c98:	df000017 	ldw	fp,0(sp)
 4004c9c:	dec00204 	addi	sp,sp,8
 4004ca0:	f800283a 	ret

04004ca4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4004ca4:	defffb04 	addi	sp,sp,-20
 4004ca8:	dfc00415 	stw	ra,16(sp)
 4004cac:	df000315 	stw	fp,12(sp)
 4004cb0:	df000304 	addi	fp,sp,12
 4004cb4:	e13ffd15 	stw	r4,-12(fp)
 4004cb8:	e17ffe15 	stw	r5,-8(fp)
 4004cbc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4004cc0:	01c07fc4 	movi	r7,511
 4004cc4:	01800044 	movi	r6,1
 4004cc8:	e17ffd17 	ldw	r5,-12(fp)
 4004ccc:	01010034 	movhi	r4,1024
 4004cd0:	21183804 	addi	r4,r4,24800
 4004cd4:	4004be00 	call	4004be0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4004cd8:	01c07fc4 	movi	r7,511
 4004cdc:	000d883a 	mov	r6,zero
 4004ce0:	e17ffe17 	ldw	r5,-8(fp)
 4004ce4:	01010034 	movhi	r4,1024
 4004ce8:	21183504 	addi	r4,r4,24788
 4004cec:	4004be00 	call	4004be0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4004cf0:	01c07fc4 	movi	r7,511
 4004cf4:	01800044 	movi	r6,1
 4004cf8:	e17fff17 	ldw	r5,-4(fp)
 4004cfc:	01010034 	movhi	r4,1024
 4004d00:	21183b04 	addi	r4,r4,24812
 4004d04:	4004be00 	call	4004be0 <alt_open_fd>
}  
 4004d08:	0001883a 	nop
 4004d0c:	e037883a 	mov	sp,fp
 4004d10:	dfc00117 	ldw	ra,4(sp)
 4004d14:	df000017 	ldw	fp,0(sp)
 4004d18:	dec00204 	addi	sp,sp,8
 4004d1c:	f800283a 	ret

04004d20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4004d20:	defffe04 	addi	sp,sp,-8
 4004d24:	dfc00115 	stw	ra,4(sp)
 4004d28:	df000015 	stw	fp,0(sp)
 4004d2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4004d30:	d0a00917 	ldw	r2,-32732(gp)
 4004d34:	10000326 	beq	r2,zero,4004d44 <alt_get_errno+0x24>
 4004d38:	d0a00917 	ldw	r2,-32732(gp)
 4004d3c:	103ee83a 	callr	r2
 4004d40:	00000106 	br	4004d48 <alt_get_errno+0x28>
 4004d44:	d0a6ac04 	addi	r2,gp,-25936
}
 4004d48:	e037883a 	mov	sp,fp
 4004d4c:	dfc00117 	ldw	ra,4(sp)
 4004d50:	df000017 	ldw	fp,0(sp)
 4004d54:	dec00204 	addi	sp,sp,8
 4004d58:	f800283a 	ret

04004d5c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4004d5c:	defffd04 	addi	sp,sp,-12
 4004d60:	df000215 	stw	fp,8(sp)
 4004d64:	df000204 	addi	fp,sp,8
 4004d68:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4004d6c:	e0bfff17 	ldw	r2,-4(fp)
 4004d70:	10800217 	ldw	r2,8(r2)
 4004d74:	10d00034 	orhi	r3,r2,16384
 4004d78:	e0bfff17 	ldw	r2,-4(fp)
 4004d7c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4004d80:	e03ffe15 	stw	zero,-8(fp)
 4004d84:	00001d06 	br	4004dfc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4004d88:	00810034 	movhi	r2,1024
 4004d8c:	10983504 	addi	r2,r2,24788
 4004d90:	e0fffe17 	ldw	r3,-8(fp)
 4004d94:	18c00324 	muli	r3,r3,12
 4004d98:	10c5883a 	add	r2,r2,r3
 4004d9c:	10c00017 	ldw	r3,0(r2)
 4004da0:	e0bfff17 	ldw	r2,-4(fp)
 4004da4:	10800017 	ldw	r2,0(r2)
 4004da8:	1880111e 	bne	r3,r2,4004df0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4004dac:	00810034 	movhi	r2,1024
 4004db0:	10983504 	addi	r2,r2,24788
 4004db4:	e0fffe17 	ldw	r3,-8(fp)
 4004db8:	18c00324 	muli	r3,r3,12
 4004dbc:	10c5883a 	add	r2,r2,r3
 4004dc0:	10800204 	addi	r2,r2,8
 4004dc4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4004dc8:	1000090e 	bge	r2,zero,4004df0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4004dcc:	e0bffe17 	ldw	r2,-8(fp)
 4004dd0:	10c00324 	muli	r3,r2,12
 4004dd4:	00810034 	movhi	r2,1024
 4004dd8:	10983504 	addi	r2,r2,24788
 4004ddc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4004de0:	e0bfff17 	ldw	r2,-4(fp)
 4004de4:	18800226 	beq	r3,r2,4004df0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4004de8:	00bffcc4 	movi	r2,-13
 4004dec:	00000806 	br	4004e10 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4004df0:	e0bffe17 	ldw	r2,-8(fp)
 4004df4:	10800044 	addi	r2,r2,1
 4004df8:	e0bffe15 	stw	r2,-8(fp)
 4004dfc:	d0a00817 	ldw	r2,-32736(gp)
 4004e00:	1007883a 	mov	r3,r2
 4004e04:	e0bffe17 	ldw	r2,-8(fp)
 4004e08:	18bfdf2e 	bgeu	r3,r2,4004d88 <__alt_mem_onchip_memory+0xfbffcd88>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4004e0c:	0005883a 	mov	r2,zero
}
 4004e10:	e037883a 	mov	sp,fp
 4004e14:	df000017 	ldw	fp,0(sp)
 4004e18:	dec00104 	addi	sp,sp,4
 4004e1c:	f800283a 	ret

04004e20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4004e20:	defff604 	addi	sp,sp,-40
 4004e24:	dfc00915 	stw	ra,36(sp)
 4004e28:	df000815 	stw	fp,32(sp)
 4004e2c:	df000804 	addi	fp,sp,32
 4004e30:	e13ffd15 	stw	r4,-12(fp)
 4004e34:	e17ffe15 	stw	r5,-8(fp)
 4004e38:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4004e3c:	00bfffc4 	movi	r2,-1
 4004e40:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4004e44:	00bffb44 	movi	r2,-19
 4004e48:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4004e4c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4004e50:	d1600604 	addi	r5,gp,-32744
 4004e54:	e13ffd17 	ldw	r4,-12(fp)
 4004e58:	400513c0 	call	400513c <alt_find_dev>
 4004e5c:	e0bff815 	stw	r2,-32(fp)
 4004e60:	e0bff817 	ldw	r2,-32(fp)
 4004e64:	1000051e 	bne	r2,zero,4004e7c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4004e68:	e13ffd17 	ldw	r4,-12(fp)
 4004e6c:	40051cc0 	call	40051cc <alt_find_file>
 4004e70:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4004e74:	00800044 	movi	r2,1
 4004e78:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4004e7c:	e0bff817 	ldw	r2,-32(fp)
 4004e80:	10002926 	beq	r2,zero,4004f28 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4004e84:	e13ff817 	ldw	r4,-32(fp)
 4004e88:	40052d40 	call	40052d4 <alt_get_fd>
 4004e8c:	e0bff915 	stw	r2,-28(fp)
 4004e90:	e0bff917 	ldw	r2,-28(fp)
 4004e94:	1000030e 	bge	r2,zero,4004ea4 <open+0x84>
    {
      status = index;
 4004e98:	e0bff917 	ldw	r2,-28(fp)
 4004e9c:	e0bffa15 	stw	r2,-24(fp)
 4004ea0:	00002306 	br	4004f30 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 4004ea4:	e0bff917 	ldw	r2,-28(fp)
 4004ea8:	10c00324 	muli	r3,r2,12
 4004eac:	00810034 	movhi	r2,1024
 4004eb0:	10983504 	addi	r2,r2,24788
 4004eb4:	1885883a 	add	r2,r3,r2
 4004eb8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4004ebc:	e0fffe17 	ldw	r3,-8(fp)
 4004ec0:	00900034 	movhi	r2,16384
 4004ec4:	10bfffc4 	addi	r2,r2,-1
 4004ec8:	1886703a 	and	r3,r3,r2
 4004ecc:	e0bffc17 	ldw	r2,-16(fp)
 4004ed0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4004ed4:	e0bffb17 	ldw	r2,-20(fp)
 4004ed8:	1000051e 	bne	r2,zero,4004ef0 <open+0xd0>
 4004edc:	e13ffc17 	ldw	r4,-16(fp)
 4004ee0:	4004d5c0 	call	4004d5c <alt_file_locked>
 4004ee4:	e0bffa15 	stw	r2,-24(fp)
 4004ee8:	e0bffa17 	ldw	r2,-24(fp)
 4004eec:	10001016 	blt	r2,zero,4004f30 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4004ef0:	e0bff817 	ldw	r2,-32(fp)
 4004ef4:	10800317 	ldw	r2,12(r2)
 4004ef8:	10000826 	beq	r2,zero,4004f1c <open+0xfc>
 4004efc:	e0bff817 	ldw	r2,-32(fp)
 4004f00:	10800317 	ldw	r2,12(r2)
 4004f04:	e1ffff17 	ldw	r7,-4(fp)
 4004f08:	e1bffe17 	ldw	r6,-8(fp)
 4004f0c:	e17ffd17 	ldw	r5,-12(fp)
 4004f10:	e13ffc17 	ldw	r4,-16(fp)
 4004f14:	103ee83a 	callr	r2
 4004f18:	00000106 	br	4004f20 <open+0x100>
 4004f1c:	0005883a 	mov	r2,zero
 4004f20:	e0bffa15 	stw	r2,-24(fp)
 4004f24:	00000206 	br	4004f30 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4004f28:	00bffb44 	movi	r2,-19
 4004f2c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4004f30:	e0bffa17 	ldw	r2,-24(fp)
 4004f34:	1000090e 	bge	r2,zero,4004f5c <open+0x13c>
  {
    alt_release_fd (index);  
 4004f38:	e13ff917 	ldw	r4,-28(fp)
 4004f3c:	40037880 	call	4003788 <alt_release_fd>
    ALT_ERRNO = -status;
 4004f40:	4004d200 	call	4004d20 <alt_get_errno>
 4004f44:	1007883a 	mov	r3,r2
 4004f48:	e0bffa17 	ldw	r2,-24(fp)
 4004f4c:	0085c83a 	sub	r2,zero,r2
 4004f50:	18800015 	stw	r2,0(r3)
    return -1;
 4004f54:	00bfffc4 	movi	r2,-1
 4004f58:	00000106 	br	4004f60 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4004f5c:	e0bff917 	ldw	r2,-28(fp)
}
 4004f60:	e037883a 	mov	sp,fp
 4004f64:	dfc00117 	ldw	ra,4(sp)
 4004f68:	df000017 	ldw	fp,0(sp)
 4004f6c:	dec00204 	addi	sp,sp,8
 4004f70:	f800283a 	ret

04004f74 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4004f74:	defffa04 	addi	sp,sp,-24
 4004f78:	df000515 	stw	fp,20(sp)
 4004f7c:	df000504 	addi	fp,sp,20
 4004f80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004f84:	0005303a 	rdctl	r2,status
 4004f88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004f8c:	e0fffc17 	ldw	r3,-16(fp)
 4004f90:	00bfff84 	movi	r2,-2
 4004f94:	1884703a 	and	r2,r3,r2
 4004f98:	1001703a 	wrctl	status,r2
  
  return context;
 4004f9c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4004fa0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4004fa4:	e0bfff17 	ldw	r2,-4(fp)
 4004fa8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4004fac:	e0bffd17 	ldw	r2,-12(fp)
 4004fb0:	10800017 	ldw	r2,0(r2)
 4004fb4:	e0fffd17 	ldw	r3,-12(fp)
 4004fb8:	18c00117 	ldw	r3,4(r3)
 4004fbc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4004fc0:	e0bffd17 	ldw	r2,-12(fp)
 4004fc4:	10800117 	ldw	r2,4(r2)
 4004fc8:	e0fffd17 	ldw	r3,-12(fp)
 4004fcc:	18c00017 	ldw	r3,0(r3)
 4004fd0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4004fd4:	e0bffd17 	ldw	r2,-12(fp)
 4004fd8:	e0fffd17 	ldw	r3,-12(fp)
 4004fdc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4004fe0:	e0bffd17 	ldw	r2,-12(fp)
 4004fe4:	e0fffd17 	ldw	r3,-12(fp)
 4004fe8:	10c00015 	stw	r3,0(r2)
 4004fec:	e0bffb17 	ldw	r2,-20(fp)
 4004ff0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004ff4:	e0bffe17 	ldw	r2,-8(fp)
 4004ff8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4004ffc:	0001883a 	nop
 4005000:	e037883a 	mov	sp,fp
 4005004:	df000017 	ldw	fp,0(sp)
 4005008:	dec00104 	addi	sp,sp,4
 400500c:	f800283a 	ret

04005010 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4005010:	defffb04 	addi	sp,sp,-20
 4005014:	dfc00415 	stw	ra,16(sp)
 4005018:	df000315 	stw	fp,12(sp)
 400501c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4005020:	d0a00c17 	ldw	r2,-32720(gp)
 4005024:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4005028:	d0a6b217 	ldw	r2,-25912(gp)
 400502c:	10800044 	addi	r2,r2,1
 4005030:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4005034:	00002e06 	br	40050f0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4005038:	e0bffd17 	ldw	r2,-12(fp)
 400503c:	10800017 	ldw	r2,0(r2)
 4005040:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4005044:	e0bffd17 	ldw	r2,-12(fp)
 4005048:	10800403 	ldbu	r2,16(r2)
 400504c:	10803fcc 	andi	r2,r2,255
 4005050:	10000426 	beq	r2,zero,4005064 <alt_tick+0x54>
 4005054:	d0a6b217 	ldw	r2,-25912(gp)
 4005058:	1000021e 	bne	r2,zero,4005064 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400505c:	e0bffd17 	ldw	r2,-12(fp)
 4005060:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4005064:	e0bffd17 	ldw	r2,-12(fp)
 4005068:	10800217 	ldw	r2,8(r2)
 400506c:	d0e6b217 	ldw	r3,-25912(gp)
 4005070:	18801d36 	bltu	r3,r2,40050e8 <alt_tick+0xd8>
 4005074:	e0bffd17 	ldw	r2,-12(fp)
 4005078:	10800403 	ldbu	r2,16(r2)
 400507c:	10803fcc 	andi	r2,r2,255
 4005080:	1000191e 	bne	r2,zero,40050e8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4005084:	e0bffd17 	ldw	r2,-12(fp)
 4005088:	10800317 	ldw	r2,12(r2)
 400508c:	e0fffd17 	ldw	r3,-12(fp)
 4005090:	18c00517 	ldw	r3,20(r3)
 4005094:	1809883a 	mov	r4,r3
 4005098:	103ee83a 	callr	r2
 400509c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 40050a0:	e0bfff17 	ldw	r2,-4(fp)
 40050a4:	1000031e 	bne	r2,zero,40050b4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 40050a8:	e13ffd17 	ldw	r4,-12(fp)
 40050ac:	4004f740 	call	4004f74 <alt_alarm_stop>
 40050b0:	00000d06 	br	40050e8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 40050b4:	e0bffd17 	ldw	r2,-12(fp)
 40050b8:	10c00217 	ldw	r3,8(r2)
 40050bc:	e0bfff17 	ldw	r2,-4(fp)
 40050c0:	1887883a 	add	r3,r3,r2
 40050c4:	e0bffd17 	ldw	r2,-12(fp)
 40050c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40050cc:	e0bffd17 	ldw	r2,-12(fp)
 40050d0:	10c00217 	ldw	r3,8(r2)
 40050d4:	d0a6b217 	ldw	r2,-25912(gp)
 40050d8:	1880032e 	bgeu	r3,r2,40050e8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 40050dc:	e0bffd17 	ldw	r2,-12(fp)
 40050e0:	00c00044 	movi	r3,1
 40050e4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40050e8:	e0bffe17 	ldw	r2,-8(fp)
 40050ec:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40050f0:	e0fffd17 	ldw	r3,-12(fp)
 40050f4:	d0a00c04 	addi	r2,gp,-32720
 40050f8:	18bfcf1e 	bne	r3,r2,4005038 <__alt_mem_onchip_memory+0xfbffd038>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40050fc:	0001883a 	nop
}
 4005100:	0001883a 	nop
 4005104:	e037883a 	mov	sp,fp
 4005108:	dfc00117 	ldw	ra,4(sp)
 400510c:	df000017 	ldw	fp,0(sp)
 4005110:	dec00204 	addi	sp,sp,8
 4005114:	f800283a 	ret

04005118 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4005118:	deffff04 	addi	sp,sp,-4
 400511c:	df000015 	stw	fp,0(sp)
 4005120:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4005124:	000170fa 	wrctl	ienable,zero
}
 4005128:	0001883a 	nop
 400512c:	e037883a 	mov	sp,fp
 4005130:	df000017 	ldw	fp,0(sp)
 4005134:	dec00104 	addi	sp,sp,4
 4005138:	f800283a 	ret

0400513c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400513c:	defffa04 	addi	sp,sp,-24
 4005140:	dfc00515 	stw	ra,20(sp)
 4005144:	df000415 	stw	fp,16(sp)
 4005148:	df000404 	addi	fp,sp,16
 400514c:	e13ffe15 	stw	r4,-8(fp)
 4005150:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4005154:	e0bfff17 	ldw	r2,-4(fp)
 4005158:	10800017 	ldw	r2,0(r2)
 400515c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4005160:	e13ffe17 	ldw	r4,-8(fp)
 4005164:	40003980 	call	4000398 <strlen>
 4005168:	10800044 	addi	r2,r2,1
 400516c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4005170:	00000d06 	br	40051a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4005174:	e0bffc17 	ldw	r2,-16(fp)
 4005178:	10800217 	ldw	r2,8(r2)
 400517c:	e0fffd17 	ldw	r3,-12(fp)
 4005180:	180d883a 	mov	r6,r3
 4005184:	e17ffe17 	ldw	r5,-8(fp)
 4005188:	1009883a 	mov	r4,r2
 400518c:	40054f00 	call	40054f0 <memcmp>
 4005190:	1000021e 	bne	r2,zero,400519c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4005194:	e0bffc17 	ldw	r2,-16(fp)
 4005198:	00000706 	br	40051b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400519c:	e0bffc17 	ldw	r2,-16(fp)
 40051a0:	10800017 	ldw	r2,0(r2)
 40051a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40051a8:	e0fffc17 	ldw	r3,-16(fp)
 40051ac:	e0bfff17 	ldw	r2,-4(fp)
 40051b0:	18bff01e 	bne	r3,r2,4005174 <__alt_mem_onchip_memory+0xfbffd174>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40051b4:	0005883a 	mov	r2,zero
}
 40051b8:	e037883a 	mov	sp,fp
 40051bc:	dfc00117 	ldw	ra,4(sp)
 40051c0:	df000017 	ldw	fp,0(sp)
 40051c4:	dec00204 	addi	sp,sp,8
 40051c8:	f800283a 	ret

040051cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40051cc:	defffb04 	addi	sp,sp,-20
 40051d0:	dfc00415 	stw	ra,16(sp)
 40051d4:	df000315 	stw	fp,12(sp)
 40051d8:	df000304 	addi	fp,sp,12
 40051dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40051e0:	d0a00417 	ldw	r2,-32752(gp)
 40051e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40051e8:	00003106 	br	40052b0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40051ec:	e0bffd17 	ldw	r2,-12(fp)
 40051f0:	10800217 	ldw	r2,8(r2)
 40051f4:	1009883a 	mov	r4,r2
 40051f8:	40003980 	call	4000398 <strlen>
 40051fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4005200:	e0bffd17 	ldw	r2,-12(fp)
 4005204:	10c00217 	ldw	r3,8(r2)
 4005208:	e0bffe17 	ldw	r2,-8(fp)
 400520c:	10bfffc4 	addi	r2,r2,-1
 4005210:	1885883a 	add	r2,r3,r2
 4005214:	10800003 	ldbu	r2,0(r2)
 4005218:	10803fcc 	andi	r2,r2,255
 400521c:	1080201c 	xori	r2,r2,128
 4005220:	10bfe004 	addi	r2,r2,-128
 4005224:	10800bd8 	cmpnei	r2,r2,47
 4005228:	1000031e 	bne	r2,zero,4005238 <alt_find_file+0x6c>
    {
      len -= 1;
 400522c:	e0bffe17 	ldw	r2,-8(fp)
 4005230:	10bfffc4 	addi	r2,r2,-1
 4005234:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4005238:	e0bffe17 	ldw	r2,-8(fp)
 400523c:	e0ffff17 	ldw	r3,-4(fp)
 4005240:	1885883a 	add	r2,r3,r2
 4005244:	10800003 	ldbu	r2,0(r2)
 4005248:	10803fcc 	andi	r2,r2,255
 400524c:	1080201c 	xori	r2,r2,128
 4005250:	10bfe004 	addi	r2,r2,-128
 4005254:	10800be0 	cmpeqi	r2,r2,47
 4005258:	1000081e 	bne	r2,zero,400527c <alt_find_file+0xb0>
 400525c:	e0bffe17 	ldw	r2,-8(fp)
 4005260:	e0ffff17 	ldw	r3,-4(fp)
 4005264:	1885883a 	add	r2,r3,r2
 4005268:	10800003 	ldbu	r2,0(r2)
 400526c:	10803fcc 	andi	r2,r2,255
 4005270:	1080201c 	xori	r2,r2,128
 4005274:	10bfe004 	addi	r2,r2,-128
 4005278:	10000a1e 	bne	r2,zero,40052a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 400527c:	e0bffd17 	ldw	r2,-12(fp)
 4005280:	10800217 	ldw	r2,8(r2)
 4005284:	e0fffe17 	ldw	r3,-8(fp)
 4005288:	180d883a 	mov	r6,r3
 400528c:	e17fff17 	ldw	r5,-4(fp)
 4005290:	1009883a 	mov	r4,r2
 4005294:	40054f00 	call	40054f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4005298:	1000021e 	bne	r2,zero,40052a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400529c:	e0bffd17 	ldw	r2,-12(fp)
 40052a0:	00000706 	br	40052c0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 40052a4:	e0bffd17 	ldw	r2,-12(fp)
 40052a8:	10800017 	ldw	r2,0(r2)
 40052ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40052b0:	e0fffd17 	ldw	r3,-12(fp)
 40052b4:	d0a00404 	addi	r2,gp,-32752
 40052b8:	18bfcc1e 	bne	r3,r2,40051ec <__alt_mem_onchip_memory+0xfbffd1ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40052bc:	0005883a 	mov	r2,zero
}
 40052c0:	e037883a 	mov	sp,fp
 40052c4:	dfc00117 	ldw	ra,4(sp)
 40052c8:	df000017 	ldw	fp,0(sp)
 40052cc:	dec00204 	addi	sp,sp,8
 40052d0:	f800283a 	ret

040052d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40052d4:	defffc04 	addi	sp,sp,-16
 40052d8:	df000315 	stw	fp,12(sp)
 40052dc:	df000304 	addi	fp,sp,12
 40052e0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40052e4:	00bffa04 	movi	r2,-24
 40052e8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40052ec:	e03ffd15 	stw	zero,-12(fp)
 40052f0:	00001906 	br	4005358 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 40052f4:	00810034 	movhi	r2,1024
 40052f8:	10983504 	addi	r2,r2,24788
 40052fc:	e0fffd17 	ldw	r3,-12(fp)
 4005300:	18c00324 	muli	r3,r3,12
 4005304:	10c5883a 	add	r2,r2,r3
 4005308:	10800017 	ldw	r2,0(r2)
 400530c:	10000f1e 	bne	r2,zero,400534c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 4005310:	00810034 	movhi	r2,1024
 4005314:	10983504 	addi	r2,r2,24788
 4005318:	e0fffd17 	ldw	r3,-12(fp)
 400531c:	18c00324 	muli	r3,r3,12
 4005320:	10c5883a 	add	r2,r2,r3
 4005324:	e0ffff17 	ldw	r3,-4(fp)
 4005328:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 400532c:	d0e00817 	ldw	r3,-32736(gp)
 4005330:	e0bffd17 	ldw	r2,-12(fp)
 4005334:	1880020e 	bge	r3,r2,4005340 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 4005338:	e0bffd17 	ldw	r2,-12(fp)
 400533c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 4005340:	e0bffd17 	ldw	r2,-12(fp)
 4005344:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4005348:	00000606 	br	4005364 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400534c:	e0bffd17 	ldw	r2,-12(fp)
 4005350:	10800044 	addi	r2,r2,1
 4005354:	e0bffd15 	stw	r2,-12(fp)
 4005358:	e0bffd17 	ldw	r2,-12(fp)
 400535c:	10800810 	cmplti	r2,r2,32
 4005360:	103fe41e 	bne	r2,zero,40052f4 <__alt_mem_onchip_memory+0xfbffd2f4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4005364:	e0bffe17 	ldw	r2,-8(fp)
}
 4005368:	e037883a 	mov	sp,fp
 400536c:	df000017 	ldw	fp,0(sp)
 4005370:	dec00104 	addi	sp,sp,4
 4005374:	f800283a 	ret

04005378 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4005378:	defffb04 	addi	sp,sp,-20
 400537c:	df000415 	stw	fp,16(sp)
 4005380:	df000404 	addi	fp,sp,16
 4005384:	e13ffe15 	stw	r4,-8(fp)
 4005388:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 400538c:	e0bfff17 	ldw	r2,-4(fp)
 4005390:	10840070 	cmpltui	r2,r2,4097
 4005394:	1000021e 	bne	r2,zero,40053a0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4005398:	00840004 	movi	r2,4096
 400539c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 40053a0:	e0fffe17 	ldw	r3,-8(fp)
 40053a4:	e0bfff17 	ldw	r2,-4(fp)
 40053a8:	1885883a 	add	r2,r3,r2
 40053ac:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40053b0:	e0bffe17 	ldw	r2,-8(fp)
 40053b4:	e0bffc15 	stw	r2,-16(fp)
 40053b8:	00000506 	br	40053d0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 40053bc:	e0bffc17 	ldw	r2,-16(fp)
 40053c0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40053c4:	e0bffc17 	ldw	r2,-16(fp)
 40053c8:	10800804 	addi	r2,r2,32
 40053cc:	e0bffc15 	stw	r2,-16(fp)
 40053d0:	e0fffc17 	ldw	r3,-16(fp)
 40053d4:	e0bffd17 	ldw	r2,-12(fp)
 40053d8:	18bff836 	bltu	r3,r2,40053bc <__alt_mem_onchip_memory+0xfbffd3bc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40053dc:	e0bffe17 	ldw	r2,-8(fp)
 40053e0:	108007cc 	andi	r2,r2,31
 40053e4:	10000226 	beq	r2,zero,40053f0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40053e8:	e0bffc17 	ldw	r2,-16(fp)
 40053ec:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40053f0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 40053f4:	0001883a 	nop
 40053f8:	e037883a 	mov	sp,fp
 40053fc:	df000017 	ldw	fp,0(sp)
 4005400:	dec00104 	addi	sp,sp,4
 4005404:	f800283a 	ret

04005408 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4005408:	defffe04 	addi	sp,sp,-8
 400540c:	df000115 	stw	fp,4(sp)
 4005410:	df000104 	addi	fp,sp,4
 4005414:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4005418:	e0bfff17 	ldw	r2,-4(fp)
 400541c:	10bffe84 	addi	r2,r2,-6
 4005420:	10c00428 	cmpgeui	r3,r2,16
 4005424:	18001a1e 	bne	r3,zero,4005490 <alt_exception_cause_generated_bad_addr+0x88>
 4005428:	100690ba 	slli	r3,r2,2
 400542c:	00810034 	movhi	r2,1024
 4005430:	10951004 	addi	r2,r2,21568
 4005434:	1885883a 	add	r2,r3,r2
 4005438:	10800017 	ldw	r2,0(r2)
 400543c:	1000683a 	jmp	r2
 4005440:	04005480 	call	400548 <__alt_mem_sdram-0x3bffab8>
 4005444:	04005480 	call	400548 <__alt_mem_sdram-0x3bffab8>
 4005448:	04005490 	cmplti	r16,zero,338
 400544c:	04005490 	cmplti	r16,zero,338
 4005450:	04005490 	cmplti	r16,zero,338
 4005454:	04005480 	call	400548 <__alt_mem_sdram-0x3bffab8>
 4005458:	04005488 	cmpgei	r16,zero,338
 400545c:	04005490 	cmplti	r16,zero,338
 4005460:	04005480 	call	400548 <__alt_mem_sdram-0x3bffab8>
 4005464:	04005480 	call	400548 <__alt_mem_sdram-0x3bffab8>
 4005468:	04005490 	cmplti	r16,zero,338
 400546c:	04005480 	call	400548 <__alt_mem_sdram-0x3bffab8>
 4005470:	04005488 	cmpgei	r16,zero,338
 4005474:	04005490 	cmplti	r16,zero,338
 4005478:	04005490 	cmplti	r16,zero,338
 400547c:	04005480 	call	400548 <__alt_mem_sdram-0x3bffab8>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4005480:	00800044 	movi	r2,1
 4005484:	00000306 	br	4005494 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4005488:	0005883a 	mov	r2,zero
 400548c:	00000106 	br	4005494 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4005490:	0005883a 	mov	r2,zero
  }
}
 4005494:	e037883a 	mov	sp,fp
 4005498:	df000017 	ldw	fp,0(sp)
 400549c:	dec00104 	addi	sp,sp,4
 40054a0:	f800283a 	ret

040054a4 <atexit>:
 40054a4:	200b883a 	mov	r5,r4
 40054a8:	000f883a 	mov	r7,zero
 40054ac:	000d883a 	mov	r6,zero
 40054b0:	0009883a 	mov	r4,zero
 40054b4:	400556c1 	jmpi	400556c <__register_exitproc>

040054b8 <exit>:
 40054b8:	defffe04 	addi	sp,sp,-8
 40054bc:	000b883a 	mov	r5,zero
 40054c0:	dc000015 	stw	r16,0(sp)
 40054c4:	dfc00115 	stw	ra,4(sp)
 40054c8:	2021883a 	mov	r16,r4
 40054cc:	40056840 	call	4005684 <__call_exitprocs>
 40054d0:	00810034 	movhi	r2,1024
 40054d4:	109cad04 	addi	r2,r2,29364
 40054d8:	11000017 	ldw	r4,0(r2)
 40054dc:	20800f17 	ldw	r2,60(r4)
 40054e0:	10000126 	beq	r2,zero,40054e8 <exit+0x30>
 40054e4:	103ee83a 	callr	r2
 40054e8:	8009883a 	mov	r4,r16
 40054ec:	40058040 	call	4005804 <_exit>

040054f0 <memcmp>:
 40054f0:	01c000c4 	movi	r7,3
 40054f4:	3980192e 	bgeu	r7,r6,400555c <memcmp+0x6c>
 40054f8:	2144b03a 	or	r2,r4,r5
 40054fc:	11c4703a 	and	r2,r2,r7
 4005500:	10000f26 	beq	r2,zero,4005540 <memcmp+0x50>
 4005504:	20800003 	ldbu	r2,0(r4)
 4005508:	28c00003 	ldbu	r3,0(r5)
 400550c:	10c0151e 	bne	r2,r3,4005564 <memcmp+0x74>
 4005510:	31bfff84 	addi	r6,r6,-2
 4005514:	01ffffc4 	movi	r7,-1
 4005518:	00000406 	br	400552c <memcmp+0x3c>
 400551c:	20800003 	ldbu	r2,0(r4)
 4005520:	28c00003 	ldbu	r3,0(r5)
 4005524:	31bfffc4 	addi	r6,r6,-1
 4005528:	10c00e1e 	bne	r2,r3,4005564 <memcmp+0x74>
 400552c:	21000044 	addi	r4,r4,1
 4005530:	29400044 	addi	r5,r5,1
 4005534:	31fff91e 	bne	r6,r7,400551c <__alt_mem_onchip_memory+0xfbffd51c>
 4005538:	0005883a 	mov	r2,zero
 400553c:	f800283a 	ret
 4005540:	20c00017 	ldw	r3,0(r4)
 4005544:	28800017 	ldw	r2,0(r5)
 4005548:	18bfee1e 	bne	r3,r2,4005504 <__alt_mem_onchip_memory+0xfbffd504>
 400554c:	31bfff04 	addi	r6,r6,-4
 4005550:	21000104 	addi	r4,r4,4
 4005554:	29400104 	addi	r5,r5,4
 4005558:	39bff936 	bltu	r7,r6,4005540 <__alt_mem_onchip_memory+0xfbffd540>
 400555c:	303fe91e 	bne	r6,zero,4005504 <__alt_mem_onchip_memory+0xfbffd504>
 4005560:	003ff506 	br	4005538 <__alt_mem_onchip_memory+0xfbffd538>
 4005564:	10c5c83a 	sub	r2,r2,r3
 4005568:	f800283a 	ret

0400556c <__register_exitproc>:
 400556c:	defffa04 	addi	sp,sp,-24
 4005570:	dc000315 	stw	r16,12(sp)
 4005574:	04010034 	movhi	r16,1024
 4005578:	841cad04 	addi	r16,r16,29364
 400557c:	80c00017 	ldw	r3,0(r16)
 4005580:	dc400415 	stw	r17,16(sp)
 4005584:	dfc00515 	stw	ra,20(sp)
 4005588:	18805217 	ldw	r2,328(r3)
 400558c:	2023883a 	mov	r17,r4
 4005590:	10003726 	beq	r2,zero,4005670 <__register_exitproc+0x104>
 4005594:	10c00117 	ldw	r3,4(r2)
 4005598:	010007c4 	movi	r4,31
 400559c:	20c00e16 	blt	r4,r3,40055d8 <__register_exitproc+0x6c>
 40055a0:	1a000044 	addi	r8,r3,1
 40055a4:	8800221e 	bne	r17,zero,4005630 <__register_exitproc+0xc4>
 40055a8:	18c00084 	addi	r3,r3,2
 40055ac:	18c7883a 	add	r3,r3,r3
 40055b0:	18c7883a 	add	r3,r3,r3
 40055b4:	12000115 	stw	r8,4(r2)
 40055b8:	10c7883a 	add	r3,r2,r3
 40055bc:	19400015 	stw	r5,0(r3)
 40055c0:	0005883a 	mov	r2,zero
 40055c4:	dfc00517 	ldw	ra,20(sp)
 40055c8:	dc400417 	ldw	r17,16(sp)
 40055cc:	dc000317 	ldw	r16,12(sp)
 40055d0:	dec00604 	addi	sp,sp,24
 40055d4:	f800283a 	ret
 40055d8:	00800034 	movhi	r2,0
 40055dc:	10800004 	addi	r2,r2,0
 40055e0:	10002626 	beq	r2,zero,400567c <__register_exitproc+0x110>
 40055e4:	01006404 	movi	r4,400
 40055e8:	d9400015 	stw	r5,0(sp)
 40055ec:	d9800115 	stw	r6,4(sp)
 40055f0:	d9c00215 	stw	r7,8(sp)
 40055f4:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 40055f8:	d9400017 	ldw	r5,0(sp)
 40055fc:	d9800117 	ldw	r6,4(sp)
 4005600:	d9c00217 	ldw	r7,8(sp)
 4005604:	10001d26 	beq	r2,zero,400567c <__register_exitproc+0x110>
 4005608:	81000017 	ldw	r4,0(r16)
 400560c:	10000115 	stw	zero,4(r2)
 4005610:	02000044 	movi	r8,1
 4005614:	22405217 	ldw	r9,328(r4)
 4005618:	0007883a 	mov	r3,zero
 400561c:	12400015 	stw	r9,0(r2)
 4005620:	20805215 	stw	r2,328(r4)
 4005624:	10006215 	stw	zero,392(r2)
 4005628:	10006315 	stw	zero,396(r2)
 400562c:	883fde26 	beq	r17,zero,40055a8 <__alt_mem_onchip_memory+0xfbffd5a8>
 4005630:	18c9883a 	add	r4,r3,r3
 4005634:	2109883a 	add	r4,r4,r4
 4005638:	1109883a 	add	r4,r2,r4
 400563c:	21802215 	stw	r6,136(r4)
 4005640:	01800044 	movi	r6,1
 4005644:	12406217 	ldw	r9,392(r2)
 4005648:	30cc983a 	sll	r6,r6,r3
 400564c:	4992b03a 	or	r9,r9,r6
 4005650:	12406215 	stw	r9,392(r2)
 4005654:	21c04215 	stw	r7,264(r4)
 4005658:	01000084 	movi	r4,2
 400565c:	893fd21e 	bne	r17,r4,40055a8 <__alt_mem_onchip_memory+0xfbffd5a8>
 4005660:	11006317 	ldw	r4,396(r2)
 4005664:	218cb03a 	or	r6,r4,r6
 4005668:	11806315 	stw	r6,396(r2)
 400566c:	003fce06 	br	40055a8 <__alt_mem_onchip_memory+0xfbffd5a8>
 4005670:	18805304 	addi	r2,r3,332
 4005674:	18805215 	stw	r2,328(r3)
 4005678:	003fc606 	br	4005594 <__alt_mem_onchip_memory+0xfbffd594>
 400567c:	00bfffc4 	movi	r2,-1
 4005680:	003fd006 	br	40055c4 <__alt_mem_onchip_memory+0xfbffd5c4>

04005684 <__call_exitprocs>:
 4005684:	defff504 	addi	sp,sp,-44
 4005688:	df000915 	stw	fp,36(sp)
 400568c:	dd400615 	stw	r21,24(sp)
 4005690:	dc800315 	stw	r18,12(sp)
 4005694:	dfc00a15 	stw	ra,40(sp)
 4005698:	ddc00815 	stw	r23,32(sp)
 400569c:	dd800715 	stw	r22,28(sp)
 40056a0:	dd000515 	stw	r20,20(sp)
 40056a4:	dcc00415 	stw	r19,16(sp)
 40056a8:	dc400215 	stw	r17,8(sp)
 40056ac:	dc000115 	stw	r16,4(sp)
 40056b0:	d9000015 	stw	r4,0(sp)
 40056b4:	2839883a 	mov	fp,r5
 40056b8:	04800044 	movi	r18,1
 40056bc:	057fffc4 	movi	r21,-1
 40056c0:	00810034 	movhi	r2,1024
 40056c4:	109cad04 	addi	r2,r2,29364
 40056c8:	12000017 	ldw	r8,0(r2)
 40056cc:	45005217 	ldw	r20,328(r8)
 40056d0:	44c05204 	addi	r19,r8,328
 40056d4:	a0001c26 	beq	r20,zero,4005748 <__call_exitprocs+0xc4>
 40056d8:	a0800117 	ldw	r2,4(r20)
 40056dc:	15ffffc4 	addi	r23,r2,-1
 40056e0:	b8000d16 	blt	r23,zero,4005718 <__call_exitprocs+0x94>
 40056e4:	14000044 	addi	r16,r2,1
 40056e8:	8421883a 	add	r16,r16,r16
 40056ec:	8421883a 	add	r16,r16,r16
 40056f0:	84402004 	addi	r17,r16,128
 40056f4:	a463883a 	add	r17,r20,r17
 40056f8:	a421883a 	add	r16,r20,r16
 40056fc:	e0001e26 	beq	fp,zero,4005778 <__call_exitprocs+0xf4>
 4005700:	80804017 	ldw	r2,256(r16)
 4005704:	e0801c26 	beq	fp,r2,4005778 <__call_exitprocs+0xf4>
 4005708:	bdffffc4 	addi	r23,r23,-1
 400570c:	843fff04 	addi	r16,r16,-4
 4005710:	8c7fff04 	addi	r17,r17,-4
 4005714:	bd7ff91e 	bne	r23,r21,40056fc <__alt_mem_onchip_memory+0xfbffd6fc>
 4005718:	00800034 	movhi	r2,0
 400571c:	10800004 	addi	r2,r2,0
 4005720:	10000926 	beq	r2,zero,4005748 <__call_exitprocs+0xc4>
 4005724:	a0800117 	ldw	r2,4(r20)
 4005728:	1000301e 	bne	r2,zero,40057ec <__call_exitprocs+0x168>
 400572c:	a0800017 	ldw	r2,0(r20)
 4005730:	10003226 	beq	r2,zero,40057fc <__call_exitprocs+0x178>
 4005734:	a009883a 	mov	r4,r20
 4005738:	98800015 	stw	r2,0(r19)
 400573c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4005740:	9d000017 	ldw	r20,0(r19)
 4005744:	a03fe41e 	bne	r20,zero,40056d8 <__alt_mem_onchip_memory+0xfbffd6d8>
 4005748:	dfc00a17 	ldw	ra,40(sp)
 400574c:	df000917 	ldw	fp,36(sp)
 4005750:	ddc00817 	ldw	r23,32(sp)
 4005754:	dd800717 	ldw	r22,28(sp)
 4005758:	dd400617 	ldw	r21,24(sp)
 400575c:	dd000517 	ldw	r20,20(sp)
 4005760:	dcc00417 	ldw	r19,16(sp)
 4005764:	dc800317 	ldw	r18,12(sp)
 4005768:	dc400217 	ldw	r17,8(sp)
 400576c:	dc000117 	ldw	r16,4(sp)
 4005770:	dec00b04 	addi	sp,sp,44
 4005774:	f800283a 	ret
 4005778:	a0800117 	ldw	r2,4(r20)
 400577c:	80c00017 	ldw	r3,0(r16)
 4005780:	10bfffc4 	addi	r2,r2,-1
 4005784:	15c01426 	beq	r2,r23,40057d8 <__call_exitprocs+0x154>
 4005788:	80000015 	stw	zero,0(r16)
 400578c:	183fde26 	beq	r3,zero,4005708 <__alt_mem_onchip_memory+0xfbffd708>
 4005790:	95c8983a 	sll	r4,r18,r23
 4005794:	a0806217 	ldw	r2,392(r20)
 4005798:	a5800117 	ldw	r22,4(r20)
 400579c:	2084703a 	and	r2,r4,r2
 40057a0:	10000b26 	beq	r2,zero,40057d0 <__call_exitprocs+0x14c>
 40057a4:	a0806317 	ldw	r2,396(r20)
 40057a8:	2088703a 	and	r4,r4,r2
 40057ac:	20000c1e 	bne	r4,zero,40057e0 <__call_exitprocs+0x15c>
 40057b0:	89400017 	ldw	r5,0(r17)
 40057b4:	d9000017 	ldw	r4,0(sp)
 40057b8:	183ee83a 	callr	r3
 40057bc:	a0800117 	ldw	r2,4(r20)
 40057c0:	15bfbf1e 	bne	r2,r22,40056c0 <__alt_mem_onchip_memory+0xfbffd6c0>
 40057c4:	98800017 	ldw	r2,0(r19)
 40057c8:	153fcf26 	beq	r2,r20,4005708 <__alt_mem_onchip_memory+0xfbffd708>
 40057cc:	003fbc06 	br	40056c0 <__alt_mem_onchip_memory+0xfbffd6c0>
 40057d0:	183ee83a 	callr	r3
 40057d4:	003ff906 	br	40057bc <__alt_mem_onchip_memory+0xfbffd7bc>
 40057d8:	a5c00115 	stw	r23,4(r20)
 40057dc:	003feb06 	br	400578c <__alt_mem_onchip_memory+0xfbffd78c>
 40057e0:	89000017 	ldw	r4,0(r17)
 40057e4:	183ee83a 	callr	r3
 40057e8:	003ff406 	br	40057bc <__alt_mem_onchip_memory+0xfbffd7bc>
 40057ec:	a0800017 	ldw	r2,0(r20)
 40057f0:	a027883a 	mov	r19,r20
 40057f4:	1029883a 	mov	r20,r2
 40057f8:	003fb606 	br	40056d4 <__alt_mem_onchip_memory+0xfbffd6d4>
 40057fc:	0005883a 	mov	r2,zero
 4005800:	003ffb06 	br	40057f0 <__alt_mem_onchip_memory+0xfbffd7f0>

04005804 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4005804:	defffd04 	addi	sp,sp,-12
 4005808:	df000215 	stw	fp,8(sp)
 400580c:	df000204 	addi	fp,sp,8
 4005810:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4005814:	0001883a 	nop
 4005818:	e0bfff17 	ldw	r2,-4(fp)
 400581c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4005820:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4005824:	10000226 	beq	r2,zero,4005830 <_exit+0x2c>
    ALT_SIM_FAIL();
 4005828:	002af070 	cmpltui	zero,zero,43969
 400582c:	00000106 	br	4005834 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4005830:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4005834:	003fff06 	br	4005834 <__alt_mem_onchip_memory+0xfbffd834>
