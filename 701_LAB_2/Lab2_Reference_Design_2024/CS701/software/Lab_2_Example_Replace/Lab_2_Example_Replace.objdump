
Lab_2_Example_Replace.elf:     file format elf32-littlenios2
Lab_2_Example_Replace.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000034b4 memsz 0x000034b4 flags r-x
    LOAD off    0x000044d4 vaddr 0x040034d4 paddr 0x040047e8 align 2**12
         filesz 0x00001314 memsz 0x00001314 flags rw-
    LOAD off    0x00005afc vaddr 0x04005afc paddr 0x04005afc align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003254  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  04003498  04003498  00004498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001314  040034d4  040047e8  000044d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  04005afc  04005afc  00005afc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04005c1c  04005c1c  000057e8  2**0
                  CONTENTS
  7 .onchip_memory 00000000  08008000  08008000  000057e8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000057e8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000006f0  00000000  00000000  00005810  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00008ef7  00000000  00000000  00005f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003422  00000000  00000000  0000edf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003816  00000000  00000000  00012219  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000da0  00000000  00000000  00015a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001fec  00000000  00000000  000167d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001592  00000000  00000000  000187bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00019d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002e8  00000000  00000000  00019db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001bdfa  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0001bdfd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001be00  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001be01  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0001be02  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0001be0b  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0001be14  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000e  00000000  00000000  0001be1d  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000034  00000000  00000000  0001be2b  2**0
                  CONTENTS, READONLY
 27 .jdi          00004c0a  00000000  00000000  0001be5f  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00065324  00000000  00000000  00020a69  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
04003498 l    d  .rodata	00000000 .rodata
040034d4 l    d  .rwdata	00000000 .rwdata
04005afc l    d  .bss	00000000 .bss
04005c1c l    d  .sdram	00000000 .sdram
08008000 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab_2_Example_Replace_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
040007d0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
040034d4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
0400105c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
040011f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04001328 l     F .text	00000034 alt_dev_reg
040035b4 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04001618 l     F .text	0000020c altera_avalon_jtag_uart_irq
04001824 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04001e5c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
040021d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04002328 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04002354 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040027c8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04002908 l     F .text	0000003c alt_get_errno
04002944 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04005b18 g     O .bss	00000004 alt_instruction_exception_handler
04001148 g     F .text	0000007c alt_main
04005b1c g     O .bss	00000100 alt_irq
040047e8 g       *ABS*	00000000 __flash_rwdata_start
04000784 g     F .text	0000004c printf
04002d64 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000001c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
04005afc g     O .bss	00000004 errno
04005b04 g     O .bss	00000004 alt_argv
0400c7bc g       *ABS*	00000000 _gp
040011c4 g     F .text	00000030 usleep
0400463c g     O .rwdata	00000180 alt_fd_list
04002d88 g     F .text	00000090 alt_find_dev
04003154 g     F .text	00000028 memcpy
0400288c g     F .text	0000007c alt_io_redirect
04003498 g       *ABS*	00000000 __DTOR_END__
04003054 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04001a1c g     F .text	0000021c altera_avalon_jtag_uart_read
04000748 g     F .text	0000003c _printf_r
04000fa0 g     F .text	00000064 .hidden __udivsi3
04002fc4 g     F .text	00000090 alt_icache_flush
040047d4 g     O .rwdata	00000004 alt_max_fd
040047bc g     O .rwdata	00000004 _global_impure_ptr
04005c1c g       *ABS*	00000000 __bss_end
040026d8 g     F .text	000000f0 alt_iic_isr_register
04002c5c g     F .text	00000108 alt_tick
0400268c g     F .text	0000004c alt_ic_irq_enabled
04000290 g     F .text	000000c4 display_count
04002bc0 g     F .text	0000009c alt_alarm_stop
04005b0c g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d4 alt_irq_handler
04004614 g     O .rwdata	00000028 alt_dev_null
040022e0 g     F .text	00000048 alt_dcache_flush_all
040047e8 g       *ABS*	00000000 __ram_rwdata_end
08008000 g       *ABS*	00000000 __alt_mem_onchip_memory
040047cc g     O .rwdata	00000008 alt_dev_list
04001230 g     F .text	000000f8 write
040034d4 g       *ABS*	00000000 __ram_rodata_end
04001004 g     F .text	00000058 .hidden __umodsi3
04005c1c g       *ABS*	00000000 end
04001558 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04003498 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04001ed4 g     F .text	0000007c alt_avalon_timer_sc_init
04001c38 g     F .text	00000224 altera_avalon_jtag_uart_write
0400083c g     F .text	00000524 ___vfprintf_internal_r
040032d4 g     F .text	00000190 __call_exitprocs
04000244 g     F .text	0000004c _start
04005b10 g     O .bss	00000004 _alt_tick_rate
04005b14 g     O .bss	00000004 _alt_nticks
04001394 g     F .text	00000060 alt_sys_init
0400317c g     F .text	00000158 __register_exitproc
040018c4 g     F .text	00000068 altera_avalon_jtag_uart_close
040034d4 g       *ABS*	00000000 __ram_rwdata_start
04003498 g       *ABS*	00000000 __ram_rodata_start
040013f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04002f20 g     F .text	000000a4 alt_get_fd
0400207c g     F .text	00000158 alt_busy_sleep
04003124 g     F .text	00000030 memcmp
040014b4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04005c1c g       *ABS*	00000000 __alt_stack_base
04001504 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04002e18 g     F .text	00000108 alt_find_file
04002390 g     F .text	000000a4 alt_dev_llist_insert
04000d7c g     F .text	000000b8 __sfvwrite_small_dev
04005afc g       *ABS*	00000000 __bss_start
04000354 g     F .text	000003f4 main
04005b08 g     O .bss	00000004 alt_envp
04001454 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
040047d8 g     O .rwdata	00000004 alt_errno
04000ea8 g     F .text	00000084 .hidden __divsi3
04003498 g       *ABS*	00000000 __CTOR_END__
04003498 g       *ABS*	00000000 __flash_rodata_start
04003498 g       *ABS*	00000000 __DTOR_LIST__
0400135c g     F .text	00000038 alt_irq_init
04002b5c g     F .text	00000064 alt_release_fd
040030f0 g     F .text	00000014 atexit
04000e50 g     F .text	00000058 _write_r
040047c0 g     O .rwdata	00000004 _impure_ptr
04005b00 g     O .bss	00000004 alt_argc
04002494 g     F .text	00000060 _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
040047c4 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04002528 g     F .text	00000050 alt_ic_isr_register
040047e8 g       *ABS*	00000000 _edata
04005c1c g       *ABS*	00000000 _end
04000244 g       *ABS*	00000000 __ram_exceptions_end
0400192c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04002600 g     F .text	0000008c alt_ic_irq_disable
04003104 g     F .text	00000020 exit
04000f2c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
04003464 g     F .text	00000034 _exit
04001f50 g     F .text	0000012c alt_alarm_start
04000e34 g     F .text	0000001c strlen
04002a08 g     F .text	00000154 open
040024f4 g     F .text	00000034 alt_icache_flush_all
040047dc g     O .rwdata	00000004 alt_priority_mask
04002578 g     F .text	00000088 alt_ic_irq_enable
04000d60 g     F .text	0000001c __vfprintf_internal
040047e0 g     O .rwdata	00000008 alt_alarm_list
04002434 g     F .text	00000060 _do_ctors
04002210 g     F .text	000000d0 close
040010c4 g     F .text	00000084 alt_load



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_mem_onchip_memory+0xfbff8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810034 	movhi	r2,1024
 4000140:	1096c704 	addi	r2,r2,23324
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810034 	movhi	r2,1024
 4000158:	1096c704 	addi	r2,r2,23324
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_mem_onchip_memory+0xfbff812c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_mem_onchip_memory+0xfbff8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a4d717 	ldw	r2,-27812(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a4d717 	ldw	r2,-27812(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00880014 	movui	r2,8192
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_mem_onchip_memory+0xfbff8248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 4000260:	d6b1ef14 	ori	gp,gp,51132
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000268:	1096bf14 	ori	r2,r2,23292

    movhi r3, %hi(__bss_end)
 400026c:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 4000270:	18d70714 	ori	r3,r3,23580

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_mem_onchip_memory+0xfbff8278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	40010c40 	call	40010c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	40011480 	call	4001148 <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_mem_onchip_memory+0xfbff828c>

04000290 <display_count>:
#include <stdint.h>
#include <alt_types.h>
#include <sys/alt_irq.h>
#include <sys/alt_alarm.h>

int display_count(int count) { // decimal
 4000290:	defffe04 	addi	sp,sp,-8
 4000294:	df000115 	stw	fp,4(sp)
 4000298:	df000104 	addi	fp,sp,4
 400029c:	e13fff15 	stw	r4,-4(fp)
	switch (count) {
 40002a0:	e0bfff17 	ldw	r2,-4(fp)
 40002a4:	108002a8 	cmpgeui	r2,r2,10
 40002a8:	1000251e 	bne	r2,zero,4000340 <display_count+0xb0>
 40002ac:	e0bfff17 	ldw	r2,-4(fp)
 40002b0:	100690ba 	slli	r3,r2,2
 40002b4:	00810034 	movhi	r2,1024
 40002b8:	1080b204 	addi	r2,r2,712
 40002bc:	1885883a 	add	r2,r3,r2
 40002c0:	10800017 	ldw	r2,0(r2)
 40002c4:	1000683a 	jmp	r2
 40002c8:	040002f0 	cmpltui	r16,zero,11
 40002cc:	040002f8 	rdprs	r16,zero,11
 40002d0:	04000300 	call	400030 <__alt_mem_sdram-0x3bfffd0>
 40002d4:	04000308 	cmpgei	r16,zero,12
 40002d8:	04000310 	cmplti	r16,zero,12
 40002dc:	04000318 	cmpnei	r16,zero,12
 40002e0:	04000320 	cmpeqi	r16,zero,12
 40002e4:	04000328 	cmpgeui	r16,zero,12
 40002e8:	04000330 	cmpltui	r16,zero,12
 40002ec:	04000338 	rdprs	r16,zero,12
	case 0:
		return 0b1000000;
 40002f0:	00801004 	movi	r2,64
 40002f4:	00001306 	br	4000344 <display_count+0xb4>
		break;
	case 1:
		return 0b1111001;
 40002f8:	00801e44 	movi	r2,121
 40002fc:	00001106 	br	4000344 <display_count+0xb4>
		break;
	case 2:
		return 0b0100100;
 4000300:	00800904 	movi	r2,36
 4000304:	00000f06 	br	4000344 <display_count+0xb4>
		break;
	case 3:
		return 0b0110000;
 4000308:	00800c04 	movi	r2,48
 400030c:	00000d06 	br	4000344 <display_count+0xb4>
		break;
	case 4:
		return 0b0011001;
 4000310:	00800644 	movi	r2,25
 4000314:	00000b06 	br	4000344 <display_count+0xb4>
		break;
	case 5:
		return 0b0010010;
 4000318:	00800484 	movi	r2,18
 400031c:	00000906 	br	4000344 <display_count+0xb4>
		break;
	case 6:
		return 0b0000010;
 4000320:	00800084 	movi	r2,2
 4000324:	00000706 	br	4000344 <display_count+0xb4>
		break;
	case 7:
		return 0b1111000;
 4000328:	00801e04 	movi	r2,120
 400032c:	00000506 	br	4000344 <display_count+0xb4>
		break;
	case 8:
		return 0b0000000;
 4000330:	0005883a 	mov	r2,zero
 4000334:	00000306 	br	4000344 <display_count+0xb4>
		break;
	case 9:
		return 0b0010000;
 4000338:	00800404 	movi	r2,16
 400033c:	00000106 	br	4000344 <display_count+0xb4>
		break;

	default:
		return 0b1111111;
 4000340:	00801fc4 	movi	r2,127
		break;
	}
}
 4000344:	e037883a 	mov	sp,fp
 4000348:	df000017 	ldw	fp,0(sp)
 400034c:	dec00104 	addi	sp,sp,4
 4000350:	f800283a 	ret

04000354 <main>:

int main()
{
 4000354:	deffee04 	addi	sp,sp,-72
 4000358:	dfc01115 	stw	ra,68(sp)
 400035c:	df001015 	stw	fp,64(sp)
 4000360:	df001004 	addi	fp,sp,64
	int KEY0, KEY1, KEY2;
	int input;
	int state, count = 0;
 4000364:	e03ff115 	stw	zero,-60(fp)
	uint16_t bitmask = IORD_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE);
 4000368:	00820074 	movhi	r2,2049
 400036c:	10842804 	addi	r2,r2,4256
 4000370:	10800037 	ldwio	r2,0(r2)
 4000374:	e0bff30d 	sth	r2,-52(fp)

	int dataNOCRD = IORD_ALTERA_AVALON_PIO_DATA(NOC_32_BASE);
 4000378:	00820074 	movhi	r2,2049
 400037c:	10840804 	addi	r2,r2,4128
 4000380:	10800037 	ldwio	r2,0(r2)
 4000384:	e0bff415 	stw	r2,-48(fp)
	printf("\n %d \n", dataNOCRD);
 4000388:	e17ff417 	ldw	r5,-48(fp)
 400038c:	01010034 	movhi	r4,1024
 4000390:	210d2604 	addi	r4,r4,13464
 4000394:	40007840 	call	4000784 <printf>
	//int dataNOCWR = IOWR_ALTERA_AVALON_PIO_DATA(NOC_32_BASE);
	int dataNOCsplit[8];

	int addrNOCRD = IORD_ALTERA_AVALON_PIO_DATA(NOC_8_BASE);
 4000398:	00820074 	movhi	r2,2049
 400039c:	10840c04 	addi	r2,r2,4144
 40003a0:	10800037 	ldwio	r2,0(r2)
 40003a4:	e0bff515 	stw	r2,-44(fp)
	printf("\n %d \n", addrNOCRD);
 40003a8:	e17ff517 	ldw	r5,-44(fp)
 40003ac:	01010034 	movhi	r4,1024
 40003b0:	210d2604 	addi	r4,r4,13464
 40003b4:	40007840 	call	4000784 <printf>
	//int addrNOCWR = IOWR_ALTERA_AVALON_PIO_DATA(NOC_8_BASE);

	while(1) {
		//printf("%d \n", (IORD_ALTERA_AVALON_PIO_DATA(BUTTON_PIO_BASE)));
		//usleep(500);
		if (IORD_ALTERA_AVALON_PIO_DATA(BUTTON_PIO_BASE) == 13) {
 40003b8:	00820074 	movhi	r2,2049
 40003bc:	10842404 	addi	r2,r2,4240
 40003c0:	10800037 	ldwio	r2,0(r2)
 40003c4:	10800358 	cmpnei	r2,r2,13
 40003c8:	1000161e 	bne	r2,zero,4000424 <main+0xd0>
			//printf("button check = 14 \n");
			if (state > 4){
 40003cc:	e0bff017 	ldw	r2,-64(fp)
 40003d0:	10800150 	cmplti	r2,r2,5
 40003d4:	1000031e 	bne	r2,zero,40003e4 <main+0x90>
				state = 4;
 40003d8:	00800104 	movi	r2,4
 40003dc:	e0bff015 	stw	r2,-64(fp)
 40003e0:	00000206 	br	40003ec <main+0x98>
			} else {
				state = 10;
 40003e4:	00800284 	movi	r2,10
 40003e8:	e0bff015 	stw	r2,-64(fp)
			}
			count = count + 1;
 40003ec:	e0bff117 	ldw	r2,-60(fp)
 40003f0:	10800044 	addi	r2,r2,1
 40003f4:	e0bff115 	stw	r2,-60(fp)
			if (count > 9){
 40003f8:	e0bff117 	ldw	r2,-60(fp)
 40003fc:	10800290 	cmplti	r2,r2,10
 4000400:	1000011e 	bne	r2,zero,4000408 <main+0xb4>
				count = 0;
 4000404:	e03ff115 	stw	zero,-60(fp)
			}
			usleep(250000);
 4000408:	01000134 	movhi	r4,4
 400040c:	21342404 	addi	r4,r4,-12144
 4000410:	40011c40 	call	40011c4 <usleep>
			printf("%d \n", count);
 4000414:	e17ff117 	ldw	r5,-60(fp)
 4000418:	01010034 	movhi	r4,1024
 400041c:	210d2804 	addi	r4,r4,13472
 4000420:	40007840 	call	4000784 <printf>
		}
		int digit0 = display_count(count);
 4000424:	e13ff117 	ldw	r4,-60(fp)
 4000428:	40002900 	call	4000290 <display_count>
 400042c:	e0bff615 	stw	r2,-40(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(DIGIT_0_PIO_BASE, digit0);
 4000430:	00820074 	movhi	r2,2049
 4000434:	10841c04 	addi	r2,r2,4208
 4000438:	e0fff617 	ldw	r3,-40(fp)
 400043c:	10c00035 	stwio	r3,0(r2)

		//

		int mask = 0xF;
 4000440:	008003c4 	movi	r2,15
 4000444:	e0bff715 	stw	r2,-36(fp)

		for (int i = 0; i < 8; i++) {
 4000448:	e03ff215 	stw	zero,-56(fp)
 400044c:	00001206 	br	4000498 <main+0x144>
			dataNOCsplit[i] = (dataNOCRD >> (4 * i)) & mask;
 4000450:	e0bff217 	ldw	r2,-56(fp)
 4000454:	1085883a 	add	r2,r2,r2
 4000458:	1085883a 	add	r2,r2,r2
 400045c:	1007883a 	mov	r3,r2
 4000460:	e0bff417 	ldw	r2,-48(fp)
 4000464:	10c7d83a 	sra	r3,r2,r3
 4000468:	e0bff717 	ldw	r2,-36(fp)
 400046c:	1886703a 	and	r3,r3,r2
 4000470:	e0bff217 	ldw	r2,-56(fp)
 4000474:	1085883a 	add	r2,r2,r2
 4000478:	1085883a 	add	r2,r2,r2
 400047c:	e13ff004 	addi	r4,fp,-64
 4000480:	2085883a 	add	r2,r4,r2
 4000484:	10800804 	addi	r2,r2,32
 4000488:	10c00015 	stw	r3,0(r2)

		//

		int mask = 0xF;

		for (int i = 0; i < 8; i++) {
 400048c:	e0bff217 	ldw	r2,-56(fp)
 4000490:	10800044 	addi	r2,r2,1
 4000494:	e0bff215 	stw	r2,-56(fp)
 4000498:	e0bff217 	ldw	r2,-56(fp)
 400049c:	10800210 	cmplti	r2,r2,8
 40004a0:	103feb1e 	bne	r2,zero,4000450 <__alt_mem_onchip_memory+0xfbff8450>
			//usleep(250000);
		}



		if ((dataNOCsplit[7] == 8) && ((dataNOCsplit[4] & 0x1) == 0) && (IORD_ALTERA_AVALON_PIO_DATA(BUTTON_PIO_BASE) == 11) ) {
 40004a4:	e0bfff17 	ldw	r2,-4(fp)
 40004a8:	10800218 	cmpnei	r2,r2,8
 40004ac:	1000111e 	bne	r2,zero,40004f4 <main+0x1a0>
 40004b0:	e0bffc17 	ldw	r2,-16(fp)
 40004b4:	1080004c 	andi	r2,r2,1
 40004b8:	10000e1e 	bne	r2,zero,40004f4 <main+0x1a0>
 40004bc:	00820074 	movhi	r2,2049
 40004c0:	10842404 	addi	r2,r2,4240
 40004c4:	10800037 	ldwio	r2,0(r2)
 40004c8:	108002d8 	cmpnei	r2,r2,11
 40004cc:	1000091e 	bne	r2,zero,40004f4 <main+0x1a0>
			IOWR_ALTERA_AVALON_PIO_DATA(NOC_8_BASE, 3);
 40004d0:	00c000c4 	movi	r3,3
 40004d4:	00820074 	movhi	r2,2049
 40004d8:	10840c04 	addi	r2,r2,4144
 40004dc:	10c00035 	stwio	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(NOC_32_BASE, dataNOCRD);
 40004e0:	00820074 	movhi	r2,2049
 40004e4:	10840804 	addi	r2,r2,4128
 40004e8:	e0fff417 	ldw	r3,-48(fp)
 40004ec:	10c00035 	stwio	r3,0(r2)
 40004f0:	00009406 	br	4000744 <main+0x3f0>

		} else if ((dataNOCsplit[7] == 8) && ((dataNOCsplit[4] & 0x1) == 1) && (IORD_ALTERA_AVALON_PIO_DATA(BUTTON_PIO_BASE) == 7) ) {
 40004f4:	e0bfff17 	ldw	r2,-4(fp)
 40004f8:	10800218 	cmpnei	r2,r2,8
 40004fc:	1000111e 	bne	r2,zero,4000544 <main+0x1f0>
 4000500:	e0bffc17 	ldw	r2,-16(fp)
 4000504:	1080004c 	andi	r2,r2,1
 4000508:	10000e26 	beq	r2,zero,4000544 <main+0x1f0>
 400050c:	00820074 	movhi	r2,2049
 4000510:	10842404 	addi	r2,r2,4240
 4000514:	10800037 	ldwio	r2,0(r2)
 4000518:	108001d8 	cmpnei	r2,r2,7
 400051c:	1000091e 	bne	r2,zero,4000544 <main+0x1f0>
			IOWR_ALTERA_AVALON_PIO_DATA(NOC_8_BASE, 3);
 4000520:	00c000c4 	movi	r3,3
 4000524:	00820074 	movhi	r2,2049
 4000528:	10840c04 	addi	r2,r2,4144
 400052c:	10c00035 	stwio	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(NOC_32_BASE, dataNOCRD);
 4000530:	00820074 	movhi	r2,2049
 4000534:	10840804 	addi	r2,r2,4128
 4000538:	e0fff417 	ldw	r3,-48(fp)
 400053c:	10c00035 	stwio	r3,0(r2)
 4000540:	00008006 	br	4000744 <main+0x3f0>

		} else {

			switch(state) {
 4000544:	e0bff017 	ldw	r2,-64(fp)
 4000548:	108002e8 	cmpgeui	r2,r2,11
 400054c:	1000741e 	bne	r2,zero,4000720 <main+0x3cc>
 4000550:	e0bff017 	ldw	r2,-64(fp)
 4000554:	100690ba 	slli	r3,r2,2
 4000558:	00810034 	movhi	r2,1024
 400055c:	10815b04 	addi	r2,r2,1388
 4000560:	1885883a 	add	r2,r3,r2
 4000564:	10800017 	ldw	r2,0(r2)
 4000568:	1000683a 	jmp	r2
 400056c:	04000720 	cmpeqi	r16,zero,28
 4000570:	040006f8 	rdprs	r16,zero,27
 4000574:	040006cc 	andi	r16,zero,27
 4000578:	040006a0 	cmpeqi	r16,zero,26
 400057c:	04000674 	movhi	r16,25
 4000580:	04000720 	cmpeqi	r16,zero,28
 4000584:	04000648 	cmpgei	r16,zero,25
 4000588:	0400061c 	xori	r16,zero,24
 400058c:	040005f0 	cmpltui	r16,zero,23
 4000590:	040005c4 	movi	r16,23
 4000594:	04000598 	cmpnei	r16,zero,22
				case(10):
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_8_BASE, 3);
 4000598:	00c000c4 	movi	r3,3
 400059c:	00820074 	movhi	r2,2049
 40005a0:	10840c04 	addi	r2,r2,4144
 40005a4:	10c00035 	stwio	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_32_BASE, 0x93100000);
 40005a8:	00e4c434 	movhi	r3,37648
 40005ac:	00820074 	movhi	r2,2049
 40005b0:	10840804 	addi	r2,r2,4128
 40005b4:	10c00035 	stwio	r3,0(r2)
					state = 9;
 40005b8:	00800244 	movi	r2,9
 40005bc:	e0bff015 	stw	r2,-64(fp)
				break;
 40005c0:	00006006 	br	4000744 <main+0x3f0>
				case(9):
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_8_BASE, 1);
 40005c4:	00c00044 	movi	r3,1
 40005c8:	00820074 	movhi	r2,2049
 40005cc:	10840c04 	addi	r2,r2,4144
 40005d0:	10c00035 	stwio	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_32_BASE, 0xb1020000);
 40005d4:	00ec40b4 	movhi	r3,45314
 40005d8:	00820074 	movhi	r2,2049
 40005dc:	10840804 	addi	r2,r2,4128
 40005e0:	10c00035 	stwio	r3,0(r2)
					state = 8;
 40005e4:	00800204 	movi	r2,8
 40005e8:	e0bff015 	stw	r2,-64(fp)
				break;
 40005ec:	00005506 	br	4000744 <main+0x3f0>
				case(8):
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_8_BASE, 1);
 40005f0:	00c00044 	movi	r3,1
 40005f4:	00820074 	movhi	r2,2049
 40005f8:	10840c04 	addi	r2,r2,4144
 40005fc:	10c00035 	stwio	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_32_BASE, 0xb1030000);
 4000600:	00ec40f4 	movhi	r3,45315
 4000604:	00820074 	movhi	r2,2049
 4000608:	10840804 	addi	r2,r2,4128
 400060c:	10c00035 	stwio	r3,0(r2)
					state = 7;
 4000610:	008001c4 	movi	r2,7
 4000614:	e0bff015 	stw	r2,-64(fp)
				break;
 4000618:	00004a06 	br	4000744 <main+0x3f0>
				case(7):
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_8_BASE, 0);
 400061c:	0007883a 	mov	r3,zero
 4000620:	00820074 	movhi	r2,2049
 4000624:	10840c04 	addi	r2,r2,4144
 4000628:	10c00035 	stwio	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_32_BASE, 0xa0220000);
 400062c:	00e808b4 	movhi	r3,40994
 4000630:	00820074 	movhi	r2,2049
 4000634:	10840804 	addi	r2,r2,4128
 4000638:	10c00035 	stwio	r3,0(r2)
					state = 6;
 400063c:	00800184 	movi	r2,6
 4000640:	e0bff015 	stw	r2,-64(fp)
				break;
 4000644:	00003f06 	br	4000744 <main+0x3f0>
				case(6):
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_8_BASE, 0);
 4000648:	0007883a 	mov	r3,zero
 400064c:	00820074 	movhi	r2,2049
 4000650:	10840c04 	addi	r2,r2,4144
 4000654:	10c00035 	stwio	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_32_BASE, 0xa0230000);
 4000658:	00e808f4 	movhi	r3,40995
 400065c:	00820074 	movhi	r2,2049
 4000660:	10840804 	addi	r2,r2,4128
 4000664:	10c00035 	stwio	r3,0(r2)
					state = 5;
 4000668:	00800144 	movi	r2,5
 400066c:	e0bff015 	stw	r2,-64(fp)
				break;
 4000670:	00003406 	br	4000744 <main+0x3f0>
				case(4):
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_8_BASE, 0);
 4000674:	0007883a 	mov	r3,zero
 4000678:	00820074 	movhi	r2,2049
 400067c:	10840c04 	addi	r2,r2,4144
 4000680:	10c00035 	stwio	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_32_BASE, 0xa0000000);
 4000684:	00e80034 	movhi	r3,40960
 4000688:	00820074 	movhi	r2,2049
 400068c:	10840804 	addi	r2,r2,4128
 4000690:	10c00035 	stwio	r3,0(r2)
					state = 3;
 4000694:	008000c4 	movi	r2,3
 4000698:	e0bff015 	stw	r2,-64(fp)
				break;
 400069c:	00002906 	br	4000744 <main+0x3f0>
				case(3):
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_8_BASE, 0);
 40006a0:	0007883a 	mov	r3,zero
 40006a4:	00820074 	movhi	r2,2049
 40006a8:	10840c04 	addi	r2,r2,4144
 40006ac:	10c00035 	stwio	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_32_BASE, 0xa0010000);
 40006b0:	00e80074 	movhi	r3,40961
 40006b4:	00820074 	movhi	r2,2049
 40006b8:	10840804 	addi	r2,r2,4128
 40006bc:	10c00035 	stwio	r3,0(r2)
					state = 2;
 40006c0:	00800084 	movi	r2,2
 40006c4:	e0bff015 	stw	r2,-64(fp)
				break;
 40006c8:	00001e06 	br	4000744 <main+0x3f0>
				case(2):
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_8_BASE, 1);
 40006cc:	00c00044 	movi	r3,1
 40006d0:	00820074 	movhi	r2,2049
 40006d4:	10840c04 	addi	r2,r2,4144
 40006d8:	10c00035 	stwio	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_32_BASE, 0xb1000000);
 40006dc:	00ec4034 	movhi	r3,45312
 40006e0:	00820074 	movhi	r2,2049
 40006e4:	10840804 	addi	r2,r2,4128
 40006e8:	10c00035 	stwio	r3,0(r2)
					state = 1;
 40006ec:	00800044 	movi	r2,1
 40006f0:	e0bff015 	stw	r2,-64(fp)
				break;
 40006f4:	00001306 	br	4000744 <main+0x3f0>
				case(1):
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_8_BASE, 1);
 40006f8:	00c00044 	movi	r3,1
 40006fc:	00820074 	movhi	r2,2049
 4000700:	10840c04 	addi	r2,r2,4144
 4000704:	10c00035 	stwio	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_32_BASE, 0xb1010000);
 4000708:	00ec4074 	movhi	r3,45313
 400070c:	00820074 	movhi	r2,2049
 4000710:	10840804 	addi	r2,r2,4128
 4000714:	10c00035 	stwio	r3,0(r2)
					state = 0;
 4000718:	e03ff015 	stw	zero,-64(fp)
				break;
 400071c:	00000906 	br	4000744 <main+0x3f0>
				default:
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_8_BASE, 1);
 4000720:	00c00044 	movi	r3,1
 4000724:	00820074 	movhi	r2,2049
 4000728:	10840c04 	addi	r2,r2,4144
 400072c:	10c00035 	stwio	r3,0(r2)
					IOWR_ALTERA_AVALON_PIO_DATA(NOC_32_BASE, 0x00000000);
 4000730:	0007883a 	mov	r3,zero
 4000734:	00820074 	movhi	r2,2049
 4000738:	10840804 	addi	r2,r2,4128
 400073c:	10c00035 	stwio	r3,0(r2)
				break;
 4000740:	0001883a 	nop
			}

		}
	}
 4000744:	003f1c06 	br	40003b8 <__alt_mem_onchip_memory+0xfbff83b8>

04000748 <_printf_r>:
 4000748:	defffd04 	addi	sp,sp,-12
 400074c:	dfc00015 	stw	ra,0(sp)
 4000750:	d9800115 	stw	r6,4(sp)
 4000754:	d9c00215 	stw	r7,8(sp)
 4000758:	20c00217 	ldw	r3,8(r4)
 400075c:	01810034 	movhi	r6,1024
 4000760:	31835f04 	addi	r6,r6,3452
 4000764:	19800115 	stw	r6,4(r3)
 4000768:	280d883a 	mov	r6,r5
 400076c:	21400217 	ldw	r5,8(r4)
 4000770:	d9c00104 	addi	r7,sp,4
 4000774:	400083c0 	call	400083c <___vfprintf_internal_r>
 4000778:	dfc00017 	ldw	ra,0(sp)
 400077c:	dec00304 	addi	sp,sp,12
 4000780:	f800283a 	ret

04000784 <printf>:
 4000784:	defffc04 	addi	sp,sp,-16
 4000788:	dfc00015 	stw	ra,0(sp)
 400078c:	d9400115 	stw	r5,4(sp)
 4000790:	d9800215 	stw	r6,8(sp)
 4000794:	d9c00315 	stw	r7,12(sp)
 4000798:	00810034 	movhi	r2,1024
 400079c:	1091f004 	addi	r2,r2,18368
 40007a0:	10800017 	ldw	r2,0(r2)
 40007a4:	01410034 	movhi	r5,1024
 40007a8:	29435f04 	addi	r5,r5,3452
 40007ac:	10c00217 	ldw	r3,8(r2)
 40007b0:	d9800104 	addi	r6,sp,4
 40007b4:	19400115 	stw	r5,4(r3)
 40007b8:	200b883a 	mov	r5,r4
 40007bc:	11000217 	ldw	r4,8(r2)
 40007c0:	4000d600 	call	4000d60 <__vfprintf_internal>
 40007c4:	dfc00017 	ldw	ra,0(sp)
 40007c8:	dec00404 	addi	sp,sp,16
 40007cc:	f800283a 	ret

040007d0 <print_repeat>:
 40007d0:	defffb04 	addi	sp,sp,-20
 40007d4:	dc800315 	stw	r18,12(sp)
 40007d8:	dc400215 	stw	r17,8(sp)
 40007dc:	dc000115 	stw	r16,4(sp)
 40007e0:	dfc00415 	stw	ra,16(sp)
 40007e4:	2025883a 	mov	r18,r4
 40007e8:	2823883a 	mov	r17,r5
 40007ec:	d9800005 	stb	r6,0(sp)
 40007f0:	3821883a 	mov	r16,r7
 40007f4:	04000a0e 	bge	zero,r16,4000820 <print_repeat+0x50>
 40007f8:	88800117 	ldw	r2,4(r17)
 40007fc:	01c00044 	movi	r7,1
 4000800:	d80d883a 	mov	r6,sp
 4000804:	880b883a 	mov	r5,r17
 4000808:	9009883a 	mov	r4,r18
 400080c:	103ee83a 	callr	r2
 4000810:	843fffc4 	addi	r16,r16,-1
 4000814:	103ff726 	beq	r2,zero,40007f4 <__alt_mem_onchip_memory+0xfbff87f4>
 4000818:	00bfffc4 	movi	r2,-1
 400081c:	00000106 	br	4000824 <print_repeat+0x54>
 4000820:	0005883a 	mov	r2,zero
 4000824:	dfc00417 	ldw	ra,16(sp)
 4000828:	dc800317 	ldw	r18,12(sp)
 400082c:	dc400217 	ldw	r17,8(sp)
 4000830:	dc000117 	ldw	r16,4(sp)
 4000834:	dec00504 	addi	sp,sp,20
 4000838:	f800283a 	ret

0400083c <___vfprintf_internal_r>:
 400083c:	deffe504 	addi	sp,sp,-108
 4000840:	d8c00804 	addi	r3,sp,32
 4000844:	df001915 	stw	fp,100(sp)
 4000848:	ddc01815 	stw	r23,96(sp)
 400084c:	dd801715 	stw	r22,92(sp)
 4000850:	dd401615 	stw	r21,88(sp)
 4000854:	dd001515 	stw	r20,84(sp)
 4000858:	dcc01415 	stw	r19,80(sp)
 400085c:	dc801315 	stw	r18,76(sp)
 4000860:	dc401215 	stw	r17,72(sp)
 4000864:	dc001115 	stw	r16,68(sp)
 4000868:	dfc01a15 	stw	ra,104(sp)
 400086c:	2027883a 	mov	r19,r4
 4000870:	2839883a 	mov	fp,r5
 4000874:	382d883a 	mov	r22,r7
 4000878:	d9800f15 	stw	r6,60(sp)
 400087c:	0021883a 	mov	r16,zero
 4000880:	d8000e15 	stw	zero,56(sp)
 4000884:	002f883a 	mov	r23,zero
 4000888:	002b883a 	mov	r21,zero
 400088c:	0025883a 	mov	r18,zero
 4000890:	0023883a 	mov	r17,zero
 4000894:	d8000c15 	stw	zero,48(sp)
 4000898:	d8000b15 	stw	zero,44(sp)
 400089c:	0029883a 	mov	r20,zero
 40008a0:	d8c00915 	stw	r3,36(sp)
 40008a4:	d8c00f17 	ldw	r3,60(sp)
 40008a8:	19000003 	ldbu	r4,0(r3)
 40008ac:	20803fcc 	andi	r2,r4,255
 40008b0:	1080201c 	xori	r2,r2,128
 40008b4:	10bfe004 	addi	r2,r2,-128
 40008b8:	10011c26 	beq	r2,zero,4000d2c <___vfprintf_internal_r+0x4f0>
 40008bc:	00c00044 	movi	r3,1
 40008c0:	a0c01426 	beq	r20,r3,4000914 <___vfprintf_internal_r+0xd8>
 40008c4:	1d000216 	blt	r3,r20,40008d0 <___vfprintf_internal_r+0x94>
 40008c8:	a0000626 	beq	r20,zero,40008e4 <___vfprintf_internal_r+0xa8>
 40008cc:	00011306 	br	4000d1c <___vfprintf_internal_r+0x4e0>
 40008d0:	01400084 	movi	r5,2
 40008d4:	a1401d26 	beq	r20,r5,400094c <___vfprintf_internal_r+0x110>
 40008d8:	014000c4 	movi	r5,3
 40008dc:	a1402926 	beq	r20,r5,4000984 <___vfprintf_internal_r+0x148>
 40008e0:	00010e06 	br	4000d1c <___vfprintf_internal_r+0x4e0>
 40008e4:	01400944 	movi	r5,37
 40008e8:	1140fb26 	beq	r2,r5,4000cd8 <___vfprintf_internal_r+0x49c>
 40008ec:	e0800117 	ldw	r2,4(fp)
 40008f0:	d9000005 	stb	r4,0(sp)
 40008f4:	01c00044 	movi	r7,1
 40008f8:	d80d883a 	mov	r6,sp
 40008fc:	e00b883a 	mov	r5,fp
 4000900:	9809883a 	mov	r4,r19
 4000904:	103ee83a 	callr	r2
 4000908:	1000d61e 	bne	r2,zero,4000c64 <___vfprintf_internal_r+0x428>
 400090c:	84000044 	addi	r16,r16,1
 4000910:	00010206 	br	4000d1c <___vfprintf_internal_r+0x4e0>
 4000914:	01400c04 	movi	r5,48
 4000918:	1140f826 	beq	r2,r5,4000cfc <___vfprintf_internal_r+0x4c0>
 400091c:	01400944 	movi	r5,37
 4000920:	11400a1e 	bne	r2,r5,400094c <___vfprintf_internal_r+0x110>
 4000924:	d8800005 	stb	r2,0(sp)
 4000928:	e0800117 	ldw	r2,4(fp)
 400092c:	a00f883a 	mov	r7,r20
 4000930:	d80d883a 	mov	r6,sp
 4000934:	e00b883a 	mov	r5,fp
 4000938:	9809883a 	mov	r4,r19
 400093c:	103ee83a 	callr	r2
 4000940:	1000c81e 	bne	r2,zero,4000c64 <___vfprintf_internal_r+0x428>
 4000944:	84000044 	addi	r16,r16,1
 4000948:	0000f306 	br	4000d18 <___vfprintf_internal_r+0x4dc>
 400094c:	217ff404 	addi	r5,r4,-48
 4000950:	29403fcc 	andi	r5,r5,255
 4000954:	00c00244 	movi	r3,9
 4000958:	19400736 	bltu	r3,r5,4000978 <___vfprintf_internal_r+0x13c>
 400095c:	00bfffc4 	movi	r2,-1
 4000960:	88800226 	beq	r17,r2,400096c <___vfprintf_internal_r+0x130>
 4000964:	8c4002a4 	muli	r17,r17,10
 4000968:	00000106 	br	4000970 <___vfprintf_internal_r+0x134>
 400096c:	0023883a 	mov	r17,zero
 4000970:	2c63883a 	add	r17,r5,r17
 4000974:	0000e206 	br	4000d00 <___vfprintf_internal_r+0x4c4>
 4000978:	01400b84 	movi	r5,46
 400097c:	1140e426 	beq	r2,r5,4000d10 <___vfprintf_internal_r+0x4d4>
 4000980:	05000084 	movi	r20,2
 4000984:	213ff404 	addi	r4,r4,-48
 4000988:	21003fcc 	andi	r4,r4,255
 400098c:	00c00244 	movi	r3,9
 4000990:	19000736 	bltu	r3,r4,40009b0 <___vfprintf_internal_r+0x174>
 4000994:	00bfffc4 	movi	r2,-1
 4000998:	90800226 	beq	r18,r2,40009a4 <___vfprintf_internal_r+0x168>
 400099c:	948002a4 	muli	r18,r18,10
 40009a0:	00000106 	br	40009a8 <___vfprintf_internal_r+0x16c>
 40009a4:	0025883a 	mov	r18,zero
 40009a8:	24a5883a 	add	r18,r4,r18
 40009ac:	0000db06 	br	4000d1c <___vfprintf_internal_r+0x4e0>
 40009b0:	00c01b04 	movi	r3,108
 40009b4:	10c0d426 	beq	r2,r3,4000d08 <___vfprintf_internal_r+0x4cc>
 40009b8:	013fffc4 	movi	r4,-1
 40009bc:	91000226 	beq	r18,r4,40009c8 <___vfprintf_internal_r+0x18c>
 40009c0:	d8000b15 	stw	zero,44(sp)
 40009c4:	00000106 	br	40009cc <___vfprintf_internal_r+0x190>
 40009c8:	04800044 	movi	r18,1
 40009cc:	01001a44 	movi	r4,105
 40009d0:	11001626 	beq	r2,r4,4000a2c <___vfprintf_internal_r+0x1f0>
 40009d4:	20800916 	blt	r4,r2,40009fc <___vfprintf_internal_r+0x1c0>
 40009d8:	010018c4 	movi	r4,99
 40009dc:	11008a26 	beq	r2,r4,4000c08 <___vfprintf_internal_r+0x3cc>
 40009e0:	01001904 	movi	r4,100
 40009e4:	11001126 	beq	r2,r4,4000a2c <___vfprintf_internal_r+0x1f0>
 40009e8:	01001604 	movi	r4,88
 40009ec:	1100ca1e 	bne	r2,r4,4000d18 <___vfprintf_internal_r+0x4dc>
 40009f0:	00c00044 	movi	r3,1
 40009f4:	d8c00e15 	stw	r3,56(sp)
 40009f8:	00001406 	br	4000a4c <___vfprintf_internal_r+0x210>
 40009fc:	01001cc4 	movi	r4,115
 4000a00:	11009a26 	beq	r2,r4,4000c6c <___vfprintf_internal_r+0x430>
 4000a04:	20800416 	blt	r4,r2,4000a18 <___vfprintf_internal_r+0x1dc>
 4000a08:	01001bc4 	movi	r4,111
 4000a0c:	1100c21e 	bne	r2,r4,4000d18 <___vfprintf_internal_r+0x4dc>
 4000a10:	05400204 	movi	r21,8
 4000a14:	00000e06 	br	4000a50 <___vfprintf_internal_r+0x214>
 4000a18:	01001d44 	movi	r4,117
 4000a1c:	11000c26 	beq	r2,r4,4000a50 <___vfprintf_internal_r+0x214>
 4000a20:	01001e04 	movi	r4,120
 4000a24:	11000926 	beq	r2,r4,4000a4c <___vfprintf_internal_r+0x210>
 4000a28:	0000bb06 	br	4000d18 <___vfprintf_internal_r+0x4dc>
 4000a2c:	b5000104 	addi	r20,r22,4
 4000a30:	b8000726 	beq	r23,zero,4000a50 <___vfprintf_internal_r+0x214>
 4000a34:	dd000d15 	stw	r20,52(sp)
 4000a38:	b5800017 	ldw	r22,0(r22)
 4000a3c:	b000080e 	bge	r22,zero,4000a60 <___vfprintf_internal_r+0x224>
 4000a40:	05adc83a 	sub	r22,zero,r22
 4000a44:	02800044 	movi	r10,1
 4000a48:	00000606 	br	4000a64 <___vfprintf_internal_r+0x228>
 4000a4c:	05400404 	movi	r21,16
 4000a50:	b0c00104 	addi	r3,r22,4
 4000a54:	d8c00d15 	stw	r3,52(sp)
 4000a58:	b5800017 	ldw	r22,0(r22)
 4000a5c:	002f883a 	mov	r23,zero
 4000a60:	0015883a 	mov	r10,zero
 4000a64:	d829883a 	mov	r20,sp
 4000a68:	b0001426 	beq	r22,zero,4000abc <___vfprintf_internal_r+0x280>
 4000a6c:	b009883a 	mov	r4,r22
 4000a70:	a80b883a 	mov	r5,r21
 4000a74:	da801015 	stw	r10,64(sp)
 4000a78:	4000fa00 	call	4000fa0 <__udivsi3>
 4000a7c:	1549383a 	mul	r4,r2,r21
 4000a80:	00c00244 	movi	r3,9
 4000a84:	da801017 	ldw	r10,64(sp)
 4000a88:	b12dc83a 	sub	r22,r22,r4
 4000a8c:	1d800216 	blt	r3,r22,4000a98 <___vfprintf_internal_r+0x25c>
 4000a90:	b5800c04 	addi	r22,r22,48
 4000a94:	00000506 	br	4000aac <___vfprintf_internal_r+0x270>
 4000a98:	d8c00e17 	ldw	r3,56(sp)
 4000a9c:	18000226 	beq	r3,zero,4000aa8 <___vfprintf_internal_r+0x26c>
 4000aa0:	b5800dc4 	addi	r22,r22,55
 4000aa4:	00000106 	br	4000aac <___vfprintf_internal_r+0x270>
 4000aa8:	b58015c4 	addi	r22,r22,87
 4000aac:	a5800005 	stb	r22,0(r20)
 4000ab0:	a5000044 	addi	r20,r20,1
 4000ab4:	102d883a 	mov	r22,r2
 4000ab8:	003feb06 	br	4000a68 <__alt_mem_onchip_memory+0xfbff8a68>
 4000abc:	a6c7c83a 	sub	r3,r20,sp
 4000ac0:	d8c00a15 	stw	r3,40(sp)
 4000ac4:	90c5c83a 	sub	r2,r18,r3
 4000ac8:	00800a0e 	bge	zero,r2,4000af4 <___vfprintf_internal_r+0x2b8>
 4000acc:	a085883a 	add	r2,r20,r2
 4000ad0:	01400c04 	movi	r5,48
 4000ad4:	d8c00917 	ldw	r3,36(sp)
 4000ad8:	a009883a 	mov	r4,r20
 4000adc:	a0c0032e 	bgeu	r20,r3,4000aec <___vfprintf_internal_r+0x2b0>
 4000ae0:	a5000044 	addi	r20,r20,1
 4000ae4:	21400005 	stb	r5,0(r4)
 4000ae8:	a0bffa1e 	bne	r20,r2,4000ad4 <__alt_mem_onchip_memory+0xfbff8ad4>
 4000aec:	a6c7c83a 	sub	r3,r20,sp
 4000af0:	d8c00a15 	stw	r3,40(sp)
 4000af4:	d8c00a17 	ldw	r3,40(sp)
 4000af8:	50d3883a 	add	r9,r10,r3
 4000afc:	d8c00b17 	ldw	r3,44(sp)
 4000b00:	8a6dc83a 	sub	r22,r17,r9
 4000b04:	18001726 	beq	r3,zero,4000b64 <___vfprintf_internal_r+0x328>
 4000b08:	50000a26 	beq	r10,zero,4000b34 <___vfprintf_internal_r+0x2f8>
 4000b0c:	00800b44 	movi	r2,45
 4000b10:	d8800805 	stb	r2,32(sp)
 4000b14:	e0800117 	ldw	r2,4(fp)
 4000b18:	01c00044 	movi	r7,1
 4000b1c:	d9800804 	addi	r6,sp,32
 4000b20:	e00b883a 	mov	r5,fp
 4000b24:	9809883a 	mov	r4,r19
 4000b28:	103ee83a 	callr	r2
 4000b2c:	10004d1e 	bne	r2,zero,4000c64 <___vfprintf_internal_r+0x428>
 4000b30:	84000044 	addi	r16,r16,1
 4000b34:	0580070e 	bge	zero,r22,4000b54 <___vfprintf_internal_r+0x318>
 4000b38:	b00f883a 	mov	r7,r22
 4000b3c:	01800c04 	movi	r6,48
 4000b40:	e00b883a 	mov	r5,fp
 4000b44:	9809883a 	mov	r4,r19
 4000b48:	40007d00 	call	40007d0 <print_repeat>
 4000b4c:	1000451e 	bne	r2,zero,4000c64 <___vfprintf_internal_r+0x428>
 4000b50:	85a1883a 	add	r16,r16,r22
 4000b54:	d8c00a17 	ldw	r3,40(sp)
 4000b58:	a013883a 	mov	r9,r20
 4000b5c:	1d2dc83a 	sub	r22,r3,r20
 4000b60:	00002206 	br	4000bec <___vfprintf_internal_r+0x3b0>
 4000b64:	0580090e 	bge	zero,r22,4000b8c <___vfprintf_internal_r+0x350>
 4000b68:	b00f883a 	mov	r7,r22
 4000b6c:	01800804 	movi	r6,32
 4000b70:	e00b883a 	mov	r5,fp
 4000b74:	9809883a 	mov	r4,r19
 4000b78:	da801015 	stw	r10,64(sp)
 4000b7c:	40007d00 	call	40007d0 <print_repeat>
 4000b80:	da801017 	ldw	r10,64(sp)
 4000b84:	1000371e 	bne	r2,zero,4000c64 <___vfprintf_internal_r+0x428>
 4000b88:	85a1883a 	add	r16,r16,r22
 4000b8c:	503ff126 	beq	r10,zero,4000b54 <__alt_mem_onchip_memory+0xfbff8b54>
 4000b90:	00800b44 	movi	r2,45
 4000b94:	d8800805 	stb	r2,32(sp)
 4000b98:	e0800117 	ldw	r2,4(fp)
 4000b9c:	01c00044 	movi	r7,1
 4000ba0:	d9800804 	addi	r6,sp,32
 4000ba4:	e00b883a 	mov	r5,fp
 4000ba8:	9809883a 	mov	r4,r19
 4000bac:	103ee83a 	callr	r2
 4000bb0:	10002c1e 	bne	r2,zero,4000c64 <___vfprintf_internal_r+0x428>
 4000bb4:	84000044 	addi	r16,r16,1
 4000bb8:	003fe606 	br	4000b54 <__alt_mem_onchip_memory+0xfbff8b54>
 4000bbc:	4a7fffc4 	addi	r9,r9,-1
 4000bc0:	48800003 	ldbu	r2,0(r9)
 4000bc4:	01c00044 	movi	r7,1
 4000bc8:	d9800804 	addi	r6,sp,32
 4000bcc:	d8800805 	stb	r2,32(sp)
 4000bd0:	e0800117 	ldw	r2,4(fp)
 4000bd4:	e00b883a 	mov	r5,fp
 4000bd8:	da401015 	stw	r9,64(sp)
 4000bdc:	9809883a 	mov	r4,r19
 4000be0:	103ee83a 	callr	r2
 4000be4:	da401017 	ldw	r9,64(sp)
 4000be8:	10001e1e 	bne	r2,zero,4000c64 <___vfprintf_internal_r+0x428>
 4000bec:	8245c83a 	sub	r2,r16,r9
 4000bf0:	4d89883a 	add	r4,r9,r22
 4000bf4:	a085883a 	add	r2,r20,r2
 4000bf8:	013ff016 	blt	zero,r4,4000bbc <__alt_mem_onchip_memory+0xfbff8bbc>
 4000bfc:	1021883a 	mov	r16,r2
 4000c00:	dd800d17 	ldw	r22,52(sp)
 4000c04:	00004406 	br	4000d18 <___vfprintf_internal_r+0x4dc>
 4000c08:	00800044 	movi	r2,1
 4000c0c:	1440080e 	bge	r2,r17,4000c30 <___vfprintf_internal_r+0x3f4>
 4000c10:	8d3fffc4 	addi	r20,r17,-1
 4000c14:	a00f883a 	mov	r7,r20
 4000c18:	01800804 	movi	r6,32
 4000c1c:	e00b883a 	mov	r5,fp
 4000c20:	9809883a 	mov	r4,r19
 4000c24:	40007d00 	call	40007d0 <print_repeat>
 4000c28:	10000e1e 	bne	r2,zero,4000c64 <___vfprintf_internal_r+0x428>
 4000c2c:	8521883a 	add	r16,r16,r20
 4000c30:	b0800017 	ldw	r2,0(r22)
 4000c34:	01c00044 	movi	r7,1
 4000c38:	d80d883a 	mov	r6,sp
 4000c3c:	d8800005 	stb	r2,0(sp)
 4000c40:	e0800117 	ldw	r2,4(fp)
 4000c44:	e00b883a 	mov	r5,fp
 4000c48:	9809883a 	mov	r4,r19
 4000c4c:	b5000104 	addi	r20,r22,4
 4000c50:	103ee83a 	callr	r2
 4000c54:	1000031e 	bne	r2,zero,4000c64 <___vfprintf_internal_r+0x428>
 4000c58:	84000044 	addi	r16,r16,1
 4000c5c:	a02d883a 	mov	r22,r20
 4000c60:	00002d06 	br	4000d18 <___vfprintf_internal_r+0x4dc>
 4000c64:	00bfffc4 	movi	r2,-1
 4000c68:	00003106 	br	4000d30 <___vfprintf_internal_r+0x4f4>
 4000c6c:	b5000017 	ldw	r20,0(r22)
 4000c70:	b0c00104 	addi	r3,r22,4
 4000c74:	d8c00a15 	stw	r3,40(sp)
 4000c78:	a009883a 	mov	r4,r20
 4000c7c:	4000e340 	call	4000e34 <strlen>
 4000c80:	8893c83a 	sub	r9,r17,r2
 4000c84:	102d883a 	mov	r22,r2
 4000c88:	0240090e 	bge	zero,r9,4000cb0 <___vfprintf_internal_r+0x474>
 4000c8c:	480f883a 	mov	r7,r9
 4000c90:	01800804 	movi	r6,32
 4000c94:	e00b883a 	mov	r5,fp
 4000c98:	9809883a 	mov	r4,r19
 4000c9c:	da401015 	stw	r9,64(sp)
 4000ca0:	40007d00 	call	40007d0 <print_repeat>
 4000ca4:	da401017 	ldw	r9,64(sp)
 4000ca8:	103fee1e 	bne	r2,zero,4000c64 <__alt_mem_onchip_memory+0xfbff8c64>
 4000cac:	8261883a 	add	r16,r16,r9
 4000cb0:	e0800117 	ldw	r2,4(fp)
 4000cb4:	b00f883a 	mov	r7,r22
 4000cb8:	a00d883a 	mov	r6,r20
 4000cbc:	e00b883a 	mov	r5,fp
 4000cc0:	9809883a 	mov	r4,r19
 4000cc4:	103ee83a 	callr	r2
 4000cc8:	103fe61e 	bne	r2,zero,4000c64 <__alt_mem_onchip_memory+0xfbff8c64>
 4000ccc:	85a1883a 	add	r16,r16,r22
 4000cd0:	dd800a17 	ldw	r22,40(sp)
 4000cd4:	00001006 	br	4000d18 <___vfprintf_internal_r+0x4dc>
 4000cd8:	05c00044 	movi	r23,1
 4000cdc:	04bfffc4 	movi	r18,-1
 4000ce0:	d8000e15 	stw	zero,56(sp)
 4000ce4:	05400284 	movi	r21,10
 4000ce8:	9023883a 	mov	r17,r18
 4000cec:	d8000c15 	stw	zero,48(sp)
 4000cf0:	d8000b15 	stw	zero,44(sp)
 4000cf4:	b829883a 	mov	r20,r23
 4000cf8:	00000806 	br	4000d1c <___vfprintf_internal_r+0x4e0>
 4000cfc:	dd000b15 	stw	r20,44(sp)
 4000d00:	05000084 	movi	r20,2
 4000d04:	00000506 	br	4000d1c <___vfprintf_internal_r+0x4e0>
 4000d08:	00c00044 	movi	r3,1
 4000d0c:	d8c00c15 	stw	r3,48(sp)
 4000d10:	050000c4 	movi	r20,3
 4000d14:	00000106 	br	4000d1c <___vfprintf_internal_r+0x4e0>
 4000d18:	0029883a 	mov	r20,zero
 4000d1c:	d8c00f17 	ldw	r3,60(sp)
 4000d20:	18c00044 	addi	r3,r3,1
 4000d24:	d8c00f15 	stw	r3,60(sp)
 4000d28:	003ede06 	br	40008a4 <__alt_mem_onchip_memory+0xfbff88a4>
 4000d2c:	8005883a 	mov	r2,r16
 4000d30:	dfc01a17 	ldw	ra,104(sp)
 4000d34:	df001917 	ldw	fp,100(sp)
 4000d38:	ddc01817 	ldw	r23,96(sp)
 4000d3c:	dd801717 	ldw	r22,92(sp)
 4000d40:	dd401617 	ldw	r21,88(sp)
 4000d44:	dd001517 	ldw	r20,84(sp)
 4000d48:	dcc01417 	ldw	r19,80(sp)
 4000d4c:	dc801317 	ldw	r18,76(sp)
 4000d50:	dc401217 	ldw	r17,72(sp)
 4000d54:	dc001117 	ldw	r16,68(sp)
 4000d58:	dec01b04 	addi	sp,sp,108
 4000d5c:	f800283a 	ret

04000d60 <__vfprintf_internal>:
 4000d60:	00810034 	movhi	r2,1024
 4000d64:	1091f004 	addi	r2,r2,18368
 4000d68:	300f883a 	mov	r7,r6
 4000d6c:	280d883a 	mov	r6,r5
 4000d70:	200b883a 	mov	r5,r4
 4000d74:	11000017 	ldw	r4,0(r2)
 4000d78:	400083c1 	jmpi	400083c <___vfprintf_internal_r>

04000d7c <__sfvwrite_small_dev>:
 4000d7c:	2880000b 	ldhu	r2,0(r5)
 4000d80:	1080020c 	andi	r2,r2,8
 4000d84:	10002126 	beq	r2,zero,4000e0c <__sfvwrite_small_dev+0x90>
 4000d88:	2880008f 	ldh	r2,2(r5)
 4000d8c:	defffa04 	addi	sp,sp,-24
 4000d90:	dc000015 	stw	r16,0(sp)
 4000d94:	dfc00515 	stw	ra,20(sp)
 4000d98:	dd000415 	stw	r20,16(sp)
 4000d9c:	dcc00315 	stw	r19,12(sp)
 4000da0:	dc800215 	stw	r18,8(sp)
 4000da4:	dc400115 	stw	r17,4(sp)
 4000da8:	2821883a 	mov	r16,r5
 4000dac:	10001216 	blt	r2,zero,4000df8 <__sfvwrite_small_dev+0x7c>
 4000db0:	2027883a 	mov	r19,r4
 4000db4:	3025883a 	mov	r18,r6
 4000db8:	3823883a 	mov	r17,r7
 4000dbc:	05010004 	movi	r20,1024
 4000dc0:	04400b0e 	bge	zero,r17,4000df0 <__sfvwrite_small_dev+0x74>
 4000dc4:	880f883a 	mov	r7,r17
 4000dc8:	a440010e 	bge	r20,r17,4000dd0 <__sfvwrite_small_dev+0x54>
 4000dcc:	01c10004 	movi	r7,1024
 4000dd0:	8140008f 	ldh	r5,2(r16)
 4000dd4:	900d883a 	mov	r6,r18
 4000dd8:	9809883a 	mov	r4,r19
 4000ddc:	4000e500 	call	4000e50 <_write_r>
 4000de0:	0080050e 	bge	zero,r2,4000df8 <__sfvwrite_small_dev+0x7c>
 4000de4:	88a3c83a 	sub	r17,r17,r2
 4000de8:	90a5883a 	add	r18,r18,r2
 4000dec:	003ff406 	br	4000dc0 <__alt_mem_onchip_memory+0xfbff8dc0>
 4000df0:	0005883a 	mov	r2,zero
 4000df4:	00000706 	br	4000e14 <__sfvwrite_small_dev+0x98>
 4000df8:	8080000b 	ldhu	r2,0(r16)
 4000dfc:	10801014 	ori	r2,r2,64
 4000e00:	8080000d 	sth	r2,0(r16)
 4000e04:	00bfffc4 	movi	r2,-1
 4000e08:	00000206 	br	4000e14 <__sfvwrite_small_dev+0x98>
 4000e0c:	00bfffc4 	movi	r2,-1
 4000e10:	f800283a 	ret
 4000e14:	dfc00517 	ldw	ra,20(sp)
 4000e18:	dd000417 	ldw	r20,16(sp)
 4000e1c:	dcc00317 	ldw	r19,12(sp)
 4000e20:	dc800217 	ldw	r18,8(sp)
 4000e24:	dc400117 	ldw	r17,4(sp)
 4000e28:	dc000017 	ldw	r16,0(sp)
 4000e2c:	dec00604 	addi	sp,sp,24
 4000e30:	f800283a 	ret

04000e34 <strlen>:
 4000e34:	2005883a 	mov	r2,r4
 4000e38:	10c00007 	ldb	r3,0(r2)
 4000e3c:	18000226 	beq	r3,zero,4000e48 <strlen+0x14>
 4000e40:	10800044 	addi	r2,r2,1
 4000e44:	003ffc06 	br	4000e38 <__alt_mem_onchip_memory+0xfbff8e38>
 4000e48:	1105c83a 	sub	r2,r2,r4
 4000e4c:	f800283a 	ret

04000e50 <_write_r>:
 4000e50:	defffd04 	addi	sp,sp,-12
 4000e54:	dc000015 	stw	r16,0(sp)
 4000e58:	04010034 	movhi	r16,1024
 4000e5c:	dc400115 	stw	r17,4(sp)
 4000e60:	8416bf04 	addi	r16,r16,23292
 4000e64:	2023883a 	mov	r17,r4
 4000e68:	2809883a 	mov	r4,r5
 4000e6c:	300b883a 	mov	r5,r6
 4000e70:	380d883a 	mov	r6,r7
 4000e74:	dfc00215 	stw	ra,8(sp)
 4000e78:	80000015 	stw	zero,0(r16)
 4000e7c:	40012300 	call	4001230 <write>
 4000e80:	00ffffc4 	movi	r3,-1
 4000e84:	10c0031e 	bne	r2,r3,4000e94 <_write_r+0x44>
 4000e88:	80c00017 	ldw	r3,0(r16)
 4000e8c:	18000126 	beq	r3,zero,4000e94 <_write_r+0x44>
 4000e90:	88c00015 	stw	r3,0(r17)
 4000e94:	dfc00217 	ldw	ra,8(sp)
 4000e98:	dc400117 	ldw	r17,4(sp)
 4000e9c:	dc000017 	ldw	r16,0(sp)
 4000ea0:	dec00304 	addi	sp,sp,12
 4000ea4:	f800283a 	ret

04000ea8 <__divsi3>:
 4000ea8:	20001b16 	blt	r4,zero,4000f18 <__divsi3+0x70>
 4000eac:	000f883a 	mov	r7,zero
 4000eb0:	28001616 	blt	r5,zero,4000f0c <__divsi3+0x64>
 4000eb4:	200d883a 	mov	r6,r4
 4000eb8:	29001a2e 	bgeu	r5,r4,4000f24 <__divsi3+0x7c>
 4000ebc:	00800804 	movi	r2,32
 4000ec0:	00c00044 	movi	r3,1
 4000ec4:	00000106 	br	4000ecc <__divsi3+0x24>
 4000ec8:	10000d26 	beq	r2,zero,4000f00 <__divsi3+0x58>
 4000ecc:	294b883a 	add	r5,r5,r5
 4000ed0:	10bfffc4 	addi	r2,r2,-1
 4000ed4:	18c7883a 	add	r3,r3,r3
 4000ed8:	293ffb36 	bltu	r5,r4,4000ec8 <__alt_mem_onchip_memory+0xfbff8ec8>
 4000edc:	0005883a 	mov	r2,zero
 4000ee0:	18000726 	beq	r3,zero,4000f00 <__divsi3+0x58>
 4000ee4:	0005883a 	mov	r2,zero
 4000ee8:	31400236 	bltu	r6,r5,4000ef4 <__divsi3+0x4c>
 4000eec:	314dc83a 	sub	r6,r6,r5
 4000ef0:	10c4b03a 	or	r2,r2,r3
 4000ef4:	1806d07a 	srli	r3,r3,1
 4000ef8:	280ad07a 	srli	r5,r5,1
 4000efc:	183ffa1e 	bne	r3,zero,4000ee8 <__alt_mem_onchip_memory+0xfbff8ee8>
 4000f00:	38000126 	beq	r7,zero,4000f08 <__divsi3+0x60>
 4000f04:	0085c83a 	sub	r2,zero,r2
 4000f08:	f800283a 	ret
 4000f0c:	014bc83a 	sub	r5,zero,r5
 4000f10:	39c0005c 	xori	r7,r7,1
 4000f14:	003fe706 	br	4000eb4 <__alt_mem_onchip_memory+0xfbff8eb4>
 4000f18:	0109c83a 	sub	r4,zero,r4
 4000f1c:	01c00044 	movi	r7,1
 4000f20:	003fe306 	br	4000eb0 <__alt_mem_onchip_memory+0xfbff8eb0>
 4000f24:	00c00044 	movi	r3,1
 4000f28:	003fee06 	br	4000ee4 <__alt_mem_onchip_memory+0xfbff8ee4>

04000f2c <__modsi3>:
 4000f2c:	20001716 	blt	r4,zero,4000f8c <__modsi3+0x60>
 4000f30:	000f883a 	mov	r7,zero
 4000f34:	2005883a 	mov	r2,r4
 4000f38:	28001216 	blt	r5,zero,4000f84 <__modsi3+0x58>
 4000f3c:	2900162e 	bgeu	r5,r4,4000f98 <__modsi3+0x6c>
 4000f40:	01800804 	movi	r6,32
 4000f44:	00c00044 	movi	r3,1
 4000f48:	00000106 	br	4000f50 <__modsi3+0x24>
 4000f4c:	30000a26 	beq	r6,zero,4000f78 <__modsi3+0x4c>
 4000f50:	294b883a 	add	r5,r5,r5
 4000f54:	31bfffc4 	addi	r6,r6,-1
 4000f58:	18c7883a 	add	r3,r3,r3
 4000f5c:	293ffb36 	bltu	r5,r4,4000f4c <__alt_mem_onchip_memory+0xfbff8f4c>
 4000f60:	18000526 	beq	r3,zero,4000f78 <__modsi3+0x4c>
 4000f64:	1806d07a 	srli	r3,r3,1
 4000f68:	11400136 	bltu	r2,r5,4000f70 <__modsi3+0x44>
 4000f6c:	1145c83a 	sub	r2,r2,r5
 4000f70:	280ad07a 	srli	r5,r5,1
 4000f74:	183ffb1e 	bne	r3,zero,4000f64 <__alt_mem_onchip_memory+0xfbff8f64>
 4000f78:	38000126 	beq	r7,zero,4000f80 <__modsi3+0x54>
 4000f7c:	0085c83a 	sub	r2,zero,r2
 4000f80:	f800283a 	ret
 4000f84:	014bc83a 	sub	r5,zero,r5
 4000f88:	003fec06 	br	4000f3c <__alt_mem_onchip_memory+0xfbff8f3c>
 4000f8c:	0109c83a 	sub	r4,zero,r4
 4000f90:	01c00044 	movi	r7,1
 4000f94:	003fe706 	br	4000f34 <__alt_mem_onchip_memory+0xfbff8f34>
 4000f98:	00c00044 	movi	r3,1
 4000f9c:	003ff106 	br	4000f64 <__alt_mem_onchip_memory+0xfbff8f64>

04000fa0 <__udivsi3>:
 4000fa0:	200d883a 	mov	r6,r4
 4000fa4:	2900152e 	bgeu	r5,r4,4000ffc <__udivsi3+0x5c>
 4000fa8:	28001416 	blt	r5,zero,4000ffc <__udivsi3+0x5c>
 4000fac:	00800804 	movi	r2,32
 4000fb0:	00c00044 	movi	r3,1
 4000fb4:	00000206 	br	4000fc0 <__udivsi3+0x20>
 4000fb8:	10000e26 	beq	r2,zero,4000ff4 <__udivsi3+0x54>
 4000fbc:	28000516 	blt	r5,zero,4000fd4 <__udivsi3+0x34>
 4000fc0:	294b883a 	add	r5,r5,r5
 4000fc4:	10bfffc4 	addi	r2,r2,-1
 4000fc8:	18c7883a 	add	r3,r3,r3
 4000fcc:	293ffa36 	bltu	r5,r4,4000fb8 <__alt_mem_onchip_memory+0xfbff8fb8>
 4000fd0:	18000826 	beq	r3,zero,4000ff4 <__udivsi3+0x54>
 4000fd4:	0005883a 	mov	r2,zero
 4000fd8:	31400236 	bltu	r6,r5,4000fe4 <__udivsi3+0x44>
 4000fdc:	314dc83a 	sub	r6,r6,r5
 4000fe0:	10c4b03a 	or	r2,r2,r3
 4000fe4:	1806d07a 	srli	r3,r3,1
 4000fe8:	280ad07a 	srli	r5,r5,1
 4000fec:	183ffa1e 	bne	r3,zero,4000fd8 <__alt_mem_onchip_memory+0xfbff8fd8>
 4000ff0:	f800283a 	ret
 4000ff4:	0005883a 	mov	r2,zero
 4000ff8:	f800283a 	ret
 4000ffc:	00c00044 	movi	r3,1
 4001000:	003ff406 	br	4000fd4 <__alt_mem_onchip_memory+0xfbff8fd4>

04001004 <__umodsi3>:
 4001004:	2005883a 	mov	r2,r4
 4001008:	2900122e 	bgeu	r5,r4,4001054 <__umodsi3+0x50>
 400100c:	28001116 	blt	r5,zero,4001054 <__umodsi3+0x50>
 4001010:	01800804 	movi	r6,32
 4001014:	00c00044 	movi	r3,1
 4001018:	00000206 	br	4001024 <__umodsi3+0x20>
 400101c:	30000c26 	beq	r6,zero,4001050 <__umodsi3+0x4c>
 4001020:	28000516 	blt	r5,zero,4001038 <__umodsi3+0x34>
 4001024:	294b883a 	add	r5,r5,r5
 4001028:	31bfffc4 	addi	r6,r6,-1
 400102c:	18c7883a 	add	r3,r3,r3
 4001030:	293ffa36 	bltu	r5,r4,400101c <__alt_mem_onchip_memory+0xfbff901c>
 4001034:	18000626 	beq	r3,zero,4001050 <__umodsi3+0x4c>
 4001038:	1806d07a 	srli	r3,r3,1
 400103c:	11400136 	bltu	r2,r5,4001044 <__umodsi3+0x40>
 4001040:	1145c83a 	sub	r2,r2,r5
 4001044:	280ad07a 	srli	r5,r5,1
 4001048:	183ffb1e 	bne	r3,zero,4001038 <__alt_mem_onchip_memory+0xfbff9038>
 400104c:	f800283a 	ret
 4001050:	f800283a 	ret
 4001054:	00c00044 	movi	r3,1
 4001058:	003ff706 	br	4001038 <__alt_mem_onchip_memory+0xfbff9038>

0400105c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400105c:	defffc04 	addi	sp,sp,-16
 4001060:	df000315 	stw	fp,12(sp)
 4001064:	df000304 	addi	fp,sp,12
 4001068:	e13ffd15 	stw	r4,-12(fp)
 400106c:	e17ffe15 	stw	r5,-8(fp)
 4001070:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4001074:	e0fffe17 	ldw	r3,-8(fp)
 4001078:	e0bffd17 	ldw	r2,-12(fp)
 400107c:	18800c26 	beq	r3,r2,40010b0 <alt_load_section+0x54>
  {
    while( to != end )
 4001080:	00000806 	br	40010a4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4001084:	e0bffe17 	ldw	r2,-8(fp)
 4001088:	10c00104 	addi	r3,r2,4
 400108c:	e0fffe15 	stw	r3,-8(fp)
 4001090:	e0fffd17 	ldw	r3,-12(fp)
 4001094:	19000104 	addi	r4,r3,4
 4001098:	e13ffd15 	stw	r4,-12(fp)
 400109c:	18c00017 	ldw	r3,0(r3)
 40010a0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40010a4:	e0fffe17 	ldw	r3,-8(fp)
 40010a8:	e0bfff17 	ldw	r2,-4(fp)
 40010ac:	18bff51e 	bne	r3,r2,4001084 <__alt_mem_onchip_memory+0xfbff9084>
    {
      *to++ = *from++;
    }
  }
}
 40010b0:	0001883a 	nop
 40010b4:	e037883a 	mov	sp,fp
 40010b8:	df000017 	ldw	fp,0(sp)
 40010bc:	dec00104 	addi	sp,sp,4
 40010c0:	f800283a 	ret

040010c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40010c4:	defffe04 	addi	sp,sp,-8
 40010c8:	dfc00115 	stw	ra,4(sp)
 40010cc:	df000015 	stw	fp,0(sp)
 40010d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40010d4:	01810034 	movhi	r6,1024
 40010d8:	3191fa04 	addi	r6,r6,18408
 40010dc:	01410034 	movhi	r5,1024
 40010e0:	294d3504 	addi	r5,r5,13524
 40010e4:	01010034 	movhi	r4,1024
 40010e8:	2111fa04 	addi	r4,r4,18408
 40010ec:	400105c0 	call	400105c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40010f0:	01810034 	movhi	r6,1024
 40010f4:	31809104 	addi	r6,r6,580
 40010f8:	01410034 	movhi	r5,1024
 40010fc:	29400804 	addi	r5,r5,32
 4001100:	01010034 	movhi	r4,1024
 4001104:	21000804 	addi	r4,r4,32
 4001108:	400105c0 	call	400105c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400110c:	01810034 	movhi	r6,1024
 4001110:	318d3504 	addi	r6,r6,13524
 4001114:	01410034 	movhi	r5,1024
 4001118:	294d2604 	addi	r5,r5,13464
 400111c:	01010034 	movhi	r4,1024
 4001120:	210d2604 	addi	r4,r4,13464
 4001124:	400105c0 	call	400105c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4001128:	40022e00 	call	40022e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400112c:	40024f40 	call	40024f4 <alt_icache_flush_all>
}
 4001130:	0001883a 	nop
 4001134:	e037883a 	mov	sp,fp
 4001138:	dfc00117 	ldw	ra,4(sp)
 400113c:	df000017 	ldw	fp,0(sp)
 4001140:	dec00204 	addi	sp,sp,8
 4001144:	f800283a 	ret

04001148 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4001148:	defffd04 	addi	sp,sp,-12
 400114c:	dfc00215 	stw	ra,8(sp)
 4001150:	df000115 	stw	fp,4(sp)
 4001154:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4001158:	0009883a 	mov	r4,zero
 400115c:	400135c0 	call	400135c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4001160:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4001164:	40013940 	call	4001394 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4001168:	01810034 	movhi	r6,1024
 400116c:	318d2a04 	addi	r6,r6,13480
 4001170:	01410034 	movhi	r5,1024
 4001174:	294d2a04 	addi	r5,r5,13480
 4001178:	01010034 	movhi	r4,1024
 400117c:	210d2a04 	addi	r4,r4,13480
 4001180:	400288c0 	call	400288c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4001184:	40024340 	call	4002434 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4001188:	01010034 	movhi	r4,1024
 400118c:	21092504 	addi	r4,r4,9364
 4001190:	40030f00 	call	40030f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4001194:	d0a4d117 	ldw	r2,-27836(gp)
 4001198:	d0e4d217 	ldw	r3,-27832(gp)
 400119c:	d124d317 	ldw	r4,-27828(gp)
 40011a0:	200d883a 	mov	r6,r4
 40011a4:	180b883a 	mov	r5,r3
 40011a8:	1009883a 	mov	r4,r2
 40011ac:	40003540 	call	4000354 <main>
 40011b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40011b4:	01000044 	movi	r4,1
 40011b8:	40022100 	call	4002210 <close>
  exit (result);
 40011bc:	e13fff17 	ldw	r4,-4(fp)
 40011c0:	40031040 	call	4003104 <exit>

040011c4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 40011c4:	defffd04 	addi	sp,sp,-12
 40011c8:	dfc00215 	stw	ra,8(sp)
 40011cc:	df000115 	stw	fp,4(sp)
 40011d0:	df000104 	addi	fp,sp,4
 40011d4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 40011d8:	e13fff17 	ldw	r4,-4(fp)
 40011dc:	400207c0 	call	400207c <alt_busy_sleep>
}
 40011e0:	e037883a 	mov	sp,fp
 40011e4:	dfc00117 	ldw	ra,4(sp)
 40011e8:	df000017 	ldw	fp,0(sp)
 40011ec:	dec00204 	addi	sp,sp,8
 40011f0:	f800283a 	ret

040011f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40011f4:	defffe04 	addi	sp,sp,-8
 40011f8:	dfc00115 	stw	ra,4(sp)
 40011fc:	df000015 	stw	fp,0(sp)
 4001200:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4001204:	d0a00717 	ldw	r2,-32740(gp)
 4001208:	10000326 	beq	r2,zero,4001218 <alt_get_errno+0x24>
 400120c:	d0a00717 	ldw	r2,-32740(gp)
 4001210:	103ee83a 	callr	r2
 4001214:	00000106 	br	400121c <alt_get_errno+0x28>
 4001218:	d0a4d004 	addi	r2,gp,-27840
}
 400121c:	e037883a 	mov	sp,fp
 4001220:	dfc00117 	ldw	ra,4(sp)
 4001224:	df000017 	ldw	fp,0(sp)
 4001228:	dec00204 	addi	sp,sp,8
 400122c:	f800283a 	ret

04001230 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4001230:	defff904 	addi	sp,sp,-28
 4001234:	dfc00615 	stw	ra,24(sp)
 4001238:	df000515 	stw	fp,20(sp)
 400123c:	df000504 	addi	fp,sp,20
 4001240:	e13ffd15 	stw	r4,-12(fp)
 4001244:	e17ffe15 	stw	r5,-8(fp)
 4001248:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400124c:	e0bffd17 	ldw	r2,-12(fp)
 4001250:	10000616 	blt	r2,zero,400126c <write+0x3c>
 4001254:	e0bffd17 	ldw	r2,-12(fp)
 4001258:	10c00324 	muli	r3,r2,12
 400125c:	00810034 	movhi	r2,1024
 4001260:	10918f04 	addi	r2,r2,17980
 4001264:	1885883a 	add	r2,r3,r2
 4001268:	00000106 	br	4001270 <write+0x40>
 400126c:	0005883a 	mov	r2,zero
 4001270:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4001274:	e0bffb17 	ldw	r2,-20(fp)
 4001278:	10002126 	beq	r2,zero,4001300 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400127c:	e0bffb17 	ldw	r2,-20(fp)
 4001280:	10800217 	ldw	r2,8(r2)
 4001284:	108000cc 	andi	r2,r2,3
 4001288:	10001826 	beq	r2,zero,40012ec <write+0xbc>
 400128c:	e0bffb17 	ldw	r2,-20(fp)
 4001290:	10800017 	ldw	r2,0(r2)
 4001294:	10800617 	ldw	r2,24(r2)
 4001298:	10001426 	beq	r2,zero,40012ec <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400129c:	e0bffb17 	ldw	r2,-20(fp)
 40012a0:	10800017 	ldw	r2,0(r2)
 40012a4:	10800617 	ldw	r2,24(r2)
 40012a8:	e0ffff17 	ldw	r3,-4(fp)
 40012ac:	180d883a 	mov	r6,r3
 40012b0:	e17ffe17 	ldw	r5,-8(fp)
 40012b4:	e13ffb17 	ldw	r4,-20(fp)
 40012b8:	103ee83a 	callr	r2
 40012bc:	e0bffc15 	stw	r2,-16(fp)
 40012c0:	e0bffc17 	ldw	r2,-16(fp)
 40012c4:	1000070e 	bge	r2,zero,40012e4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 40012c8:	40011f40 	call	40011f4 <alt_get_errno>
 40012cc:	1007883a 	mov	r3,r2
 40012d0:	e0bffc17 	ldw	r2,-16(fp)
 40012d4:	0085c83a 	sub	r2,zero,r2
 40012d8:	18800015 	stw	r2,0(r3)
        return -1;
 40012dc:	00bfffc4 	movi	r2,-1
 40012e0:	00000c06 	br	4001314 <write+0xe4>
      }
      return rval;
 40012e4:	e0bffc17 	ldw	r2,-16(fp)
 40012e8:	00000a06 	br	4001314 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 40012ec:	40011f40 	call	40011f4 <alt_get_errno>
 40012f0:	1007883a 	mov	r3,r2
 40012f4:	00800344 	movi	r2,13
 40012f8:	18800015 	stw	r2,0(r3)
 40012fc:	00000406 	br	4001310 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4001300:	40011f40 	call	40011f4 <alt_get_errno>
 4001304:	1007883a 	mov	r3,r2
 4001308:	00801444 	movi	r2,81
 400130c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4001310:	00bfffc4 	movi	r2,-1
}
 4001314:	e037883a 	mov	sp,fp
 4001318:	dfc00117 	ldw	ra,4(sp)
 400131c:	df000017 	ldw	fp,0(sp)
 4001320:	dec00204 	addi	sp,sp,8
 4001324:	f800283a 	ret

04001328 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4001328:	defffd04 	addi	sp,sp,-12
 400132c:	dfc00215 	stw	ra,8(sp)
 4001330:	df000115 	stw	fp,4(sp)
 4001334:	df000104 	addi	fp,sp,4
 4001338:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400133c:	d1600404 	addi	r5,gp,-32752
 4001340:	e13fff17 	ldw	r4,-4(fp)
 4001344:	40023900 	call	4002390 <alt_dev_llist_insert>
}
 4001348:	e037883a 	mov	sp,fp
 400134c:	dfc00117 	ldw	ra,4(sp)
 4001350:	df000017 	ldw	fp,0(sp)
 4001354:	dec00204 	addi	sp,sp,8
 4001358:	f800283a 	ret

0400135c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400135c:	defffd04 	addi	sp,sp,-12
 4001360:	dfc00215 	stw	ra,8(sp)
 4001364:	df000115 	stw	fp,4(sp)
 4001368:	df000104 	addi	fp,sp,4
 400136c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 4001370:	4002d640 	call	4002d64 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4001374:	00800044 	movi	r2,1
 4001378:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400137c:	0001883a 	nop
 4001380:	e037883a 	mov	sp,fp
 4001384:	dfc00117 	ldw	ra,4(sp)
 4001388:	df000017 	ldw	fp,0(sp)
 400138c:	dec00204 	addi	sp,sp,8
 4001390:	f800283a 	ret

04001394 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4001394:	defffe04 	addi	sp,sp,-8
 4001398:	dfc00115 	stw	ra,4(sp)
 400139c:	df000015 	stw	fp,0(sp)
 40013a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_RES_TIMER, high_res_timer);
 40013a4:	01c0fa04 	movi	r7,1000
 40013a8:	000d883a 	mov	r6,zero
 40013ac:	000b883a 	mov	r5,zero
 40013b0:	01020074 	movhi	r4,2049
 40013b4:	21040004 	addi	r4,r4,4096
 40013b8:	4001ed40 	call	4001ed4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 40013bc:	01800044 	movi	r6,1
 40013c0:	000b883a 	mov	r5,zero
 40013c4:	01010034 	movhi	r4,1024
 40013c8:	210d7704 	addi	r4,r4,13788
 40013cc:	40015580 	call	4001558 <altera_avalon_jtag_uart_init>
 40013d0:	01010034 	movhi	r4,1024
 40013d4:	210d6d04 	addi	r4,r4,13748
 40013d8:	40013280 	call	4001328 <alt_dev_reg>
}
 40013dc:	0001883a 	nop
 40013e0:	e037883a 	mov	sp,fp
 40013e4:	dfc00117 	ldw	ra,4(sp)
 40013e8:	df000017 	ldw	fp,0(sp)
 40013ec:	dec00204 	addi	sp,sp,8
 40013f0:	f800283a 	ret

040013f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40013f4:	defffa04 	addi	sp,sp,-24
 40013f8:	dfc00515 	stw	ra,20(sp)
 40013fc:	df000415 	stw	fp,16(sp)
 4001400:	df000404 	addi	fp,sp,16
 4001404:	e13ffd15 	stw	r4,-12(fp)
 4001408:	e17ffe15 	stw	r5,-8(fp)
 400140c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4001410:	e0bffd17 	ldw	r2,-12(fp)
 4001414:	10800017 	ldw	r2,0(r2)
 4001418:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400141c:	e0bffc17 	ldw	r2,-16(fp)
 4001420:	10c00a04 	addi	r3,r2,40
 4001424:	e0bffd17 	ldw	r2,-12(fp)
 4001428:	10800217 	ldw	r2,8(r2)
 400142c:	100f883a 	mov	r7,r2
 4001430:	e1bfff17 	ldw	r6,-4(fp)
 4001434:	e17ffe17 	ldw	r5,-8(fp)
 4001438:	1809883a 	mov	r4,r3
 400143c:	4001a1c0 	call	4001a1c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4001440:	e037883a 	mov	sp,fp
 4001444:	dfc00117 	ldw	ra,4(sp)
 4001448:	df000017 	ldw	fp,0(sp)
 400144c:	dec00204 	addi	sp,sp,8
 4001450:	f800283a 	ret

04001454 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4001454:	defffa04 	addi	sp,sp,-24
 4001458:	dfc00515 	stw	ra,20(sp)
 400145c:	df000415 	stw	fp,16(sp)
 4001460:	df000404 	addi	fp,sp,16
 4001464:	e13ffd15 	stw	r4,-12(fp)
 4001468:	e17ffe15 	stw	r5,-8(fp)
 400146c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4001470:	e0bffd17 	ldw	r2,-12(fp)
 4001474:	10800017 	ldw	r2,0(r2)
 4001478:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400147c:	e0bffc17 	ldw	r2,-16(fp)
 4001480:	10c00a04 	addi	r3,r2,40
 4001484:	e0bffd17 	ldw	r2,-12(fp)
 4001488:	10800217 	ldw	r2,8(r2)
 400148c:	100f883a 	mov	r7,r2
 4001490:	e1bfff17 	ldw	r6,-4(fp)
 4001494:	e17ffe17 	ldw	r5,-8(fp)
 4001498:	1809883a 	mov	r4,r3
 400149c:	4001c380 	call	4001c38 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40014a0:	e037883a 	mov	sp,fp
 40014a4:	dfc00117 	ldw	ra,4(sp)
 40014a8:	df000017 	ldw	fp,0(sp)
 40014ac:	dec00204 	addi	sp,sp,8
 40014b0:	f800283a 	ret

040014b4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 40014b4:	defffc04 	addi	sp,sp,-16
 40014b8:	dfc00315 	stw	ra,12(sp)
 40014bc:	df000215 	stw	fp,8(sp)
 40014c0:	df000204 	addi	fp,sp,8
 40014c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40014c8:	e0bfff17 	ldw	r2,-4(fp)
 40014cc:	10800017 	ldw	r2,0(r2)
 40014d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40014d4:	e0bffe17 	ldw	r2,-8(fp)
 40014d8:	10c00a04 	addi	r3,r2,40
 40014dc:	e0bfff17 	ldw	r2,-4(fp)
 40014e0:	10800217 	ldw	r2,8(r2)
 40014e4:	100b883a 	mov	r5,r2
 40014e8:	1809883a 	mov	r4,r3
 40014ec:	40018c40 	call	40018c4 <altera_avalon_jtag_uart_close>
}
 40014f0:	e037883a 	mov	sp,fp
 40014f4:	dfc00117 	ldw	ra,4(sp)
 40014f8:	df000017 	ldw	fp,0(sp)
 40014fc:	dec00204 	addi	sp,sp,8
 4001500:	f800283a 	ret

04001504 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4001504:	defffa04 	addi	sp,sp,-24
 4001508:	dfc00515 	stw	ra,20(sp)
 400150c:	df000415 	stw	fp,16(sp)
 4001510:	df000404 	addi	fp,sp,16
 4001514:	e13ffd15 	stw	r4,-12(fp)
 4001518:	e17ffe15 	stw	r5,-8(fp)
 400151c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4001520:	e0bffd17 	ldw	r2,-12(fp)
 4001524:	10800017 	ldw	r2,0(r2)
 4001528:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400152c:	e0bffc17 	ldw	r2,-16(fp)
 4001530:	10800a04 	addi	r2,r2,40
 4001534:	e1bfff17 	ldw	r6,-4(fp)
 4001538:	e17ffe17 	ldw	r5,-8(fp)
 400153c:	1009883a 	mov	r4,r2
 4001540:	400192c0 	call	400192c <altera_avalon_jtag_uart_ioctl>
}
 4001544:	e037883a 	mov	sp,fp
 4001548:	dfc00117 	ldw	ra,4(sp)
 400154c:	df000017 	ldw	fp,0(sp)
 4001550:	dec00204 	addi	sp,sp,8
 4001554:	f800283a 	ret

04001558 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4001558:	defffa04 	addi	sp,sp,-24
 400155c:	dfc00515 	stw	ra,20(sp)
 4001560:	df000415 	stw	fp,16(sp)
 4001564:	df000404 	addi	fp,sp,16
 4001568:	e13ffd15 	stw	r4,-12(fp)
 400156c:	e17ffe15 	stw	r5,-8(fp)
 4001570:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4001574:	e0bffd17 	ldw	r2,-12(fp)
 4001578:	00c00044 	movi	r3,1
 400157c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4001580:	e0bffd17 	ldw	r2,-12(fp)
 4001584:	10800017 	ldw	r2,0(r2)
 4001588:	10800104 	addi	r2,r2,4
 400158c:	1007883a 	mov	r3,r2
 4001590:	e0bffd17 	ldw	r2,-12(fp)
 4001594:	10800817 	ldw	r2,32(r2)
 4001598:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400159c:	e0bffe17 	ldw	r2,-8(fp)
 40015a0:	e0ffff17 	ldw	r3,-4(fp)
 40015a4:	d8000015 	stw	zero,0(sp)
 40015a8:	e1fffd17 	ldw	r7,-12(fp)
 40015ac:	01810034 	movhi	r6,1024
 40015b0:	31858604 	addi	r6,r6,5656
 40015b4:	180b883a 	mov	r5,r3
 40015b8:	1009883a 	mov	r4,r2
 40015bc:	40025280 	call	4002528 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40015c0:	e0bffd17 	ldw	r2,-12(fp)
 40015c4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40015c8:	e0bffd17 	ldw	r2,-12(fp)
 40015cc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40015d0:	d0e4d517 	ldw	r3,-27820(gp)
 40015d4:	e1fffd17 	ldw	r7,-12(fp)
 40015d8:	01810034 	movhi	r6,1024
 40015dc:	31860904 	addi	r6,r6,6180
 40015e0:	180b883a 	mov	r5,r3
 40015e4:	1009883a 	mov	r4,r2
 40015e8:	4001f500 	call	4001f50 <alt_alarm_start>
 40015ec:	1000040e 	bge	r2,zero,4001600 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40015f0:	e0fffd17 	ldw	r3,-12(fp)
 40015f4:	00a00034 	movhi	r2,32768
 40015f8:	10bfffc4 	addi	r2,r2,-1
 40015fc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4001600:	0001883a 	nop
 4001604:	e037883a 	mov	sp,fp
 4001608:	dfc00117 	ldw	ra,4(sp)
 400160c:	df000017 	ldw	fp,0(sp)
 4001610:	dec00204 	addi	sp,sp,8
 4001614:	f800283a 	ret

04001618 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4001618:	defff804 	addi	sp,sp,-32
 400161c:	df000715 	stw	fp,28(sp)
 4001620:	df000704 	addi	fp,sp,28
 4001624:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4001628:	e0bfff17 	ldw	r2,-4(fp)
 400162c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4001630:	e0bffb17 	ldw	r2,-20(fp)
 4001634:	10800017 	ldw	r2,0(r2)
 4001638:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400163c:	e0bffc17 	ldw	r2,-16(fp)
 4001640:	10800104 	addi	r2,r2,4
 4001644:	10800037 	ldwio	r2,0(r2)
 4001648:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400164c:	e0bffd17 	ldw	r2,-12(fp)
 4001650:	1080c00c 	andi	r2,r2,768
 4001654:	10006d26 	beq	r2,zero,400180c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4001658:	e0bffd17 	ldw	r2,-12(fp)
 400165c:	1080400c 	andi	r2,r2,256
 4001660:	10003526 	beq	r2,zero,4001738 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4001664:	00800074 	movhi	r2,1
 4001668:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400166c:	e0bffb17 	ldw	r2,-20(fp)
 4001670:	10800a17 	ldw	r2,40(r2)
 4001674:	10800044 	addi	r2,r2,1
 4001678:	1081ffcc 	andi	r2,r2,2047
 400167c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4001680:	e0bffb17 	ldw	r2,-20(fp)
 4001684:	10c00b17 	ldw	r3,44(r2)
 4001688:	e0bffe17 	ldw	r2,-8(fp)
 400168c:	18801526 	beq	r3,r2,40016e4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4001690:	e0bffc17 	ldw	r2,-16(fp)
 4001694:	10800037 	ldwio	r2,0(r2)
 4001698:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400169c:	e0bff917 	ldw	r2,-28(fp)
 40016a0:	10a0000c 	andi	r2,r2,32768
 40016a4:	10001126 	beq	r2,zero,40016ec <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40016a8:	e0bffb17 	ldw	r2,-20(fp)
 40016ac:	10800a17 	ldw	r2,40(r2)
 40016b0:	e0fff917 	ldw	r3,-28(fp)
 40016b4:	1809883a 	mov	r4,r3
 40016b8:	e0fffb17 	ldw	r3,-20(fp)
 40016bc:	1885883a 	add	r2,r3,r2
 40016c0:	10800e04 	addi	r2,r2,56
 40016c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40016c8:	e0bffb17 	ldw	r2,-20(fp)
 40016cc:	10800a17 	ldw	r2,40(r2)
 40016d0:	10800044 	addi	r2,r2,1
 40016d4:	10c1ffcc 	andi	r3,r2,2047
 40016d8:	e0bffb17 	ldw	r2,-20(fp)
 40016dc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40016e0:	003fe206 	br	400166c <__alt_mem_onchip_memory+0xfbff966c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 40016e4:	0001883a 	nop
 40016e8:	00000106 	br	40016f0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 40016ec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40016f0:	e0bff917 	ldw	r2,-28(fp)
 40016f4:	10bfffec 	andhi	r2,r2,65535
 40016f8:	10000f26 	beq	r2,zero,4001738 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40016fc:	e0bffb17 	ldw	r2,-20(fp)
 4001700:	10c00817 	ldw	r3,32(r2)
 4001704:	00bfff84 	movi	r2,-2
 4001708:	1886703a 	and	r3,r3,r2
 400170c:	e0bffb17 	ldw	r2,-20(fp)
 4001710:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4001714:	e0bffc17 	ldw	r2,-16(fp)
 4001718:	10800104 	addi	r2,r2,4
 400171c:	1007883a 	mov	r3,r2
 4001720:	e0bffb17 	ldw	r2,-20(fp)
 4001724:	10800817 	ldw	r2,32(r2)
 4001728:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400172c:	e0bffc17 	ldw	r2,-16(fp)
 4001730:	10800104 	addi	r2,r2,4
 4001734:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4001738:	e0bffd17 	ldw	r2,-12(fp)
 400173c:	1080800c 	andi	r2,r2,512
 4001740:	103fbe26 	beq	r2,zero,400163c <__alt_mem_onchip_memory+0xfbff963c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4001744:	e0bffd17 	ldw	r2,-12(fp)
 4001748:	1004d43a 	srli	r2,r2,16
 400174c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4001750:	00001406 	br	40017a4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4001754:	e0bffc17 	ldw	r2,-16(fp)
 4001758:	e0fffb17 	ldw	r3,-20(fp)
 400175c:	18c00d17 	ldw	r3,52(r3)
 4001760:	e13ffb17 	ldw	r4,-20(fp)
 4001764:	20c7883a 	add	r3,r4,r3
 4001768:	18c20e04 	addi	r3,r3,2104
 400176c:	18c00003 	ldbu	r3,0(r3)
 4001770:	18c03fcc 	andi	r3,r3,255
 4001774:	18c0201c 	xori	r3,r3,128
 4001778:	18ffe004 	addi	r3,r3,-128
 400177c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4001780:	e0bffb17 	ldw	r2,-20(fp)
 4001784:	10800d17 	ldw	r2,52(r2)
 4001788:	10800044 	addi	r2,r2,1
 400178c:	10c1ffcc 	andi	r3,r2,2047
 4001790:	e0bffb17 	ldw	r2,-20(fp)
 4001794:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4001798:	e0bffa17 	ldw	r2,-24(fp)
 400179c:	10bfffc4 	addi	r2,r2,-1
 40017a0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40017a4:	e0bffa17 	ldw	r2,-24(fp)
 40017a8:	10000526 	beq	r2,zero,40017c0 <altera_avalon_jtag_uart_irq+0x1a8>
 40017ac:	e0bffb17 	ldw	r2,-20(fp)
 40017b0:	10c00d17 	ldw	r3,52(r2)
 40017b4:	e0bffb17 	ldw	r2,-20(fp)
 40017b8:	10800c17 	ldw	r2,48(r2)
 40017bc:	18bfe51e 	bne	r3,r2,4001754 <__alt_mem_onchip_memory+0xfbff9754>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 40017c0:	e0bffa17 	ldw	r2,-24(fp)
 40017c4:	103f9d26 	beq	r2,zero,400163c <__alt_mem_onchip_memory+0xfbff963c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40017c8:	e0bffb17 	ldw	r2,-20(fp)
 40017cc:	10c00817 	ldw	r3,32(r2)
 40017d0:	00bfff44 	movi	r2,-3
 40017d4:	1886703a 	and	r3,r3,r2
 40017d8:	e0bffb17 	ldw	r2,-20(fp)
 40017dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40017e0:	e0bffb17 	ldw	r2,-20(fp)
 40017e4:	10800017 	ldw	r2,0(r2)
 40017e8:	10800104 	addi	r2,r2,4
 40017ec:	1007883a 	mov	r3,r2
 40017f0:	e0bffb17 	ldw	r2,-20(fp)
 40017f4:	10800817 	ldw	r2,32(r2)
 40017f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40017fc:	e0bffc17 	ldw	r2,-16(fp)
 4001800:	10800104 	addi	r2,r2,4
 4001804:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4001808:	003f8c06 	br	400163c <__alt_mem_onchip_memory+0xfbff963c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400180c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4001810:	0001883a 	nop
 4001814:	e037883a 	mov	sp,fp
 4001818:	df000017 	ldw	fp,0(sp)
 400181c:	dec00104 	addi	sp,sp,4
 4001820:	f800283a 	ret

04001824 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4001824:	defff804 	addi	sp,sp,-32
 4001828:	df000715 	stw	fp,28(sp)
 400182c:	df000704 	addi	fp,sp,28
 4001830:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4001834:	e0bffb17 	ldw	r2,-20(fp)
 4001838:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400183c:	e0bff917 	ldw	r2,-28(fp)
 4001840:	10800017 	ldw	r2,0(r2)
 4001844:	10800104 	addi	r2,r2,4
 4001848:	10800037 	ldwio	r2,0(r2)
 400184c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4001850:	e0bffa17 	ldw	r2,-24(fp)
 4001854:	1081000c 	andi	r2,r2,1024
 4001858:	10000b26 	beq	r2,zero,4001888 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400185c:	e0bff917 	ldw	r2,-28(fp)
 4001860:	10800017 	ldw	r2,0(r2)
 4001864:	10800104 	addi	r2,r2,4
 4001868:	1007883a 	mov	r3,r2
 400186c:	e0bff917 	ldw	r2,-28(fp)
 4001870:	10800817 	ldw	r2,32(r2)
 4001874:	10810014 	ori	r2,r2,1024
 4001878:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400187c:	e0bff917 	ldw	r2,-28(fp)
 4001880:	10000915 	stw	zero,36(r2)
 4001884:	00000a06 	br	40018b0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4001888:	e0bff917 	ldw	r2,-28(fp)
 400188c:	10c00917 	ldw	r3,36(r2)
 4001890:	00a00034 	movhi	r2,32768
 4001894:	10bfff04 	addi	r2,r2,-4
 4001898:	10c00536 	bltu	r2,r3,40018b0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 400189c:	e0bff917 	ldw	r2,-28(fp)
 40018a0:	10800917 	ldw	r2,36(r2)
 40018a4:	10c00044 	addi	r3,r2,1
 40018a8:	e0bff917 	ldw	r2,-28(fp)
 40018ac:	10c00915 	stw	r3,36(r2)
 40018b0:	d0a4d517 	ldw	r2,-27820(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40018b4:	e037883a 	mov	sp,fp
 40018b8:	df000017 	ldw	fp,0(sp)
 40018bc:	dec00104 	addi	sp,sp,4
 40018c0:	f800283a 	ret

040018c4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40018c4:	defffd04 	addi	sp,sp,-12
 40018c8:	df000215 	stw	fp,8(sp)
 40018cc:	df000204 	addi	fp,sp,8
 40018d0:	e13ffe15 	stw	r4,-8(fp)
 40018d4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40018d8:	00000506 	br	40018f0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40018dc:	e0bfff17 	ldw	r2,-4(fp)
 40018e0:	1090000c 	andi	r2,r2,16384
 40018e4:	10000226 	beq	r2,zero,40018f0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40018e8:	00bffd44 	movi	r2,-11
 40018ec:	00000b06 	br	400191c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40018f0:	e0bffe17 	ldw	r2,-8(fp)
 40018f4:	10c00d17 	ldw	r3,52(r2)
 40018f8:	e0bffe17 	ldw	r2,-8(fp)
 40018fc:	10800c17 	ldw	r2,48(r2)
 4001900:	18800526 	beq	r3,r2,4001918 <altera_avalon_jtag_uart_close+0x54>
 4001904:	e0bffe17 	ldw	r2,-8(fp)
 4001908:	10c00917 	ldw	r3,36(r2)
 400190c:	e0bffe17 	ldw	r2,-8(fp)
 4001910:	10800117 	ldw	r2,4(r2)
 4001914:	18bff136 	bltu	r3,r2,40018dc <__alt_mem_onchip_memory+0xfbff98dc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4001918:	0005883a 	mov	r2,zero
}
 400191c:	e037883a 	mov	sp,fp
 4001920:	df000017 	ldw	fp,0(sp)
 4001924:	dec00104 	addi	sp,sp,4
 4001928:	f800283a 	ret

0400192c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400192c:	defffa04 	addi	sp,sp,-24
 4001930:	df000515 	stw	fp,20(sp)
 4001934:	df000504 	addi	fp,sp,20
 4001938:	e13ffd15 	stw	r4,-12(fp)
 400193c:	e17ffe15 	stw	r5,-8(fp)
 4001940:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4001944:	00bff9c4 	movi	r2,-25
 4001948:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400194c:	e0bffe17 	ldw	r2,-8(fp)
 4001950:	10da8060 	cmpeqi	r3,r2,27137
 4001954:	1800031e 	bne	r3,zero,4001964 <altera_avalon_jtag_uart_ioctl+0x38>
 4001958:	109a80a0 	cmpeqi	r2,r2,27138
 400195c:	1000181e 	bne	r2,zero,40019c0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4001960:	00002906 	br	4001a08 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4001964:	e0bffd17 	ldw	r2,-12(fp)
 4001968:	10c00117 	ldw	r3,4(r2)
 400196c:	00a00034 	movhi	r2,32768
 4001970:	10bfffc4 	addi	r2,r2,-1
 4001974:	18802126 	beq	r3,r2,40019fc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4001978:	e0bfff17 	ldw	r2,-4(fp)
 400197c:	10800017 	ldw	r2,0(r2)
 4001980:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4001984:	e0bffc17 	ldw	r2,-16(fp)
 4001988:	10800090 	cmplti	r2,r2,2
 400198c:	1000061e 	bne	r2,zero,40019a8 <altera_avalon_jtag_uart_ioctl+0x7c>
 4001990:	e0fffc17 	ldw	r3,-16(fp)
 4001994:	00a00034 	movhi	r2,32768
 4001998:	10bfffc4 	addi	r2,r2,-1
 400199c:	18800226 	beq	r3,r2,40019a8 <altera_avalon_jtag_uart_ioctl+0x7c>
 40019a0:	e0bffc17 	ldw	r2,-16(fp)
 40019a4:	00000206 	br	40019b0 <altera_avalon_jtag_uart_ioctl+0x84>
 40019a8:	00a00034 	movhi	r2,32768
 40019ac:	10bfff84 	addi	r2,r2,-2
 40019b0:	e0fffd17 	ldw	r3,-12(fp)
 40019b4:	18800115 	stw	r2,4(r3)
      rc = 0;
 40019b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40019bc:	00000f06 	br	40019fc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 40019c0:	e0bffd17 	ldw	r2,-12(fp)
 40019c4:	10c00117 	ldw	r3,4(r2)
 40019c8:	00a00034 	movhi	r2,32768
 40019cc:	10bfffc4 	addi	r2,r2,-1
 40019d0:	18800c26 	beq	r3,r2,4001a04 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40019d4:	e0bffd17 	ldw	r2,-12(fp)
 40019d8:	10c00917 	ldw	r3,36(r2)
 40019dc:	e0bffd17 	ldw	r2,-12(fp)
 40019e0:	10800117 	ldw	r2,4(r2)
 40019e4:	1885803a 	cmpltu	r2,r3,r2
 40019e8:	10c03fcc 	andi	r3,r2,255
 40019ec:	e0bfff17 	ldw	r2,-4(fp)
 40019f0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 40019f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40019f8:	00000206 	br	4001a04 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 40019fc:	0001883a 	nop
 4001a00:	00000106 	br	4001a08 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4001a04:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4001a08:	e0bffb17 	ldw	r2,-20(fp)
}
 4001a0c:	e037883a 	mov	sp,fp
 4001a10:	df000017 	ldw	fp,0(sp)
 4001a14:	dec00104 	addi	sp,sp,4
 4001a18:	f800283a 	ret

04001a1c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4001a1c:	defff304 	addi	sp,sp,-52
 4001a20:	dfc00c15 	stw	ra,48(sp)
 4001a24:	df000b15 	stw	fp,44(sp)
 4001a28:	df000b04 	addi	fp,sp,44
 4001a2c:	e13ffc15 	stw	r4,-16(fp)
 4001a30:	e17ffd15 	stw	r5,-12(fp)
 4001a34:	e1bffe15 	stw	r6,-8(fp)
 4001a38:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4001a3c:	e0bffd17 	ldw	r2,-12(fp)
 4001a40:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4001a44:	00004706 	br	4001b64 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4001a48:	e0bffc17 	ldw	r2,-16(fp)
 4001a4c:	10800a17 	ldw	r2,40(r2)
 4001a50:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4001a54:	e0bffc17 	ldw	r2,-16(fp)
 4001a58:	10800b17 	ldw	r2,44(r2)
 4001a5c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4001a60:	e0fff717 	ldw	r3,-36(fp)
 4001a64:	e0bff817 	ldw	r2,-32(fp)
 4001a68:	18800536 	bltu	r3,r2,4001a80 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4001a6c:	e0fff717 	ldw	r3,-36(fp)
 4001a70:	e0bff817 	ldw	r2,-32(fp)
 4001a74:	1885c83a 	sub	r2,r3,r2
 4001a78:	e0bff615 	stw	r2,-40(fp)
 4001a7c:	00000406 	br	4001a90 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4001a80:	00c20004 	movi	r3,2048
 4001a84:	e0bff817 	ldw	r2,-32(fp)
 4001a88:	1885c83a 	sub	r2,r3,r2
 4001a8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4001a90:	e0bff617 	ldw	r2,-40(fp)
 4001a94:	10001e26 	beq	r2,zero,4001b10 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4001a98:	e0fffe17 	ldw	r3,-8(fp)
 4001a9c:	e0bff617 	ldw	r2,-40(fp)
 4001aa0:	1880022e 	bgeu	r3,r2,4001aac <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4001aa4:	e0bffe17 	ldw	r2,-8(fp)
 4001aa8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4001aac:	e0bffc17 	ldw	r2,-16(fp)
 4001ab0:	10c00e04 	addi	r3,r2,56
 4001ab4:	e0bff817 	ldw	r2,-32(fp)
 4001ab8:	1885883a 	add	r2,r3,r2
 4001abc:	e1bff617 	ldw	r6,-40(fp)
 4001ac0:	100b883a 	mov	r5,r2
 4001ac4:	e13ff517 	ldw	r4,-44(fp)
 4001ac8:	40031540 	call	4003154 <memcpy>
      ptr   += n;
 4001acc:	e0fff517 	ldw	r3,-44(fp)
 4001ad0:	e0bff617 	ldw	r2,-40(fp)
 4001ad4:	1885883a 	add	r2,r3,r2
 4001ad8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4001adc:	e0fffe17 	ldw	r3,-8(fp)
 4001ae0:	e0bff617 	ldw	r2,-40(fp)
 4001ae4:	1885c83a 	sub	r2,r3,r2
 4001ae8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4001aec:	e0fff817 	ldw	r3,-32(fp)
 4001af0:	e0bff617 	ldw	r2,-40(fp)
 4001af4:	1885883a 	add	r2,r3,r2
 4001af8:	10c1ffcc 	andi	r3,r2,2047
 4001afc:	e0bffc17 	ldw	r2,-16(fp)
 4001b00:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4001b04:	e0bffe17 	ldw	r2,-8(fp)
 4001b08:	00bfcf16 	blt	zero,r2,4001a48 <__alt_mem_onchip_memory+0xfbff9a48>
 4001b0c:	00000106 	br	4001b14 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4001b10:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4001b14:	e0fff517 	ldw	r3,-44(fp)
 4001b18:	e0bffd17 	ldw	r2,-12(fp)
 4001b1c:	1880141e 	bne	r3,r2,4001b70 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4001b20:	e0bfff17 	ldw	r2,-4(fp)
 4001b24:	1090000c 	andi	r2,r2,16384
 4001b28:	1000131e 	bne	r2,zero,4001b78 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4001b2c:	0001883a 	nop
 4001b30:	e0bffc17 	ldw	r2,-16(fp)
 4001b34:	10c00a17 	ldw	r3,40(r2)
 4001b38:	e0bff717 	ldw	r2,-36(fp)
 4001b3c:	1880051e 	bne	r3,r2,4001b54 <altera_avalon_jtag_uart_read+0x138>
 4001b40:	e0bffc17 	ldw	r2,-16(fp)
 4001b44:	10c00917 	ldw	r3,36(r2)
 4001b48:	e0bffc17 	ldw	r2,-16(fp)
 4001b4c:	10800117 	ldw	r2,4(r2)
 4001b50:	18bff736 	bltu	r3,r2,4001b30 <__alt_mem_onchip_memory+0xfbff9b30>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4001b54:	e0bffc17 	ldw	r2,-16(fp)
 4001b58:	10c00a17 	ldw	r3,40(r2)
 4001b5c:	e0bff717 	ldw	r2,-36(fp)
 4001b60:	18800726 	beq	r3,r2,4001b80 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4001b64:	e0bffe17 	ldw	r2,-8(fp)
 4001b68:	00bfb716 	blt	zero,r2,4001a48 <__alt_mem_onchip_memory+0xfbff9a48>
 4001b6c:	00000506 	br	4001b84 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4001b70:	0001883a 	nop
 4001b74:	00000306 	br	4001b84 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4001b78:	0001883a 	nop
 4001b7c:	00000106 	br	4001b84 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4001b80:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4001b84:	e0fff517 	ldw	r3,-44(fp)
 4001b88:	e0bffd17 	ldw	r2,-12(fp)
 4001b8c:	18801826 	beq	r3,r2,4001bf0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001b90:	0005303a 	rdctl	r2,status
 4001b94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001b98:	e0fffb17 	ldw	r3,-20(fp)
 4001b9c:	00bfff84 	movi	r2,-2
 4001ba0:	1884703a 	and	r2,r3,r2
 4001ba4:	1001703a 	wrctl	status,r2
  
  return context;
 4001ba8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4001bac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4001bb0:	e0bffc17 	ldw	r2,-16(fp)
 4001bb4:	10800817 	ldw	r2,32(r2)
 4001bb8:	10c00054 	ori	r3,r2,1
 4001bbc:	e0bffc17 	ldw	r2,-16(fp)
 4001bc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4001bc4:	e0bffc17 	ldw	r2,-16(fp)
 4001bc8:	10800017 	ldw	r2,0(r2)
 4001bcc:	10800104 	addi	r2,r2,4
 4001bd0:	1007883a 	mov	r3,r2
 4001bd4:	e0bffc17 	ldw	r2,-16(fp)
 4001bd8:	10800817 	ldw	r2,32(r2)
 4001bdc:	18800035 	stwio	r2,0(r3)
 4001be0:	e0bffa17 	ldw	r2,-24(fp)
 4001be4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001be8:	e0bff917 	ldw	r2,-28(fp)
 4001bec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4001bf0:	e0fff517 	ldw	r3,-44(fp)
 4001bf4:	e0bffd17 	ldw	r2,-12(fp)
 4001bf8:	18800426 	beq	r3,r2,4001c0c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4001bfc:	e0fff517 	ldw	r3,-44(fp)
 4001c00:	e0bffd17 	ldw	r2,-12(fp)
 4001c04:	1885c83a 	sub	r2,r3,r2
 4001c08:	00000606 	br	4001c24 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4001c0c:	e0bfff17 	ldw	r2,-4(fp)
 4001c10:	1090000c 	andi	r2,r2,16384
 4001c14:	10000226 	beq	r2,zero,4001c20 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4001c18:	00bffd44 	movi	r2,-11
 4001c1c:	00000106 	br	4001c24 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4001c20:	00bffec4 	movi	r2,-5
}
 4001c24:	e037883a 	mov	sp,fp
 4001c28:	dfc00117 	ldw	ra,4(sp)
 4001c2c:	df000017 	ldw	fp,0(sp)
 4001c30:	dec00204 	addi	sp,sp,8
 4001c34:	f800283a 	ret

04001c38 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4001c38:	defff304 	addi	sp,sp,-52
 4001c3c:	dfc00c15 	stw	ra,48(sp)
 4001c40:	df000b15 	stw	fp,44(sp)
 4001c44:	df000b04 	addi	fp,sp,44
 4001c48:	e13ffc15 	stw	r4,-16(fp)
 4001c4c:	e17ffd15 	stw	r5,-12(fp)
 4001c50:	e1bffe15 	stw	r6,-8(fp)
 4001c54:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4001c58:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4001c5c:	e0bffd17 	ldw	r2,-12(fp)
 4001c60:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4001c64:	00003706 	br	4001d44 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4001c68:	e0bffc17 	ldw	r2,-16(fp)
 4001c6c:	10800c17 	ldw	r2,48(r2)
 4001c70:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4001c74:	e0bffc17 	ldw	r2,-16(fp)
 4001c78:	10800d17 	ldw	r2,52(r2)
 4001c7c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4001c80:	e0fff917 	ldw	r3,-28(fp)
 4001c84:	e0bff517 	ldw	r2,-44(fp)
 4001c88:	1880062e 	bgeu	r3,r2,4001ca4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4001c8c:	e0fff517 	ldw	r3,-44(fp)
 4001c90:	e0bff917 	ldw	r2,-28(fp)
 4001c94:	1885c83a 	sub	r2,r3,r2
 4001c98:	10bfffc4 	addi	r2,r2,-1
 4001c9c:	e0bff615 	stw	r2,-40(fp)
 4001ca0:	00000b06 	br	4001cd0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4001ca4:	e0bff517 	ldw	r2,-44(fp)
 4001ca8:	10000526 	beq	r2,zero,4001cc0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4001cac:	00c20004 	movi	r3,2048
 4001cb0:	e0bff917 	ldw	r2,-28(fp)
 4001cb4:	1885c83a 	sub	r2,r3,r2
 4001cb8:	e0bff615 	stw	r2,-40(fp)
 4001cbc:	00000406 	br	4001cd0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4001cc0:	00c1ffc4 	movi	r3,2047
 4001cc4:	e0bff917 	ldw	r2,-28(fp)
 4001cc8:	1885c83a 	sub	r2,r3,r2
 4001ccc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4001cd0:	e0bff617 	ldw	r2,-40(fp)
 4001cd4:	10001e26 	beq	r2,zero,4001d50 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4001cd8:	e0fffe17 	ldw	r3,-8(fp)
 4001cdc:	e0bff617 	ldw	r2,-40(fp)
 4001ce0:	1880022e 	bgeu	r3,r2,4001cec <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4001ce4:	e0bffe17 	ldw	r2,-8(fp)
 4001ce8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4001cec:	e0bffc17 	ldw	r2,-16(fp)
 4001cf0:	10c20e04 	addi	r3,r2,2104
 4001cf4:	e0bff917 	ldw	r2,-28(fp)
 4001cf8:	1885883a 	add	r2,r3,r2
 4001cfc:	e1bff617 	ldw	r6,-40(fp)
 4001d00:	e17ffd17 	ldw	r5,-12(fp)
 4001d04:	1009883a 	mov	r4,r2
 4001d08:	40031540 	call	4003154 <memcpy>
      ptr   += n;
 4001d0c:	e0fffd17 	ldw	r3,-12(fp)
 4001d10:	e0bff617 	ldw	r2,-40(fp)
 4001d14:	1885883a 	add	r2,r3,r2
 4001d18:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4001d1c:	e0fffe17 	ldw	r3,-8(fp)
 4001d20:	e0bff617 	ldw	r2,-40(fp)
 4001d24:	1885c83a 	sub	r2,r3,r2
 4001d28:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4001d2c:	e0fff917 	ldw	r3,-28(fp)
 4001d30:	e0bff617 	ldw	r2,-40(fp)
 4001d34:	1885883a 	add	r2,r3,r2
 4001d38:	10c1ffcc 	andi	r3,r2,2047
 4001d3c:	e0bffc17 	ldw	r2,-16(fp)
 4001d40:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4001d44:	e0bffe17 	ldw	r2,-8(fp)
 4001d48:	00bfc716 	blt	zero,r2,4001c68 <__alt_mem_onchip_memory+0xfbff9c68>
 4001d4c:	00000106 	br	4001d54 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4001d50:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001d54:	0005303a 	rdctl	r2,status
 4001d58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001d5c:	e0fffb17 	ldw	r3,-20(fp)
 4001d60:	00bfff84 	movi	r2,-2
 4001d64:	1884703a 	and	r2,r3,r2
 4001d68:	1001703a 	wrctl	status,r2
  
  return context;
 4001d6c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4001d70:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4001d74:	e0bffc17 	ldw	r2,-16(fp)
 4001d78:	10800817 	ldw	r2,32(r2)
 4001d7c:	10c00094 	ori	r3,r2,2
 4001d80:	e0bffc17 	ldw	r2,-16(fp)
 4001d84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4001d88:	e0bffc17 	ldw	r2,-16(fp)
 4001d8c:	10800017 	ldw	r2,0(r2)
 4001d90:	10800104 	addi	r2,r2,4
 4001d94:	1007883a 	mov	r3,r2
 4001d98:	e0bffc17 	ldw	r2,-16(fp)
 4001d9c:	10800817 	ldw	r2,32(r2)
 4001da0:	18800035 	stwio	r2,0(r3)
 4001da4:	e0bffa17 	ldw	r2,-24(fp)
 4001da8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001dac:	e0bff817 	ldw	r2,-32(fp)
 4001db0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4001db4:	e0bffe17 	ldw	r2,-8(fp)
 4001db8:	0080100e 	bge	zero,r2,4001dfc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4001dbc:	e0bfff17 	ldw	r2,-4(fp)
 4001dc0:	1090000c 	andi	r2,r2,16384
 4001dc4:	1000101e 	bne	r2,zero,4001e08 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4001dc8:	0001883a 	nop
 4001dcc:	e0bffc17 	ldw	r2,-16(fp)
 4001dd0:	10c00d17 	ldw	r3,52(r2)
 4001dd4:	e0bff517 	ldw	r2,-44(fp)
 4001dd8:	1880051e 	bne	r3,r2,4001df0 <altera_avalon_jtag_uart_write+0x1b8>
 4001ddc:	e0bffc17 	ldw	r2,-16(fp)
 4001de0:	10c00917 	ldw	r3,36(r2)
 4001de4:	e0bffc17 	ldw	r2,-16(fp)
 4001de8:	10800117 	ldw	r2,4(r2)
 4001dec:	18bff736 	bltu	r3,r2,4001dcc <__alt_mem_onchip_memory+0xfbff9dcc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4001df0:	e0bffc17 	ldw	r2,-16(fp)
 4001df4:	10800917 	ldw	r2,36(r2)
 4001df8:	1000051e 	bne	r2,zero,4001e10 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4001dfc:	e0bffe17 	ldw	r2,-8(fp)
 4001e00:	00bfd016 	blt	zero,r2,4001d44 <__alt_mem_onchip_memory+0xfbff9d44>
 4001e04:	00000306 	br	4001e14 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4001e08:	0001883a 	nop
 4001e0c:	00000106 	br	4001e14 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4001e10:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4001e14:	e0fffd17 	ldw	r3,-12(fp)
 4001e18:	e0bff717 	ldw	r2,-36(fp)
 4001e1c:	18800426 	beq	r3,r2,4001e30 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4001e20:	e0fffd17 	ldw	r3,-12(fp)
 4001e24:	e0bff717 	ldw	r2,-36(fp)
 4001e28:	1885c83a 	sub	r2,r3,r2
 4001e2c:	00000606 	br	4001e48 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4001e30:	e0bfff17 	ldw	r2,-4(fp)
 4001e34:	1090000c 	andi	r2,r2,16384
 4001e38:	10000226 	beq	r2,zero,4001e44 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4001e3c:	00bffd44 	movi	r2,-11
 4001e40:	00000106 	br	4001e48 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4001e44:	00bffec4 	movi	r2,-5
}
 4001e48:	e037883a 	mov	sp,fp
 4001e4c:	dfc00117 	ldw	ra,4(sp)
 4001e50:	df000017 	ldw	fp,0(sp)
 4001e54:	dec00204 	addi	sp,sp,8
 4001e58:	f800283a 	ret

04001e5c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4001e5c:	defffa04 	addi	sp,sp,-24
 4001e60:	dfc00515 	stw	ra,20(sp)
 4001e64:	df000415 	stw	fp,16(sp)
 4001e68:	df000404 	addi	fp,sp,16
 4001e6c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4001e70:	0007883a 	mov	r3,zero
 4001e74:	e0bfff17 	ldw	r2,-4(fp)
 4001e78:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4001e7c:	e0bfff17 	ldw	r2,-4(fp)
 4001e80:	10800104 	addi	r2,r2,4
 4001e84:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001e88:	0005303a 	rdctl	r2,status
 4001e8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001e90:	e0fffd17 	ldw	r3,-12(fp)
 4001e94:	00bfff84 	movi	r2,-2
 4001e98:	1884703a 	and	r2,r3,r2
 4001e9c:	1001703a 	wrctl	status,r2
  
  return context;
 4001ea0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4001ea4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4001ea8:	4002c5c0 	call	4002c5c <alt_tick>
 4001eac:	e0bffc17 	ldw	r2,-16(fp)
 4001eb0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001eb4:	e0bffe17 	ldw	r2,-8(fp)
 4001eb8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4001ebc:	0001883a 	nop
 4001ec0:	e037883a 	mov	sp,fp
 4001ec4:	dfc00117 	ldw	ra,4(sp)
 4001ec8:	df000017 	ldw	fp,0(sp)
 4001ecc:	dec00204 	addi	sp,sp,8
 4001ed0:	f800283a 	ret

04001ed4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4001ed4:	defff804 	addi	sp,sp,-32
 4001ed8:	dfc00715 	stw	ra,28(sp)
 4001edc:	df000615 	stw	fp,24(sp)
 4001ee0:	df000604 	addi	fp,sp,24
 4001ee4:	e13ffc15 	stw	r4,-16(fp)
 4001ee8:	e17ffd15 	stw	r5,-12(fp)
 4001eec:	e1bffe15 	stw	r6,-8(fp)
 4001ef0:	e1ffff15 	stw	r7,-4(fp)
 4001ef4:	e0bfff17 	ldw	r2,-4(fp)
 4001ef8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4001efc:	d0a4d517 	ldw	r2,-27820(gp)
 4001f00:	1000021e 	bne	r2,zero,4001f0c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4001f04:	e0bffb17 	ldw	r2,-20(fp)
 4001f08:	d0a4d515 	stw	r2,-27820(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4001f0c:	e0bffc17 	ldw	r2,-16(fp)
 4001f10:	10800104 	addi	r2,r2,4
 4001f14:	00c001c4 	movi	r3,7
 4001f18:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4001f1c:	d8000015 	stw	zero,0(sp)
 4001f20:	e1fffc17 	ldw	r7,-16(fp)
 4001f24:	01810034 	movhi	r6,1024
 4001f28:	31879704 	addi	r6,r6,7772
 4001f2c:	e17ffe17 	ldw	r5,-8(fp)
 4001f30:	e13ffd17 	ldw	r4,-12(fp)
 4001f34:	40025280 	call	4002528 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4001f38:	0001883a 	nop
 4001f3c:	e037883a 	mov	sp,fp
 4001f40:	dfc00117 	ldw	ra,4(sp)
 4001f44:	df000017 	ldw	fp,0(sp)
 4001f48:	dec00204 	addi	sp,sp,8
 4001f4c:	f800283a 	ret

04001f50 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4001f50:	defff504 	addi	sp,sp,-44
 4001f54:	df000a15 	stw	fp,40(sp)
 4001f58:	df000a04 	addi	fp,sp,40
 4001f5c:	e13ffc15 	stw	r4,-16(fp)
 4001f60:	e17ffd15 	stw	r5,-12(fp)
 4001f64:	e1bffe15 	stw	r6,-8(fp)
 4001f68:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4001f6c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4001f70:	d0a4d517 	ldw	r2,-27820(gp)
  
  if (alt_ticks_per_second ())
 4001f74:	10003c26 	beq	r2,zero,4002068 <alt_alarm_start+0x118>
  {
    if (alarm)
 4001f78:	e0bffc17 	ldw	r2,-16(fp)
 4001f7c:	10003826 	beq	r2,zero,4002060 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4001f80:	e0bffc17 	ldw	r2,-16(fp)
 4001f84:	e0fffe17 	ldw	r3,-8(fp)
 4001f88:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4001f8c:	e0bffc17 	ldw	r2,-16(fp)
 4001f90:	e0ffff17 	ldw	r3,-4(fp)
 4001f94:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001f98:	0005303a 	rdctl	r2,status
 4001f9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001fa0:	e0fff917 	ldw	r3,-28(fp)
 4001fa4:	00bfff84 	movi	r2,-2
 4001fa8:	1884703a 	and	r2,r3,r2
 4001fac:	1001703a 	wrctl	status,r2
  
  return context;
 4001fb0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4001fb4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4001fb8:	d0a4d617 	ldw	r2,-27816(gp)
      
      current_nticks = alt_nticks();
 4001fbc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4001fc0:	e0fffd17 	ldw	r3,-12(fp)
 4001fc4:	e0bff617 	ldw	r2,-40(fp)
 4001fc8:	1885883a 	add	r2,r3,r2
 4001fcc:	10c00044 	addi	r3,r2,1
 4001fd0:	e0bffc17 	ldw	r2,-16(fp)
 4001fd4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4001fd8:	e0bffc17 	ldw	r2,-16(fp)
 4001fdc:	10c00217 	ldw	r3,8(r2)
 4001fe0:	e0bff617 	ldw	r2,-40(fp)
 4001fe4:	1880042e 	bgeu	r3,r2,4001ff8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4001fe8:	e0bffc17 	ldw	r2,-16(fp)
 4001fec:	00c00044 	movi	r3,1
 4001ff0:	10c00405 	stb	r3,16(r2)
 4001ff4:	00000206 	br	4002000 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4001ff8:	e0bffc17 	ldw	r2,-16(fp)
 4001ffc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4002000:	e0bffc17 	ldw	r2,-16(fp)
 4002004:	d0e00904 	addi	r3,gp,-32732
 4002008:	e0fffa15 	stw	r3,-24(fp)
 400200c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4002010:	e0bffb17 	ldw	r2,-20(fp)
 4002014:	e0fffa17 	ldw	r3,-24(fp)
 4002018:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400201c:	e0bffa17 	ldw	r2,-24(fp)
 4002020:	10c00017 	ldw	r3,0(r2)
 4002024:	e0bffb17 	ldw	r2,-20(fp)
 4002028:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400202c:	e0bffa17 	ldw	r2,-24(fp)
 4002030:	10800017 	ldw	r2,0(r2)
 4002034:	e0fffb17 	ldw	r3,-20(fp)
 4002038:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400203c:	e0bffa17 	ldw	r2,-24(fp)
 4002040:	e0fffb17 	ldw	r3,-20(fp)
 4002044:	10c00015 	stw	r3,0(r2)
 4002048:	e0bff817 	ldw	r2,-32(fp)
 400204c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4002050:	e0bff717 	ldw	r2,-36(fp)
 4002054:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4002058:	0005883a 	mov	r2,zero
 400205c:	00000306 	br	400206c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4002060:	00bffa84 	movi	r2,-22
 4002064:	00000106 	br	400206c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4002068:	00bfde84 	movi	r2,-134
  }
}
 400206c:	e037883a 	mov	sp,fp
 4002070:	df000017 	ldw	fp,0(sp)
 4002074:	dec00104 	addi	sp,sp,4
 4002078:	f800283a 	ret

0400207c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400207c:	defffa04 	addi	sp,sp,-24
 4002080:	dfc00515 	stw	ra,20(sp)
 4002084:	df000415 	stw	fp,16(sp)
 4002088:	df000404 	addi	fp,sp,16
 400208c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4002090:	008000c4 	movi	r2,3
 4002094:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4002098:	e0fffd17 	ldw	r3,-12(fp)
 400209c:	008003f4 	movhi	r2,15
 40020a0:	10909004 	addi	r2,r2,16960
 40020a4:	1885383a 	mul	r2,r3,r2
 40020a8:	100b883a 	mov	r5,r2
 40020ac:	0100bef4 	movhi	r4,763
 40020b0:	213c2004 	addi	r4,r4,-3968
 40020b4:	4000fa00 	call	4000fa0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 40020b8:	100b883a 	mov	r5,r2
 40020bc:	01200034 	movhi	r4,32768
 40020c0:	213fffc4 	addi	r4,r4,-1
 40020c4:	4000fa00 	call	4000fa0 <__udivsi3>
 40020c8:	100b883a 	mov	r5,r2
 40020cc:	e13fff17 	ldw	r4,-4(fp)
 40020d0:	4000fa00 	call	4000fa0 <__udivsi3>
 40020d4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 40020d8:	e0bffe17 	ldw	r2,-8(fp)
 40020dc:	10002a26 	beq	r2,zero,4002188 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 40020e0:	e03ffc15 	stw	zero,-16(fp)
 40020e4:	00001706 	br	4002144 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40020e8:	00a00034 	movhi	r2,32768
 40020ec:	10bfffc4 	addi	r2,r2,-1
 40020f0:	10bfffc4 	addi	r2,r2,-1
 40020f4:	103ffe1e 	bne	r2,zero,40020f0 <__alt_mem_onchip_memory+0xfbffa0f0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 40020f8:	e0fffd17 	ldw	r3,-12(fp)
 40020fc:	008003f4 	movhi	r2,15
 4002100:	10909004 	addi	r2,r2,16960
 4002104:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4002108:	100b883a 	mov	r5,r2
 400210c:	0100bef4 	movhi	r4,763
 4002110:	213c2004 	addi	r4,r4,-3968
 4002114:	4000fa00 	call	4000fa0 <__udivsi3>
 4002118:	100b883a 	mov	r5,r2
 400211c:	01200034 	movhi	r4,32768
 4002120:	213fffc4 	addi	r4,r4,-1
 4002124:	4000fa00 	call	4000fa0 <__udivsi3>
 4002128:	1007883a 	mov	r3,r2
 400212c:	e0bfff17 	ldw	r2,-4(fp)
 4002130:	10c5c83a 	sub	r2,r2,r3
 4002134:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4002138:	e0bffc17 	ldw	r2,-16(fp)
 400213c:	10800044 	addi	r2,r2,1
 4002140:	e0bffc15 	stw	r2,-16(fp)
 4002144:	e0fffc17 	ldw	r3,-16(fp)
 4002148:	e0bffe17 	ldw	r2,-8(fp)
 400214c:	18bfe616 	blt	r3,r2,40020e8 <__alt_mem_onchip_memory+0xfbffa0e8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4002150:	e0fffd17 	ldw	r3,-12(fp)
 4002154:	008003f4 	movhi	r2,15
 4002158:	10909004 	addi	r2,r2,16960
 400215c:	1885383a 	mul	r2,r3,r2
 4002160:	100b883a 	mov	r5,r2
 4002164:	0100bef4 	movhi	r4,763
 4002168:	213c2004 	addi	r4,r4,-3968
 400216c:	4000fa00 	call	4000fa0 <__udivsi3>
 4002170:	1007883a 	mov	r3,r2
 4002174:	e0bfff17 	ldw	r2,-4(fp)
 4002178:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400217c:	10bfffc4 	addi	r2,r2,-1
 4002180:	103ffe1e 	bne	r2,zero,400217c <__alt_mem_onchip_memory+0xfbffa17c>
 4002184:	00000d06 	br	40021bc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4002188:	e0fffd17 	ldw	r3,-12(fp)
 400218c:	008003f4 	movhi	r2,15
 4002190:	10909004 	addi	r2,r2,16960
 4002194:	1885383a 	mul	r2,r3,r2
 4002198:	100b883a 	mov	r5,r2
 400219c:	0100bef4 	movhi	r4,763
 40021a0:	213c2004 	addi	r4,r4,-3968
 40021a4:	4000fa00 	call	4000fa0 <__udivsi3>
 40021a8:	1007883a 	mov	r3,r2
 40021ac:	e0bfff17 	ldw	r2,-4(fp)
 40021b0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40021b4:	10bfffc4 	addi	r2,r2,-1
 40021b8:	00bffe16 	blt	zero,r2,40021b4 <__alt_mem_onchip_memory+0xfbffa1b4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 40021bc:	0005883a 	mov	r2,zero
}
 40021c0:	e037883a 	mov	sp,fp
 40021c4:	dfc00117 	ldw	ra,4(sp)
 40021c8:	df000017 	ldw	fp,0(sp)
 40021cc:	dec00204 	addi	sp,sp,8
 40021d0:	f800283a 	ret

040021d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40021d4:	defffe04 	addi	sp,sp,-8
 40021d8:	dfc00115 	stw	ra,4(sp)
 40021dc:	df000015 	stw	fp,0(sp)
 40021e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40021e4:	d0a00717 	ldw	r2,-32740(gp)
 40021e8:	10000326 	beq	r2,zero,40021f8 <alt_get_errno+0x24>
 40021ec:	d0a00717 	ldw	r2,-32740(gp)
 40021f0:	103ee83a 	callr	r2
 40021f4:	00000106 	br	40021fc <alt_get_errno+0x28>
 40021f8:	d0a4d004 	addi	r2,gp,-27840
}
 40021fc:	e037883a 	mov	sp,fp
 4002200:	dfc00117 	ldw	ra,4(sp)
 4002204:	df000017 	ldw	fp,0(sp)
 4002208:	dec00204 	addi	sp,sp,8
 400220c:	f800283a 	ret

04002210 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4002210:	defffb04 	addi	sp,sp,-20
 4002214:	dfc00415 	stw	ra,16(sp)
 4002218:	df000315 	stw	fp,12(sp)
 400221c:	df000304 	addi	fp,sp,12
 4002220:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4002224:	e0bfff17 	ldw	r2,-4(fp)
 4002228:	10000616 	blt	r2,zero,4002244 <close+0x34>
 400222c:	e0bfff17 	ldw	r2,-4(fp)
 4002230:	10c00324 	muli	r3,r2,12
 4002234:	00810034 	movhi	r2,1024
 4002238:	10918f04 	addi	r2,r2,17980
 400223c:	1885883a 	add	r2,r3,r2
 4002240:	00000106 	br	4002248 <close+0x38>
 4002244:	0005883a 	mov	r2,zero
 4002248:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400224c:	e0bffd17 	ldw	r2,-12(fp)
 4002250:	10001926 	beq	r2,zero,40022b8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4002254:	e0bffd17 	ldw	r2,-12(fp)
 4002258:	10800017 	ldw	r2,0(r2)
 400225c:	10800417 	ldw	r2,16(r2)
 4002260:	10000626 	beq	r2,zero,400227c <close+0x6c>
 4002264:	e0bffd17 	ldw	r2,-12(fp)
 4002268:	10800017 	ldw	r2,0(r2)
 400226c:	10800417 	ldw	r2,16(r2)
 4002270:	e13ffd17 	ldw	r4,-12(fp)
 4002274:	103ee83a 	callr	r2
 4002278:	00000106 	br	4002280 <close+0x70>
 400227c:	0005883a 	mov	r2,zero
 4002280:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4002284:	e13fff17 	ldw	r4,-4(fp)
 4002288:	4002b5c0 	call	4002b5c <alt_release_fd>
    if (rval < 0)
 400228c:	e0bffe17 	ldw	r2,-8(fp)
 4002290:	1000070e 	bge	r2,zero,40022b0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4002294:	40021d40 	call	40021d4 <alt_get_errno>
 4002298:	1007883a 	mov	r3,r2
 400229c:	e0bffe17 	ldw	r2,-8(fp)
 40022a0:	0085c83a 	sub	r2,zero,r2
 40022a4:	18800015 	stw	r2,0(r3)
      return -1;
 40022a8:	00bfffc4 	movi	r2,-1
 40022ac:	00000706 	br	40022cc <close+0xbc>
    }
    return 0;
 40022b0:	0005883a 	mov	r2,zero
 40022b4:	00000506 	br	40022cc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40022b8:	40021d40 	call	40021d4 <alt_get_errno>
 40022bc:	1007883a 	mov	r3,r2
 40022c0:	00801444 	movi	r2,81
 40022c4:	18800015 	stw	r2,0(r3)
    return -1;
 40022c8:	00bfffc4 	movi	r2,-1
  }
}
 40022cc:	e037883a 	mov	sp,fp
 40022d0:	dfc00117 	ldw	ra,4(sp)
 40022d4:	df000017 	ldw	fp,0(sp)
 40022d8:	dec00204 	addi	sp,sp,8
 40022dc:	f800283a 	ret

040022e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40022e0:	defffe04 	addi	sp,sp,-8
 40022e4:	df000115 	stw	fp,4(sp)
 40022e8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40022ec:	e03fff15 	stw	zero,-4(fp)
 40022f0:	00000506 	br	4002308 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 40022f4:	e0bfff17 	ldw	r2,-4(fp)
 40022f8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40022fc:	e0bfff17 	ldw	r2,-4(fp)
 4002300:	10800804 	addi	r2,r2,32
 4002304:	e0bfff15 	stw	r2,-4(fp)
 4002308:	e0bfff17 	ldw	r2,-4(fp)
 400230c:	10880030 	cmpltui	r2,r2,8192
 4002310:	103ff81e 	bne	r2,zero,40022f4 <__alt_mem_onchip_memory+0xfbffa2f4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4002314:	0001883a 	nop
 4002318:	e037883a 	mov	sp,fp
 400231c:	df000017 	ldw	fp,0(sp)
 4002320:	dec00104 	addi	sp,sp,4
 4002324:	f800283a 	ret

04002328 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4002328:	defffc04 	addi	sp,sp,-16
 400232c:	df000315 	stw	fp,12(sp)
 4002330:	df000304 	addi	fp,sp,12
 4002334:	e13ffd15 	stw	r4,-12(fp)
 4002338:	e17ffe15 	stw	r5,-8(fp)
 400233c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4002340:	e0bfff17 	ldw	r2,-4(fp)
}
 4002344:	e037883a 	mov	sp,fp
 4002348:	df000017 	ldw	fp,0(sp)
 400234c:	dec00104 	addi	sp,sp,4
 4002350:	f800283a 	ret

04002354 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002354:	defffe04 	addi	sp,sp,-8
 4002358:	dfc00115 	stw	ra,4(sp)
 400235c:	df000015 	stw	fp,0(sp)
 4002360:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4002364:	d0a00717 	ldw	r2,-32740(gp)
 4002368:	10000326 	beq	r2,zero,4002378 <alt_get_errno+0x24>
 400236c:	d0a00717 	ldw	r2,-32740(gp)
 4002370:	103ee83a 	callr	r2
 4002374:	00000106 	br	400237c <alt_get_errno+0x28>
 4002378:	d0a4d004 	addi	r2,gp,-27840
}
 400237c:	e037883a 	mov	sp,fp
 4002380:	dfc00117 	ldw	ra,4(sp)
 4002384:	df000017 	ldw	fp,0(sp)
 4002388:	dec00204 	addi	sp,sp,8
 400238c:	f800283a 	ret

04002390 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4002390:	defffa04 	addi	sp,sp,-24
 4002394:	dfc00515 	stw	ra,20(sp)
 4002398:	df000415 	stw	fp,16(sp)
 400239c:	df000404 	addi	fp,sp,16
 40023a0:	e13ffe15 	stw	r4,-8(fp)
 40023a4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40023a8:	e0bffe17 	ldw	r2,-8(fp)
 40023ac:	10000326 	beq	r2,zero,40023bc <alt_dev_llist_insert+0x2c>
 40023b0:	e0bffe17 	ldw	r2,-8(fp)
 40023b4:	10800217 	ldw	r2,8(r2)
 40023b8:	1000061e 	bne	r2,zero,40023d4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 40023bc:	40023540 	call	4002354 <alt_get_errno>
 40023c0:	1007883a 	mov	r3,r2
 40023c4:	00800584 	movi	r2,22
 40023c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40023cc:	00bffa84 	movi	r2,-22
 40023d0:	00001306 	br	4002420 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40023d4:	e0bffe17 	ldw	r2,-8(fp)
 40023d8:	e0ffff17 	ldw	r3,-4(fp)
 40023dc:	e0fffc15 	stw	r3,-16(fp)
 40023e0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40023e4:	e0bffd17 	ldw	r2,-12(fp)
 40023e8:	e0fffc17 	ldw	r3,-16(fp)
 40023ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40023f0:	e0bffc17 	ldw	r2,-16(fp)
 40023f4:	10c00017 	ldw	r3,0(r2)
 40023f8:	e0bffd17 	ldw	r2,-12(fp)
 40023fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4002400:	e0bffc17 	ldw	r2,-16(fp)
 4002404:	10800017 	ldw	r2,0(r2)
 4002408:	e0fffd17 	ldw	r3,-12(fp)
 400240c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4002410:	e0bffc17 	ldw	r2,-16(fp)
 4002414:	e0fffd17 	ldw	r3,-12(fp)
 4002418:	10c00015 	stw	r3,0(r2)

  return 0;  
 400241c:	0005883a 	mov	r2,zero
}
 4002420:	e037883a 	mov	sp,fp
 4002424:	dfc00117 	ldw	ra,4(sp)
 4002428:	df000017 	ldw	fp,0(sp)
 400242c:	dec00204 	addi	sp,sp,8
 4002430:	f800283a 	ret

04002434 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4002434:	defffd04 	addi	sp,sp,-12
 4002438:	dfc00215 	stw	ra,8(sp)
 400243c:	df000115 	stw	fp,4(sp)
 4002440:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4002444:	00810034 	movhi	r2,1024
 4002448:	108d2504 	addi	r2,r2,13460
 400244c:	e0bfff15 	stw	r2,-4(fp)
 4002450:	00000606 	br	400246c <_do_ctors+0x38>
        (*ctor) (); 
 4002454:	e0bfff17 	ldw	r2,-4(fp)
 4002458:	10800017 	ldw	r2,0(r2)
 400245c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4002460:	e0bfff17 	ldw	r2,-4(fp)
 4002464:	10bfff04 	addi	r2,r2,-4
 4002468:	e0bfff15 	stw	r2,-4(fp)
 400246c:	e0ffff17 	ldw	r3,-4(fp)
 4002470:	00810034 	movhi	r2,1024
 4002474:	108d2604 	addi	r2,r2,13464
 4002478:	18bff62e 	bgeu	r3,r2,4002454 <__alt_mem_onchip_memory+0xfbffa454>
        (*ctor) (); 
}
 400247c:	0001883a 	nop
 4002480:	e037883a 	mov	sp,fp
 4002484:	dfc00117 	ldw	ra,4(sp)
 4002488:	df000017 	ldw	fp,0(sp)
 400248c:	dec00204 	addi	sp,sp,8
 4002490:	f800283a 	ret

04002494 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4002494:	defffd04 	addi	sp,sp,-12
 4002498:	dfc00215 	stw	ra,8(sp)
 400249c:	df000115 	stw	fp,4(sp)
 40024a0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40024a4:	00810034 	movhi	r2,1024
 40024a8:	108d2504 	addi	r2,r2,13460
 40024ac:	e0bfff15 	stw	r2,-4(fp)
 40024b0:	00000606 	br	40024cc <_do_dtors+0x38>
        (*dtor) (); 
 40024b4:	e0bfff17 	ldw	r2,-4(fp)
 40024b8:	10800017 	ldw	r2,0(r2)
 40024bc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40024c0:	e0bfff17 	ldw	r2,-4(fp)
 40024c4:	10bfff04 	addi	r2,r2,-4
 40024c8:	e0bfff15 	stw	r2,-4(fp)
 40024cc:	e0ffff17 	ldw	r3,-4(fp)
 40024d0:	00810034 	movhi	r2,1024
 40024d4:	108d2604 	addi	r2,r2,13464
 40024d8:	18bff62e 	bgeu	r3,r2,40024b4 <__alt_mem_onchip_memory+0xfbffa4b4>
        (*dtor) (); 
}
 40024dc:	0001883a 	nop
 40024e0:	e037883a 	mov	sp,fp
 40024e4:	dfc00117 	ldw	ra,4(sp)
 40024e8:	df000017 	ldw	fp,0(sp)
 40024ec:	dec00204 	addi	sp,sp,8
 40024f0:	f800283a 	ret

040024f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40024f4:	defffe04 	addi	sp,sp,-8
 40024f8:	dfc00115 	stw	ra,4(sp)
 40024fc:	df000015 	stw	fp,0(sp)
 4002500:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4002504:	01440004 	movi	r5,4096
 4002508:	0009883a 	mov	r4,zero
 400250c:	4002fc40 	call	4002fc4 <alt_icache_flush>
#endif
}
 4002510:	0001883a 	nop
 4002514:	e037883a 	mov	sp,fp
 4002518:	dfc00117 	ldw	ra,4(sp)
 400251c:	df000017 	ldw	fp,0(sp)
 4002520:	dec00204 	addi	sp,sp,8
 4002524:	f800283a 	ret

04002528 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4002528:	defff904 	addi	sp,sp,-28
 400252c:	dfc00615 	stw	ra,24(sp)
 4002530:	df000515 	stw	fp,20(sp)
 4002534:	df000504 	addi	fp,sp,20
 4002538:	e13ffc15 	stw	r4,-16(fp)
 400253c:	e17ffd15 	stw	r5,-12(fp)
 4002540:	e1bffe15 	stw	r6,-8(fp)
 4002544:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4002548:	e0800217 	ldw	r2,8(fp)
 400254c:	d8800015 	stw	r2,0(sp)
 4002550:	e1ffff17 	ldw	r7,-4(fp)
 4002554:	e1bffe17 	ldw	r6,-8(fp)
 4002558:	e17ffd17 	ldw	r5,-12(fp)
 400255c:	e13ffc17 	ldw	r4,-16(fp)
 4002560:	40026d80 	call	40026d8 <alt_iic_isr_register>
}  
 4002564:	e037883a 	mov	sp,fp
 4002568:	dfc00117 	ldw	ra,4(sp)
 400256c:	df000017 	ldw	fp,0(sp)
 4002570:	dec00204 	addi	sp,sp,8
 4002574:	f800283a 	ret

04002578 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4002578:	defff904 	addi	sp,sp,-28
 400257c:	df000615 	stw	fp,24(sp)
 4002580:	df000604 	addi	fp,sp,24
 4002584:	e13ffe15 	stw	r4,-8(fp)
 4002588:	e17fff15 	stw	r5,-4(fp)
 400258c:	e0bfff17 	ldw	r2,-4(fp)
 4002590:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002594:	0005303a 	rdctl	r2,status
 4002598:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400259c:	e0fffb17 	ldw	r3,-20(fp)
 40025a0:	00bfff84 	movi	r2,-2
 40025a4:	1884703a 	and	r2,r3,r2
 40025a8:	1001703a 	wrctl	status,r2
  
  return context;
 40025ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40025b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 40025b4:	00c00044 	movi	r3,1
 40025b8:	e0bffa17 	ldw	r2,-24(fp)
 40025bc:	1884983a 	sll	r2,r3,r2
 40025c0:	1007883a 	mov	r3,r2
 40025c4:	d0a4d417 	ldw	r2,-27824(gp)
 40025c8:	1884b03a 	or	r2,r3,r2
 40025cc:	d0a4d415 	stw	r2,-27824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40025d0:	d0a4d417 	ldw	r2,-27824(gp)
 40025d4:	100170fa 	wrctl	ienable,r2
 40025d8:	e0bffc17 	ldw	r2,-16(fp)
 40025dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40025e0:	e0bffd17 	ldw	r2,-12(fp)
 40025e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40025e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 40025ec:	0001883a 	nop
}
 40025f0:	e037883a 	mov	sp,fp
 40025f4:	df000017 	ldw	fp,0(sp)
 40025f8:	dec00104 	addi	sp,sp,4
 40025fc:	f800283a 	ret

04002600 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4002600:	defff904 	addi	sp,sp,-28
 4002604:	df000615 	stw	fp,24(sp)
 4002608:	df000604 	addi	fp,sp,24
 400260c:	e13ffe15 	stw	r4,-8(fp)
 4002610:	e17fff15 	stw	r5,-4(fp)
 4002614:	e0bfff17 	ldw	r2,-4(fp)
 4002618:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400261c:	0005303a 	rdctl	r2,status
 4002620:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002624:	e0fffb17 	ldw	r3,-20(fp)
 4002628:	00bfff84 	movi	r2,-2
 400262c:	1884703a 	and	r2,r3,r2
 4002630:	1001703a 	wrctl	status,r2
  
  return context;
 4002634:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4002638:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 400263c:	00c00044 	movi	r3,1
 4002640:	e0bffa17 	ldw	r2,-24(fp)
 4002644:	1884983a 	sll	r2,r3,r2
 4002648:	0084303a 	nor	r2,zero,r2
 400264c:	1007883a 	mov	r3,r2
 4002650:	d0a4d417 	ldw	r2,-27824(gp)
 4002654:	1884703a 	and	r2,r3,r2
 4002658:	d0a4d415 	stw	r2,-27824(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400265c:	d0a4d417 	ldw	r2,-27824(gp)
 4002660:	100170fa 	wrctl	ienable,r2
 4002664:	e0bffc17 	ldw	r2,-16(fp)
 4002668:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400266c:	e0bffd17 	ldw	r2,-12(fp)
 4002670:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4002674:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4002678:	0001883a 	nop
}
 400267c:	e037883a 	mov	sp,fp
 4002680:	df000017 	ldw	fp,0(sp)
 4002684:	dec00104 	addi	sp,sp,4
 4002688:	f800283a 	ret

0400268c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400268c:	defffc04 	addi	sp,sp,-16
 4002690:	df000315 	stw	fp,12(sp)
 4002694:	df000304 	addi	fp,sp,12
 4002698:	e13ffe15 	stw	r4,-8(fp)
 400269c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 40026a0:	000530fa 	rdctl	r2,ienable
 40026a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 40026a8:	00c00044 	movi	r3,1
 40026ac:	e0bfff17 	ldw	r2,-4(fp)
 40026b0:	1884983a 	sll	r2,r3,r2
 40026b4:	1007883a 	mov	r3,r2
 40026b8:	e0bffd17 	ldw	r2,-12(fp)
 40026bc:	1884703a 	and	r2,r3,r2
 40026c0:	1004c03a 	cmpne	r2,r2,zero
 40026c4:	10803fcc 	andi	r2,r2,255
}
 40026c8:	e037883a 	mov	sp,fp
 40026cc:	df000017 	ldw	fp,0(sp)
 40026d0:	dec00104 	addi	sp,sp,4
 40026d4:	f800283a 	ret

040026d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40026d8:	defff504 	addi	sp,sp,-44
 40026dc:	dfc00a15 	stw	ra,40(sp)
 40026e0:	df000915 	stw	fp,36(sp)
 40026e4:	df000904 	addi	fp,sp,36
 40026e8:	e13ffc15 	stw	r4,-16(fp)
 40026ec:	e17ffd15 	stw	r5,-12(fp)
 40026f0:	e1bffe15 	stw	r6,-8(fp)
 40026f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 40026f8:	00bffa84 	movi	r2,-22
 40026fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4002700:	e0bffd17 	ldw	r2,-12(fp)
 4002704:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4002708:	e0bff817 	ldw	r2,-32(fp)
 400270c:	10800808 	cmpgei	r2,r2,32
 4002710:	1000271e 	bne	r2,zero,40027b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002714:	0005303a 	rdctl	r2,status
 4002718:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400271c:	e0fffb17 	ldw	r3,-20(fp)
 4002720:	00bfff84 	movi	r2,-2
 4002724:	1884703a 	and	r2,r3,r2
 4002728:	1001703a 	wrctl	status,r2
  
  return context;
 400272c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4002730:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4002734:	00810034 	movhi	r2,1024
 4002738:	1096c704 	addi	r2,r2,23324
 400273c:	e0fff817 	ldw	r3,-32(fp)
 4002740:	180690fa 	slli	r3,r3,3
 4002744:	10c5883a 	add	r2,r2,r3
 4002748:	e0fffe17 	ldw	r3,-8(fp)
 400274c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4002750:	00810034 	movhi	r2,1024
 4002754:	1096c704 	addi	r2,r2,23324
 4002758:	e0fff817 	ldw	r3,-32(fp)
 400275c:	180690fa 	slli	r3,r3,3
 4002760:	10c5883a 	add	r2,r2,r3
 4002764:	10800104 	addi	r2,r2,4
 4002768:	e0ffff17 	ldw	r3,-4(fp)
 400276c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4002770:	e0bffe17 	ldw	r2,-8(fp)
 4002774:	10000526 	beq	r2,zero,400278c <alt_iic_isr_register+0xb4>
 4002778:	e0bff817 	ldw	r2,-32(fp)
 400277c:	100b883a 	mov	r5,r2
 4002780:	e13ffc17 	ldw	r4,-16(fp)
 4002784:	40025780 	call	4002578 <alt_ic_irq_enable>
 4002788:	00000406 	br	400279c <alt_iic_isr_register+0xc4>
 400278c:	e0bff817 	ldw	r2,-32(fp)
 4002790:	100b883a 	mov	r5,r2
 4002794:	e13ffc17 	ldw	r4,-16(fp)
 4002798:	40026000 	call	4002600 <alt_ic_irq_disable>
 400279c:	e0bff715 	stw	r2,-36(fp)
 40027a0:	e0bffa17 	ldw	r2,-24(fp)
 40027a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40027a8:	e0bff917 	ldw	r2,-28(fp)
 40027ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40027b0:	e0bff717 	ldw	r2,-36(fp)
}
 40027b4:	e037883a 	mov	sp,fp
 40027b8:	dfc00117 	ldw	ra,4(sp)
 40027bc:	df000017 	ldw	fp,0(sp)
 40027c0:	dec00204 	addi	sp,sp,8
 40027c4:	f800283a 	ret

040027c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40027c8:	defff904 	addi	sp,sp,-28
 40027cc:	dfc00615 	stw	ra,24(sp)
 40027d0:	df000515 	stw	fp,20(sp)
 40027d4:	df000504 	addi	fp,sp,20
 40027d8:	e13ffc15 	stw	r4,-16(fp)
 40027dc:	e17ffd15 	stw	r5,-12(fp)
 40027e0:	e1bffe15 	stw	r6,-8(fp)
 40027e4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 40027e8:	e1bfff17 	ldw	r6,-4(fp)
 40027ec:	e17ffe17 	ldw	r5,-8(fp)
 40027f0:	e13ffd17 	ldw	r4,-12(fp)
 40027f4:	4002a080 	call	4002a08 <open>
 40027f8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 40027fc:	e0bffb17 	ldw	r2,-20(fp)
 4002800:	10001c16 	blt	r2,zero,4002874 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4002804:	00810034 	movhi	r2,1024
 4002808:	10918f04 	addi	r2,r2,17980
 400280c:	e0fffb17 	ldw	r3,-20(fp)
 4002810:	18c00324 	muli	r3,r3,12
 4002814:	10c5883a 	add	r2,r2,r3
 4002818:	10c00017 	ldw	r3,0(r2)
 400281c:	e0bffc17 	ldw	r2,-16(fp)
 4002820:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4002824:	00810034 	movhi	r2,1024
 4002828:	10918f04 	addi	r2,r2,17980
 400282c:	e0fffb17 	ldw	r3,-20(fp)
 4002830:	18c00324 	muli	r3,r3,12
 4002834:	10c5883a 	add	r2,r2,r3
 4002838:	10800104 	addi	r2,r2,4
 400283c:	10c00017 	ldw	r3,0(r2)
 4002840:	e0bffc17 	ldw	r2,-16(fp)
 4002844:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4002848:	00810034 	movhi	r2,1024
 400284c:	10918f04 	addi	r2,r2,17980
 4002850:	e0fffb17 	ldw	r3,-20(fp)
 4002854:	18c00324 	muli	r3,r3,12
 4002858:	10c5883a 	add	r2,r2,r3
 400285c:	10800204 	addi	r2,r2,8
 4002860:	10c00017 	ldw	r3,0(r2)
 4002864:	e0bffc17 	ldw	r2,-16(fp)
 4002868:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400286c:	e13ffb17 	ldw	r4,-20(fp)
 4002870:	4002b5c0 	call	4002b5c <alt_release_fd>
  }
} 
 4002874:	0001883a 	nop
 4002878:	e037883a 	mov	sp,fp
 400287c:	dfc00117 	ldw	ra,4(sp)
 4002880:	df000017 	ldw	fp,0(sp)
 4002884:	dec00204 	addi	sp,sp,8
 4002888:	f800283a 	ret

0400288c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400288c:	defffb04 	addi	sp,sp,-20
 4002890:	dfc00415 	stw	ra,16(sp)
 4002894:	df000315 	stw	fp,12(sp)
 4002898:	df000304 	addi	fp,sp,12
 400289c:	e13ffd15 	stw	r4,-12(fp)
 40028a0:	e17ffe15 	stw	r5,-8(fp)
 40028a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40028a8:	01c07fc4 	movi	r7,511
 40028ac:	01800044 	movi	r6,1
 40028b0:	e17ffd17 	ldw	r5,-12(fp)
 40028b4:	01010034 	movhi	r4,1024
 40028b8:	21119204 	addi	r4,r4,17992
 40028bc:	40027c80 	call	40027c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40028c0:	01c07fc4 	movi	r7,511
 40028c4:	000d883a 	mov	r6,zero
 40028c8:	e17ffe17 	ldw	r5,-8(fp)
 40028cc:	01010034 	movhi	r4,1024
 40028d0:	21118f04 	addi	r4,r4,17980
 40028d4:	40027c80 	call	40027c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40028d8:	01c07fc4 	movi	r7,511
 40028dc:	01800044 	movi	r6,1
 40028e0:	e17fff17 	ldw	r5,-4(fp)
 40028e4:	01010034 	movhi	r4,1024
 40028e8:	21119504 	addi	r4,r4,18004
 40028ec:	40027c80 	call	40027c8 <alt_open_fd>
}  
 40028f0:	0001883a 	nop
 40028f4:	e037883a 	mov	sp,fp
 40028f8:	dfc00117 	ldw	ra,4(sp)
 40028fc:	df000017 	ldw	fp,0(sp)
 4002900:	dec00204 	addi	sp,sp,8
 4002904:	f800283a 	ret

04002908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002908:	defffe04 	addi	sp,sp,-8
 400290c:	dfc00115 	stw	ra,4(sp)
 4002910:	df000015 	stw	fp,0(sp)
 4002914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4002918:	d0a00717 	ldw	r2,-32740(gp)
 400291c:	10000326 	beq	r2,zero,400292c <alt_get_errno+0x24>
 4002920:	d0a00717 	ldw	r2,-32740(gp)
 4002924:	103ee83a 	callr	r2
 4002928:	00000106 	br	4002930 <alt_get_errno+0x28>
 400292c:	d0a4d004 	addi	r2,gp,-27840
}
 4002930:	e037883a 	mov	sp,fp
 4002934:	dfc00117 	ldw	ra,4(sp)
 4002938:	df000017 	ldw	fp,0(sp)
 400293c:	dec00204 	addi	sp,sp,8
 4002940:	f800283a 	ret

04002944 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4002944:	defffd04 	addi	sp,sp,-12
 4002948:	df000215 	stw	fp,8(sp)
 400294c:	df000204 	addi	fp,sp,8
 4002950:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4002954:	e0bfff17 	ldw	r2,-4(fp)
 4002958:	10800217 	ldw	r2,8(r2)
 400295c:	10d00034 	orhi	r3,r2,16384
 4002960:	e0bfff17 	ldw	r2,-4(fp)
 4002964:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4002968:	e03ffe15 	stw	zero,-8(fp)
 400296c:	00001d06 	br	40029e4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4002970:	00810034 	movhi	r2,1024
 4002974:	10918f04 	addi	r2,r2,17980
 4002978:	e0fffe17 	ldw	r3,-8(fp)
 400297c:	18c00324 	muli	r3,r3,12
 4002980:	10c5883a 	add	r2,r2,r3
 4002984:	10c00017 	ldw	r3,0(r2)
 4002988:	e0bfff17 	ldw	r2,-4(fp)
 400298c:	10800017 	ldw	r2,0(r2)
 4002990:	1880111e 	bne	r3,r2,40029d8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4002994:	00810034 	movhi	r2,1024
 4002998:	10918f04 	addi	r2,r2,17980
 400299c:	e0fffe17 	ldw	r3,-8(fp)
 40029a0:	18c00324 	muli	r3,r3,12
 40029a4:	10c5883a 	add	r2,r2,r3
 40029a8:	10800204 	addi	r2,r2,8
 40029ac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40029b0:	1000090e 	bge	r2,zero,40029d8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 40029b4:	e0bffe17 	ldw	r2,-8(fp)
 40029b8:	10c00324 	muli	r3,r2,12
 40029bc:	00810034 	movhi	r2,1024
 40029c0:	10918f04 	addi	r2,r2,17980
 40029c4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40029c8:	e0bfff17 	ldw	r2,-4(fp)
 40029cc:	18800226 	beq	r3,r2,40029d8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40029d0:	00bffcc4 	movi	r2,-13
 40029d4:	00000806 	br	40029f8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40029d8:	e0bffe17 	ldw	r2,-8(fp)
 40029dc:	10800044 	addi	r2,r2,1
 40029e0:	e0bffe15 	stw	r2,-8(fp)
 40029e4:	d0a00617 	ldw	r2,-32744(gp)
 40029e8:	1007883a 	mov	r3,r2
 40029ec:	e0bffe17 	ldw	r2,-8(fp)
 40029f0:	18bfdf2e 	bgeu	r3,r2,4002970 <__alt_mem_onchip_memory+0xfbffa970>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40029f4:	0005883a 	mov	r2,zero
}
 40029f8:	e037883a 	mov	sp,fp
 40029fc:	df000017 	ldw	fp,0(sp)
 4002a00:	dec00104 	addi	sp,sp,4
 4002a04:	f800283a 	ret

04002a08 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4002a08:	defff604 	addi	sp,sp,-40
 4002a0c:	dfc00915 	stw	ra,36(sp)
 4002a10:	df000815 	stw	fp,32(sp)
 4002a14:	df000804 	addi	fp,sp,32
 4002a18:	e13ffd15 	stw	r4,-12(fp)
 4002a1c:	e17ffe15 	stw	r5,-8(fp)
 4002a20:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4002a24:	00bfffc4 	movi	r2,-1
 4002a28:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4002a2c:	00bffb44 	movi	r2,-19
 4002a30:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4002a34:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4002a38:	d1600404 	addi	r5,gp,-32752
 4002a3c:	e13ffd17 	ldw	r4,-12(fp)
 4002a40:	4002d880 	call	4002d88 <alt_find_dev>
 4002a44:	e0bff815 	stw	r2,-32(fp)
 4002a48:	e0bff817 	ldw	r2,-32(fp)
 4002a4c:	1000051e 	bne	r2,zero,4002a64 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4002a50:	e13ffd17 	ldw	r4,-12(fp)
 4002a54:	4002e180 	call	4002e18 <alt_find_file>
 4002a58:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4002a5c:	00800044 	movi	r2,1
 4002a60:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4002a64:	e0bff817 	ldw	r2,-32(fp)
 4002a68:	10002926 	beq	r2,zero,4002b10 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4002a6c:	e13ff817 	ldw	r4,-32(fp)
 4002a70:	4002f200 	call	4002f20 <alt_get_fd>
 4002a74:	e0bff915 	stw	r2,-28(fp)
 4002a78:	e0bff917 	ldw	r2,-28(fp)
 4002a7c:	1000030e 	bge	r2,zero,4002a8c <open+0x84>
    {
      status = index;
 4002a80:	e0bff917 	ldw	r2,-28(fp)
 4002a84:	e0bffa15 	stw	r2,-24(fp)
 4002a88:	00002306 	br	4002b18 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 4002a8c:	e0bff917 	ldw	r2,-28(fp)
 4002a90:	10c00324 	muli	r3,r2,12
 4002a94:	00810034 	movhi	r2,1024
 4002a98:	10918f04 	addi	r2,r2,17980
 4002a9c:	1885883a 	add	r2,r3,r2
 4002aa0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4002aa4:	e0fffe17 	ldw	r3,-8(fp)
 4002aa8:	00900034 	movhi	r2,16384
 4002aac:	10bfffc4 	addi	r2,r2,-1
 4002ab0:	1886703a 	and	r3,r3,r2
 4002ab4:	e0bffc17 	ldw	r2,-16(fp)
 4002ab8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4002abc:	e0bffb17 	ldw	r2,-20(fp)
 4002ac0:	1000051e 	bne	r2,zero,4002ad8 <open+0xd0>
 4002ac4:	e13ffc17 	ldw	r4,-16(fp)
 4002ac8:	40029440 	call	4002944 <alt_file_locked>
 4002acc:	e0bffa15 	stw	r2,-24(fp)
 4002ad0:	e0bffa17 	ldw	r2,-24(fp)
 4002ad4:	10001016 	blt	r2,zero,4002b18 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4002ad8:	e0bff817 	ldw	r2,-32(fp)
 4002adc:	10800317 	ldw	r2,12(r2)
 4002ae0:	10000826 	beq	r2,zero,4002b04 <open+0xfc>
 4002ae4:	e0bff817 	ldw	r2,-32(fp)
 4002ae8:	10800317 	ldw	r2,12(r2)
 4002aec:	e1ffff17 	ldw	r7,-4(fp)
 4002af0:	e1bffe17 	ldw	r6,-8(fp)
 4002af4:	e17ffd17 	ldw	r5,-12(fp)
 4002af8:	e13ffc17 	ldw	r4,-16(fp)
 4002afc:	103ee83a 	callr	r2
 4002b00:	00000106 	br	4002b08 <open+0x100>
 4002b04:	0005883a 	mov	r2,zero
 4002b08:	e0bffa15 	stw	r2,-24(fp)
 4002b0c:	00000206 	br	4002b18 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4002b10:	00bffb44 	movi	r2,-19
 4002b14:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4002b18:	e0bffa17 	ldw	r2,-24(fp)
 4002b1c:	1000090e 	bge	r2,zero,4002b44 <open+0x13c>
  {
    alt_release_fd (index);  
 4002b20:	e13ff917 	ldw	r4,-28(fp)
 4002b24:	4002b5c0 	call	4002b5c <alt_release_fd>
    ALT_ERRNO = -status;
 4002b28:	40029080 	call	4002908 <alt_get_errno>
 4002b2c:	1007883a 	mov	r3,r2
 4002b30:	e0bffa17 	ldw	r2,-24(fp)
 4002b34:	0085c83a 	sub	r2,zero,r2
 4002b38:	18800015 	stw	r2,0(r3)
    return -1;
 4002b3c:	00bfffc4 	movi	r2,-1
 4002b40:	00000106 	br	4002b48 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4002b44:	e0bff917 	ldw	r2,-28(fp)
}
 4002b48:	e037883a 	mov	sp,fp
 4002b4c:	dfc00117 	ldw	ra,4(sp)
 4002b50:	df000017 	ldw	fp,0(sp)
 4002b54:	dec00204 	addi	sp,sp,8
 4002b58:	f800283a 	ret

04002b5c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4002b5c:	defffe04 	addi	sp,sp,-8
 4002b60:	df000115 	stw	fp,4(sp)
 4002b64:	df000104 	addi	fp,sp,4
 4002b68:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4002b6c:	e0bfff17 	ldw	r2,-4(fp)
 4002b70:	108000d0 	cmplti	r2,r2,3
 4002b74:	10000d1e 	bne	r2,zero,4002bac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4002b78:	00810034 	movhi	r2,1024
 4002b7c:	10918f04 	addi	r2,r2,17980
 4002b80:	e0ffff17 	ldw	r3,-4(fp)
 4002b84:	18c00324 	muli	r3,r3,12
 4002b88:	10c5883a 	add	r2,r2,r3
 4002b8c:	10800204 	addi	r2,r2,8
 4002b90:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4002b94:	00810034 	movhi	r2,1024
 4002b98:	10918f04 	addi	r2,r2,17980
 4002b9c:	e0ffff17 	ldw	r3,-4(fp)
 4002ba0:	18c00324 	muli	r3,r3,12
 4002ba4:	10c5883a 	add	r2,r2,r3
 4002ba8:	10000015 	stw	zero,0(r2)
  }
}
 4002bac:	0001883a 	nop
 4002bb0:	e037883a 	mov	sp,fp
 4002bb4:	df000017 	ldw	fp,0(sp)
 4002bb8:	dec00104 	addi	sp,sp,4
 4002bbc:	f800283a 	ret

04002bc0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4002bc0:	defffa04 	addi	sp,sp,-24
 4002bc4:	df000515 	stw	fp,20(sp)
 4002bc8:	df000504 	addi	fp,sp,20
 4002bcc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002bd0:	0005303a 	rdctl	r2,status
 4002bd4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002bd8:	e0fffc17 	ldw	r3,-16(fp)
 4002bdc:	00bfff84 	movi	r2,-2
 4002be0:	1884703a 	and	r2,r3,r2
 4002be4:	1001703a 	wrctl	status,r2
  
  return context;
 4002be8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4002bec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4002bf0:	e0bfff17 	ldw	r2,-4(fp)
 4002bf4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4002bf8:	e0bffd17 	ldw	r2,-12(fp)
 4002bfc:	10800017 	ldw	r2,0(r2)
 4002c00:	e0fffd17 	ldw	r3,-12(fp)
 4002c04:	18c00117 	ldw	r3,4(r3)
 4002c08:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4002c0c:	e0bffd17 	ldw	r2,-12(fp)
 4002c10:	10800117 	ldw	r2,4(r2)
 4002c14:	e0fffd17 	ldw	r3,-12(fp)
 4002c18:	18c00017 	ldw	r3,0(r3)
 4002c1c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4002c20:	e0bffd17 	ldw	r2,-12(fp)
 4002c24:	e0fffd17 	ldw	r3,-12(fp)
 4002c28:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4002c2c:	e0bffd17 	ldw	r2,-12(fp)
 4002c30:	e0fffd17 	ldw	r3,-12(fp)
 4002c34:	10c00015 	stw	r3,0(r2)
 4002c38:	e0bffb17 	ldw	r2,-20(fp)
 4002c3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4002c40:	e0bffe17 	ldw	r2,-8(fp)
 4002c44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4002c48:	0001883a 	nop
 4002c4c:	e037883a 	mov	sp,fp
 4002c50:	df000017 	ldw	fp,0(sp)
 4002c54:	dec00104 	addi	sp,sp,4
 4002c58:	f800283a 	ret

04002c5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4002c5c:	defffb04 	addi	sp,sp,-20
 4002c60:	dfc00415 	stw	ra,16(sp)
 4002c64:	df000315 	stw	fp,12(sp)
 4002c68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4002c6c:	d0a00917 	ldw	r2,-32732(gp)
 4002c70:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4002c74:	d0a4d617 	ldw	r2,-27816(gp)
 4002c78:	10800044 	addi	r2,r2,1
 4002c7c:	d0a4d615 	stw	r2,-27816(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4002c80:	00002e06 	br	4002d3c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4002c84:	e0bffd17 	ldw	r2,-12(fp)
 4002c88:	10800017 	ldw	r2,0(r2)
 4002c8c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4002c90:	e0bffd17 	ldw	r2,-12(fp)
 4002c94:	10800403 	ldbu	r2,16(r2)
 4002c98:	10803fcc 	andi	r2,r2,255
 4002c9c:	10000426 	beq	r2,zero,4002cb0 <alt_tick+0x54>
 4002ca0:	d0a4d617 	ldw	r2,-27816(gp)
 4002ca4:	1000021e 	bne	r2,zero,4002cb0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4002ca8:	e0bffd17 	ldw	r2,-12(fp)
 4002cac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4002cb0:	e0bffd17 	ldw	r2,-12(fp)
 4002cb4:	10800217 	ldw	r2,8(r2)
 4002cb8:	d0e4d617 	ldw	r3,-27816(gp)
 4002cbc:	18801d36 	bltu	r3,r2,4002d34 <alt_tick+0xd8>
 4002cc0:	e0bffd17 	ldw	r2,-12(fp)
 4002cc4:	10800403 	ldbu	r2,16(r2)
 4002cc8:	10803fcc 	andi	r2,r2,255
 4002ccc:	1000191e 	bne	r2,zero,4002d34 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4002cd0:	e0bffd17 	ldw	r2,-12(fp)
 4002cd4:	10800317 	ldw	r2,12(r2)
 4002cd8:	e0fffd17 	ldw	r3,-12(fp)
 4002cdc:	18c00517 	ldw	r3,20(r3)
 4002ce0:	1809883a 	mov	r4,r3
 4002ce4:	103ee83a 	callr	r2
 4002ce8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4002cec:	e0bfff17 	ldw	r2,-4(fp)
 4002cf0:	1000031e 	bne	r2,zero,4002d00 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4002cf4:	e13ffd17 	ldw	r4,-12(fp)
 4002cf8:	4002bc00 	call	4002bc0 <alt_alarm_stop>
 4002cfc:	00000d06 	br	4002d34 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4002d00:	e0bffd17 	ldw	r2,-12(fp)
 4002d04:	10c00217 	ldw	r3,8(r2)
 4002d08:	e0bfff17 	ldw	r2,-4(fp)
 4002d0c:	1887883a 	add	r3,r3,r2
 4002d10:	e0bffd17 	ldw	r2,-12(fp)
 4002d14:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4002d18:	e0bffd17 	ldw	r2,-12(fp)
 4002d1c:	10c00217 	ldw	r3,8(r2)
 4002d20:	d0a4d617 	ldw	r2,-27816(gp)
 4002d24:	1880032e 	bgeu	r3,r2,4002d34 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4002d28:	e0bffd17 	ldw	r2,-12(fp)
 4002d2c:	00c00044 	movi	r3,1
 4002d30:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4002d34:	e0bffe17 	ldw	r2,-8(fp)
 4002d38:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4002d3c:	e0fffd17 	ldw	r3,-12(fp)
 4002d40:	d0a00904 	addi	r2,gp,-32732
 4002d44:	18bfcf1e 	bne	r3,r2,4002c84 <__alt_mem_onchip_memory+0xfbffac84>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4002d48:	0001883a 	nop
}
 4002d4c:	0001883a 	nop
 4002d50:	e037883a 	mov	sp,fp
 4002d54:	dfc00117 	ldw	ra,4(sp)
 4002d58:	df000017 	ldw	fp,0(sp)
 4002d5c:	dec00204 	addi	sp,sp,8
 4002d60:	f800283a 	ret

04002d64 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4002d64:	deffff04 	addi	sp,sp,-4
 4002d68:	df000015 	stw	fp,0(sp)
 4002d6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4002d70:	000170fa 	wrctl	ienable,zero
}
 4002d74:	0001883a 	nop
 4002d78:	e037883a 	mov	sp,fp
 4002d7c:	df000017 	ldw	fp,0(sp)
 4002d80:	dec00104 	addi	sp,sp,4
 4002d84:	f800283a 	ret

04002d88 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4002d88:	defffa04 	addi	sp,sp,-24
 4002d8c:	dfc00515 	stw	ra,20(sp)
 4002d90:	df000415 	stw	fp,16(sp)
 4002d94:	df000404 	addi	fp,sp,16
 4002d98:	e13ffe15 	stw	r4,-8(fp)
 4002d9c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4002da0:	e0bfff17 	ldw	r2,-4(fp)
 4002da4:	10800017 	ldw	r2,0(r2)
 4002da8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4002dac:	e13ffe17 	ldw	r4,-8(fp)
 4002db0:	4000e340 	call	4000e34 <strlen>
 4002db4:	10800044 	addi	r2,r2,1
 4002db8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4002dbc:	00000d06 	br	4002df4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4002dc0:	e0bffc17 	ldw	r2,-16(fp)
 4002dc4:	10800217 	ldw	r2,8(r2)
 4002dc8:	e0fffd17 	ldw	r3,-12(fp)
 4002dcc:	180d883a 	mov	r6,r3
 4002dd0:	e17ffe17 	ldw	r5,-8(fp)
 4002dd4:	1009883a 	mov	r4,r2
 4002dd8:	40031240 	call	4003124 <memcmp>
 4002ddc:	1000021e 	bne	r2,zero,4002de8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4002de0:	e0bffc17 	ldw	r2,-16(fp)
 4002de4:	00000706 	br	4002e04 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4002de8:	e0bffc17 	ldw	r2,-16(fp)
 4002dec:	10800017 	ldw	r2,0(r2)
 4002df0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4002df4:	e0fffc17 	ldw	r3,-16(fp)
 4002df8:	e0bfff17 	ldw	r2,-4(fp)
 4002dfc:	18bff01e 	bne	r3,r2,4002dc0 <__alt_mem_onchip_memory+0xfbffadc0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4002e00:	0005883a 	mov	r2,zero
}
 4002e04:	e037883a 	mov	sp,fp
 4002e08:	dfc00117 	ldw	ra,4(sp)
 4002e0c:	df000017 	ldw	fp,0(sp)
 4002e10:	dec00204 	addi	sp,sp,8
 4002e14:	f800283a 	ret

04002e18 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4002e18:	defffb04 	addi	sp,sp,-20
 4002e1c:	dfc00415 	stw	ra,16(sp)
 4002e20:	df000315 	stw	fp,12(sp)
 4002e24:	df000304 	addi	fp,sp,12
 4002e28:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4002e2c:	d0a00217 	ldw	r2,-32760(gp)
 4002e30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4002e34:	00003106 	br	4002efc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4002e38:	e0bffd17 	ldw	r2,-12(fp)
 4002e3c:	10800217 	ldw	r2,8(r2)
 4002e40:	1009883a 	mov	r4,r2
 4002e44:	4000e340 	call	4000e34 <strlen>
 4002e48:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4002e4c:	e0bffd17 	ldw	r2,-12(fp)
 4002e50:	10c00217 	ldw	r3,8(r2)
 4002e54:	e0bffe17 	ldw	r2,-8(fp)
 4002e58:	10bfffc4 	addi	r2,r2,-1
 4002e5c:	1885883a 	add	r2,r3,r2
 4002e60:	10800003 	ldbu	r2,0(r2)
 4002e64:	10803fcc 	andi	r2,r2,255
 4002e68:	1080201c 	xori	r2,r2,128
 4002e6c:	10bfe004 	addi	r2,r2,-128
 4002e70:	10800bd8 	cmpnei	r2,r2,47
 4002e74:	1000031e 	bne	r2,zero,4002e84 <alt_find_file+0x6c>
    {
      len -= 1;
 4002e78:	e0bffe17 	ldw	r2,-8(fp)
 4002e7c:	10bfffc4 	addi	r2,r2,-1
 4002e80:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4002e84:	e0bffe17 	ldw	r2,-8(fp)
 4002e88:	e0ffff17 	ldw	r3,-4(fp)
 4002e8c:	1885883a 	add	r2,r3,r2
 4002e90:	10800003 	ldbu	r2,0(r2)
 4002e94:	10803fcc 	andi	r2,r2,255
 4002e98:	1080201c 	xori	r2,r2,128
 4002e9c:	10bfe004 	addi	r2,r2,-128
 4002ea0:	10800be0 	cmpeqi	r2,r2,47
 4002ea4:	1000081e 	bne	r2,zero,4002ec8 <alt_find_file+0xb0>
 4002ea8:	e0bffe17 	ldw	r2,-8(fp)
 4002eac:	e0ffff17 	ldw	r3,-4(fp)
 4002eb0:	1885883a 	add	r2,r3,r2
 4002eb4:	10800003 	ldbu	r2,0(r2)
 4002eb8:	10803fcc 	andi	r2,r2,255
 4002ebc:	1080201c 	xori	r2,r2,128
 4002ec0:	10bfe004 	addi	r2,r2,-128
 4002ec4:	10000a1e 	bne	r2,zero,4002ef0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4002ec8:	e0bffd17 	ldw	r2,-12(fp)
 4002ecc:	10800217 	ldw	r2,8(r2)
 4002ed0:	e0fffe17 	ldw	r3,-8(fp)
 4002ed4:	180d883a 	mov	r6,r3
 4002ed8:	e17fff17 	ldw	r5,-4(fp)
 4002edc:	1009883a 	mov	r4,r2
 4002ee0:	40031240 	call	4003124 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4002ee4:	1000021e 	bne	r2,zero,4002ef0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4002ee8:	e0bffd17 	ldw	r2,-12(fp)
 4002eec:	00000706 	br	4002f0c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4002ef0:	e0bffd17 	ldw	r2,-12(fp)
 4002ef4:	10800017 	ldw	r2,0(r2)
 4002ef8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4002efc:	e0fffd17 	ldw	r3,-12(fp)
 4002f00:	d0a00204 	addi	r2,gp,-32760
 4002f04:	18bfcc1e 	bne	r3,r2,4002e38 <__alt_mem_onchip_memory+0xfbffae38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4002f08:	0005883a 	mov	r2,zero
}
 4002f0c:	e037883a 	mov	sp,fp
 4002f10:	dfc00117 	ldw	ra,4(sp)
 4002f14:	df000017 	ldw	fp,0(sp)
 4002f18:	dec00204 	addi	sp,sp,8
 4002f1c:	f800283a 	ret

04002f20 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4002f20:	defffc04 	addi	sp,sp,-16
 4002f24:	df000315 	stw	fp,12(sp)
 4002f28:	df000304 	addi	fp,sp,12
 4002f2c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4002f30:	00bffa04 	movi	r2,-24
 4002f34:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4002f38:	e03ffd15 	stw	zero,-12(fp)
 4002f3c:	00001906 	br	4002fa4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 4002f40:	00810034 	movhi	r2,1024
 4002f44:	10918f04 	addi	r2,r2,17980
 4002f48:	e0fffd17 	ldw	r3,-12(fp)
 4002f4c:	18c00324 	muli	r3,r3,12
 4002f50:	10c5883a 	add	r2,r2,r3
 4002f54:	10800017 	ldw	r2,0(r2)
 4002f58:	10000f1e 	bne	r2,zero,4002f98 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 4002f5c:	00810034 	movhi	r2,1024
 4002f60:	10918f04 	addi	r2,r2,17980
 4002f64:	e0fffd17 	ldw	r3,-12(fp)
 4002f68:	18c00324 	muli	r3,r3,12
 4002f6c:	10c5883a 	add	r2,r2,r3
 4002f70:	e0ffff17 	ldw	r3,-4(fp)
 4002f74:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4002f78:	d0e00617 	ldw	r3,-32744(gp)
 4002f7c:	e0bffd17 	ldw	r2,-12(fp)
 4002f80:	1880020e 	bge	r3,r2,4002f8c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 4002f84:	e0bffd17 	ldw	r2,-12(fp)
 4002f88:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
 4002f8c:	e0bffd17 	ldw	r2,-12(fp)
 4002f90:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4002f94:	00000606 	br	4002fb0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4002f98:	e0bffd17 	ldw	r2,-12(fp)
 4002f9c:	10800044 	addi	r2,r2,1
 4002fa0:	e0bffd15 	stw	r2,-12(fp)
 4002fa4:	e0bffd17 	ldw	r2,-12(fp)
 4002fa8:	10800810 	cmplti	r2,r2,32
 4002fac:	103fe41e 	bne	r2,zero,4002f40 <__alt_mem_onchip_memory+0xfbffaf40>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4002fb0:	e0bffe17 	ldw	r2,-8(fp)
}
 4002fb4:	e037883a 	mov	sp,fp
 4002fb8:	df000017 	ldw	fp,0(sp)
 4002fbc:	dec00104 	addi	sp,sp,4
 4002fc0:	f800283a 	ret

04002fc4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4002fc4:	defffb04 	addi	sp,sp,-20
 4002fc8:	df000415 	stw	fp,16(sp)
 4002fcc:	df000404 	addi	fp,sp,16
 4002fd0:	e13ffe15 	stw	r4,-8(fp)
 4002fd4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4002fd8:	e0bfff17 	ldw	r2,-4(fp)
 4002fdc:	10840070 	cmpltui	r2,r2,4097
 4002fe0:	1000021e 	bne	r2,zero,4002fec <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4002fe4:	00840004 	movi	r2,4096
 4002fe8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4002fec:	e0fffe17 	ldw	r3,-8(fp)
 4002ff0:	e0bfff17 	ldw	r2,-4(fp)
 4002ff4:	1885883a 	add	r2,r3,r2
 4002ff8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4002ffc:	e0bffe17 	ldw	r2,-8(fp)
 4003000:	e0bffc15 	stw	r2,-16(fp)
 4003004:	00000506 	br	400301c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4003008:	e0bffc17 	ldw	r2,-16(fp)
 400300c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4003010:	e0bffc17 	ldw	r2,-16(fp)
 4003014:	10800804 	addi	r2,r2,32
 4003018:	e0bffc15 	stw	r2,-16(fp)
 400301c:	e0fffc17 	ldw	r3,-16(fp)
 4003020:	e0bffd17 	ldw	r2,-12(fp)
 4003024:	18bff836 	bltu	r3,r2,4003008 <__alt_mem_onchip_memory+0xfbffb008>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4003028:	e0bffe17 	ldw	r2,-8(fp)
 400302c:	108007cc 	andi	r2,r2,31
 4003030:	10000226 	beq	r2,zero,400303c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4003034:	e0bffc17 	ldw	r2,-16(fp)
 4003038:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 400303c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4003040:	0001883a 	nop
 4003044:	e037883a 	mov	sp,fp
 4003048:	df000017 	ldw	fp,0(sp)
 400304c:	dec00104 	addi	sp,sp,4
 4003050:	f800283a 	ret

04003054 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4003054:	defffe04 	addi	sp,sp,-8
 4003058:	df000115 	stw	fp,4(sp)
 400305c:	df000104 	addi	fp,sp,4
 4003060:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4003064:	e0bfff17 	ldw	r2,-4(fp)
 4003068:	10bffe84 	addi	r2,r2,-6
 400306c:	10c00428 	cmpgeui	r3,r2,16
 4003070:	18001a1e 	bne	r3,zero,40030dc <alt_exception_cause_generated_bad_addr+0x88>
 4003074:	100690ba 	slli	r3,r2,2
 4003078:	00810034 	movhi	r2,1024
 400307c:	108c2304 	addi	r2,r2,12428
 4003080:	1885883a 	add	r2,r3,r2
 4003084:	10800017 	ldw	r2,0(r2)
 4003088:	1000683a 	jmp	r2
 400308c:	040030cc 	andi	r16,zero,195
 4003090:	040030cc 	andi	r16,zero,195
 4003094:	040030dc 	xori	r16,zero,195
 4003098:	040030dc 	xori	r16,zero,195
 400309c:	040030dc 	xori	r16,zero,195
 40030a0:	040030cc 	andi	r16,zero,195
 40030a4:	040030d4 	movui	r16,195
 40030a8:	040030dc 	xori	r16,zero,195
 40030ac:	040030cc 	andi	r16,zero,195
 40030b0:	040030cc 	andi	r16,zero,195
 40030b4:	040030dc 	xori	r16,zero,195
 40030b8:	040030cc 	andi	r16,zero,195
 40030bc:	040030d4 	movui	r16,195
 40030c0:	040030dc 	xori	r16,zero,195
 40030c4:	040030dc 	xori	r16,zero,195
 40030c8:	040030cc 	andi	r16,zero,195
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 40030cc:	00800044 	movi	r2,1
 40030d0:	00000306 	br	40030e0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 40030d4:	0005883a 	mov	r2,zero
 40030d8:	00000106 	br	40030e0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 40030dc:	0005883a 	mov	r2,zero
  }
}
 40030e0:	e037883a 	mov	sp,fp
 40030e4:	df000017 	ldw	fp,0(sp)
 40030e8:	dec00104 	addi	sp,sp,4
 40030ec:	f800283a 	ret

040030f0 <atexit>:
 40030f0:	200b883a 	mov	r5,r4
 40030f4:	000f883a 	mov	r7,zero
 40030f8:	000d883a 	mov	r6,zero
 40030fc:	0009883a 	mov	r4,zero
 4003100:	400317c1 	jmpi	400317c <__register_exitproc>

04003104 <exit>:
 4003104:	defffe04 	addi	sp,sp,-8
 4003108:	000b883a 	mov	r5,zero
 400310c:	dc000015 	stw	r16,0(sp)
 4003110:	dfc00115 	stw	ra,4(sp)
 4003114:	2021883a 	mov	r16,r4
 4003118:	40032d40 	call	40032d4 <__call_exitprocs>
 400311c:	8009883a 	mov	r4,r16
 4003120:	40034640 	call	4003464 <_exit>

04003124 <memcmp>:
 4003124:	218d883a 	add	r6,r4,r6
 4003128:	21800826 	beq	r4,r6,400314c <memcmp+0x28>
 400312c:	20800003 	ldbu	r2,0(r4)
 4003130:	28c00003 	ldbu	r3,0(r5)
 4003134:	10c00226 	beq	r2,r3,4003140 <memcmp+0x1c>
 4003138:	10c5c83a 	sub	r2,r2,r3
 400313c:	f800283a 	ret
 4003140:	21000044 	addi	r4,r4,1
 4003144:	29400044 	addi	r5,r5,1
 4003148:	003ff706 	br	4003128 <__alt_mem_onchip_memory+0xfbffb128>
 400314c:	0005883a 	mov	r2,zero
 4003150:	f800283a 	ret

04003154 <memcpy>:
 4003154:	2005883a 	mov	r2,r4
 4003158:	2007883a 	mov	r3,r4
 400315c:	218d883a 	add	r6,r4,r6
 4003160:	19800526 	beq	r3,r6,4003178 <memcpy+0x24>
 4003164:	29000003 	ldbu	r4,0(r5)
 4003168:	18c00044 	addi	r3,r3,1
 400316c:	29400044 	addi	r5,r5,1
 4003170:	193fffc5 	stb	r4,-1(r3)
 4003174:	003ffa06 	br	4003160 <__alt_mem_onchip_memory+0xfbffb160>
 4003178:	f800283a 	ret

0400317c <__register_exitproc>:
 400317c:	00810034 	movhi	r2,1024
 4003180:	1091ef04 	addi	r2,r2,18364
 4003184:	10c00017 	ldw	r3,0(r2)
 4003188:	defff904 	addi	sp,sp,-28
 400318c:	dc000015 	stw	r16,0(sp)
 4003190:	1c000c17 	ldw	r16,48(r3)
 4003194:	dd400515 	stw	r21,20(sp)
 4003198:	dd000415 	stw	r20,16(sp)
 400319c:	dcc00315 	stw	r19,12(sp)
 40031a0:	dc800215 	stw	r18,8(sp)
 40031a4:	dc400115 	stw	r17,4(sp)
 40031a8:	dfc00615 	stw	ra,24(sp)
 40031ac:	202b883a 	mov	r21,r4
 40031b0:	2823883a 	mov	r17,r5
 40031b4:	3027883a 	mov	r19,r6
 40031b8:	3825883a 	mov	r18,r7
 40031bc:	1029883a 	mov	r20,r2
 40031c0:	8000021e 	bne	r16,zero,40031cc <__register_exitproc+0x50>
 40031c4:	1c000d04 	addi	r16,r3,52
 40031c8:	1c000c15 	stw	r16,48(r3)
 40031cc:	80800117 	ldw	r2,4(r16)
 40031d0:	00c007c4 	movi	r3,31
 40031d4:	1880110e 	bge	r3,r2,400321c <__register_exitproc+0xa0>
 40031d8:	00800034 	movhi	r2,0
 40031dc:	10800004 	addi	r2,r2,0
 40031e0:	1000021e 	bne	r2,zero,40031ec <__register_exitproc+0x70>
 40031e4:	00bfffc4 	movi	r2,-1
 40031e8:	00003106 	br	40032b0 <__register_exitproc+0x134>
 40031ec:	01002304 	movi	r4,140
 40031f0:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 40031f4:	1021883a 	mov	r16,r2
 40031f8:	103ffa26 	beq	r2,zero,40031e4 <__alt_mem_onchip_memory+0xfbffb1e4>
 40031fc:	10000115 	stw	zero,4(r2)
 4003200:	a0800017 	ldw	r2,0(r20)
 4003204:	10c00c17 	ldw	r3,48(r2)
 4003208:	80c00015 	stw	r3,0(r16)
 400320c:	14000c15 	stw	r16,48(r2)
 4003210:	80002215 	stw	zero,136(r16)
 4003214:	a8001d26 	beq	r21,zero,400328c <__register_exitproc+0x110>
 4003218:	00000606 	br	4003234 <__register_exitproc+0xb8>
 400321c:	a8001b26 	beq	r21,zero,400328c <__register_exitproc+0x110>
 4003220:	80802217 	ldw	r2,136(r16)
 4003224:	1000091e 	bne	r2,zero,400324c <__register_exitproc+0xd0>
 4003228:	00800034 	movhi	r2,0
 400322c:	10800004 	addi	r2,r2,0
 4003230:	103fec26 	beq	r2,zero,40031e4 <__alt_mem_onchip_memory+0xfbffb1e4>
 4003234:	01004204 	movi	r4,264
 4003238:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 400323c:	103fe926 	beq	r2,zero,40031e4 <__alt_mem_onchip_memory+0xfbffb1e4>
 4003240:	10004015 	stw	zero,256(r2)
 4003244:	10004115 	stw	zero,260(r2)
 4003248:	80802215 	stw	r2,136(r16)
 400324c:	81400117 	ldw	r5,4(r16)
 4003250:	01000044 	movi	r4,1
 4003254:	2947883a 	add	r3,r5,r5
 4003258:	18c7883a 	add	r3,r3,r3
 400325c:	10c7883a 	add	r3,r2,r3
 4003260:	1cc00015 	stw	r19,0(r3)
 4003264:	2148983a 	sll	r4,r4,r5
 4003268:	11404017 	ldw	r5,256(r2)
 400326c:	290ab03a 	or	r5,r5,r4
 4003270:	11404015 	stw	r5,256(r2)
 4003274:	1c802015 	stw	r18,128(r3)
 4003278:	00c00084 	movi	r3,2
 400327c:	a8c0031e 	bne	r21,r3,400328c <__register_exitproc+0x110>
 4003280:	10c04117 	ldw	r3,260(r2)
 4003284:	1908b03a 	or	r4,r3,r4
 4003288:	11004115 	stw	r4,260(r2)
 400328c:	80800117 	ldw	r2,4(r16)
 4003290:	10c00044 	addi	r3,r2,1
 4003294:	10800084 	addi	r2,r2,2
 4003298:	1085883a 	add	r2,r2,r2
 400329c:	1085883a 	add	r2,r2,r2
 40032a0:	80c00115 	stw	r3,4(r16)
 40032a4:	80a1883a 	add	r16,r16,r2
 40032a8:	84400015 	stw	r17,0(r16)
 40032ac:	0005883a 	mov	r2,zero
 40032b0:	dfc00617 	ldw	ra,24(sp)
 40032b4:	dd400517 	ldw	r21,20(sp)
 40032b8:	dd000417 	ldw	r20,16(sp)
 40032bc:	dcc00317 	ldw	r19,12(sp)
 40032c0:	dc800217 	ldw	r18,8(sp)
 40032c4:	dc400117 	ldw	r17,4(sp)
 40032c8:	dc000017 	ldw	r16,0(sp)
 40032cc:	dec00704 	addi	sp,sp,28
 40032d0:	f800283a 	ret

040032d4 <__call_exitprocs>:
 40032d4:	defff504 	addi	sp,sp,-44
 40032d8:	dd000515 	stw	r20,20(sp)
 40032dc:	05010034 	movhi	r20,1024
 40032e0:	dc800315 	stw	r18,12(sp)
 40032e4:	dfc00a15 	stw	ra,40(sp)
 40032e8:	df000915 	stw	fp,36(sp)
 40032ec:	ddc00815 	stw	r23,32(sp)
 40032f0:	dd800715 	stw	r22,28(sp)
 40032f4:	dd400615 	stw	r21,24(sp)
 40032f8:	dcc00415 	stw	r19,16(sp)
 40032fc:	dc400215 	stw	r17,8(sp)
 4003300:	dc000115 	stw	r16,4(sp)
 4003304:	d9000015 	stw	r4,0(sp)
 4003308:	2825883a 	mov	r18,r5
 400330c:	a511ef04 	addi	r20,r20,18364
 4003310:	a4400017 	ldw	r17,0(r20)
 4003314:	8cc00c17 	ldw	r19,48(r17)
 4003318:	8c400c04 	addi	r17,r17,48
 400331c:	98004526 	beq	r19,zero,4003434 <__call_exitprocs+0x160>
 4003320:	9c000117 	ldw	r16,4(r19)
 4003324:	00900034 	movhi	r2,16384
 4003328:	10bfffc4 	addi	r2,r2,-1
 400332c:	9d402217 	ldw	r21,136(r19)
 4003330:	85bfffc4 	addi	r22,r16,-1
 4003334:	80a1883a 	add	r16,r16,r2
 4003338:	8421883a 	add	r16,r16,r16
 400333c:	8421883a 	add	r16,r16,r16
 4003340:	ac2f883a 	add	r23,r21,r16
 4003344:	84000204 	addi	r16,r16,8
 4003348:	9c21883a 	add	r16,r19,r16
 400334c:	b0002716 	blt	r22,zero,40033ec <__call_exitprocs+0x118>
 4003350:	90000726 	beq	r18,zero,4003370 <__call_exitprocs+0x9c>
 4003354:	a800041e 	bne	r21,zero,4003368 <__call_exitprocs+0x94>
 4003358:	b5bfffc4 	addi	r22,r22,-1
 400335c:	bdffff04 	addi	r23,r23,-4
 4003360:	843fff04 	addi	r16,r16,-4
 4003364:	003ff906 	br	400334c <__alt_mem_onchip_memory+0xfbffb34c>
 4003368:	b9002017 	ldw	r4,128(r23)
 400336c:	913ffa1e 	bne	r18,r4,4003358 <__alt_mem_onchip_memory+0xfbffb358>
 4003370:	99000117 	ldw	r4,4(r19)
 4003374:	82000017 	ldw	r8,0(r16)
 4003378:	213fffc4 	addi	r4,r4,-1
 400337c:	b100021e 	bne	r22,r4,4003388 <__call_exitprocs+0xb4>
 4003380:	9d800115 	stw	r22,4(r19)
 4003384:	00000106 	br	400338c <__call_exitprocs+0xb8>
 4003388:	80000015 	stw	zero,0(r16)
 400338c:	403ff226 	beq	r8,zero,4003358 <__alt_mem_onchip_memory+0xfbffb358>
 4003390:	9f000117 	ldw	fp,4(r19)
 4003394:	a8000526 	beq	r21,zero,40033ac <__call_exitprocs+0xd8>
 4003398:	00800044 	movi	r2,1
 400339c:	1592983a 	sll	r9,r2,r22
 40033a0:	a9404017 	ldw	r5,256(r21)
 40033a4:	494a703a 	and	r5,r9,r5
 40033a8:	2800021e 	bne	r5,zero,40033b4 <__call_exitprocs+0xe0>
 40033ac:	403ee83a 	callr	r8
 40033b0:	00000906 	br	40033d8 <__call_exitprocs+0x104>
 40033b4:	a9004117 	ldw	r4,260(r21)
 40033b8:	4908703a 	and	r4,r9,r4
 40033bc:	2000041e 	bne	r4,zero,40033d0 <__call_exitprocs+0xfc>
 40033c0:	b9400017 	ldw	r5,0(r23)
 40033c4:	d9000017 	ldw	r4,0(sp)
 40033c8:	403ee83a 	callr	r8
 40033cc:	00000206 	br	40033d8 <__call_exitprocs+0x104>
 40033d0:	b9000017 	ldw	r4,0(r23)
 40033d4:	403ee83a 	callr	r8
 40033d8:	99000117 	ldw	r4,4(r19)
 40033dc:	e13fcc1e 	bne	fp,r4,4003310 <__alt_mem_onchip_memory+0xfbffb310>
 40033e0:	89000017 	ldw	r4,0(r17)
 40033e4:	993fdc26 	beq	r19,r4,4003358 <__alt_mem_onchip_memory+0xfbffb358>
 40033e8:	003fc906 	br	4003310 <__alt_mem_onchip_memory+0xfbffb310>
 40033ec:	00800034 	movhi	r2,0
 40033f0:	10800004 	addi	r2,r2,0
 40033f4:	10000f26 	beq	r2,zero,4003434 <__call_exitprocs+0x160>
 40033f8:	99400117 	ldw	r5,4(r19)
 40033fc:	99000017 	ldw	r4,0(r19)
 4003400:	2800091e 	bne	r5,zero,4003428 <__call_exitprocs+0x154>
 4003404:	20000826 	beq	r4,zero,4003428 <__call_exitprocs+0x154>
 4003408:	89000015 	stw	r4,0(r17)
 400340c:	a8000226 	beq	r21,zero,4003418 <__call_exitprocs+0x144>
 4003410:	a809883a 	mov	r4,r21
 4003414:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4003418:	9809883a 	mov	r4,r19
 400341c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4003420:	8cc00017 	ldw	r19,0(r17)
 4003424:	003fbd06 	br	400331c <__alt_mem_onchip_memory+0xfbffb31c>
 4003428:	9823883a 	mov	r17,r19
 400342c:	2027883a 	mov	r19,r4
 4003430:	003fba06 	br	400331c <__alt_mem_onchip_memory+0xfbffb31c>
 4003434:	dfc00a17 	ldw	ra,40(sp)
 4003438:	df000917 	ldw	fp,36(sp)
 400343c:	ddc00817 	ldw	r23,32(sp)
 4003440:	dd800717 	ldw	r22,28(sp)
 4003444:	dd400617 	ldw	r21,24(sp)
 4003448:	dd000517 	ldw	r20,20(sp)
 400344c:	dcc00417 	ldw	r19,16(sp)
 4003450:	dc800317 	ldw	r18,12(sp)
 4003454:	dc400217 	ldw	r17,8(sp)
 4003458:	dc000117 	ldw	r16,4(sp)
 400345c:	dec00b04 	addi	sp,sp,44
 4003460:	f800283a 	ret

04003464 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4003464:	defffd04 	addi	sp,sp,-12
 4003468:	df000215 	stw	fp,8(sp)
 400346c:	df000204 	addi	fp,sp,8
 4003470:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4003474:	0001883a 	nop
 4003478:	e0bfff17 	ldw	r2,-4(fp)
 400347c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4003480:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4003484:	10000226 	beq	r2,zero,4003490 <_exit+0x2c>
    ALT_SIM_FAIL();
 4003488:	002af070 	cmpltui	zero,zero,43969
 400348c:	00000106 	br	4003494 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4003490:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4003494:	003fff06 	br	4003494 <__alt_mem_onchip_memory+0xfbffb494>
